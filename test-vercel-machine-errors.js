#!/usr/bin/env node

/**
 * Script para testar os erros espec√≠ficos do Vercel:
 * - "Erro ao carregar dados da m√°quina"
 * - "Erro ao carregar hist√≥rico de status"
 * 
 * Este script verifica se as corre√ß√µes do 'acc is not defined' resolveram os problemas.
 */

const https = require('https');
const http = require('http');

const VERCEL_URL = 'https://sistema-zara-frontend.vercel.app';
const LOCAL_URL = 'http://localhost:5173';

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https') ? https : http;
    
    client.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => resolve({ status: res.statusCode, data }));
    }).on('error', reject);
  });
}

async function testMachineErrors() {
  console.log('üîç Testando erros de m√°quina no Vercel...');
  console.log('='.repeat(50));
  
  try {
    // 1. Testar se o Vercel est√° acess√≠vel
    console.log('\n1. Testando acesso ao Vercel...');
    const vercelResponse = await makeRequest(VERCEL_URL);
    
    if (vercelResponse.status === 200) {
      console.log('‚úÖ Vercel acess√≠vel (status 200)');
      
      // Verificar se h√° refer√™ncias aos erros no HTML
      const hasAccError = vercelResponse.data.includes('acc is not defined');
      const hasMachineError = vercelResponse.data.includes('MachineStatus-BMX93HeZ.js');
      
      console.log(`üìä An√°lise do HTML:`);
      console.log(`   - Erro 'acc is not defined': ${hasAccError ? '‚ùå ENCONTRADO' : '‚úÖ N√ÉO ENCONTRADO'}`);
      console.log(`   - Arquivo MachineStatus problem√°tico: ${hasMachineError ? '‚ö†Ô∏è PRESENTE' : '‚úÖ AUSENTE'}`);
      
    } else {
      console.log(`‚ùå Vercel retornou status ${vercelResponse.status}`);
    }
    
    // 2. Testar local para compara√ß√£o
    console.log('\n2. Testando vers√£o local...');
    try {
      const localResponse = await makeRequest(LOCAL_URL);
      if (localResponse.status === 200) {
        console.log('‚úÖ Vers√£o local funcionando (status 200)');
      } else {
        console.log(`‚ö†Ô∏è Vers√£o local retornou status ${localResponse.status}`);
      }
    } catch (localError) {
      console.log('‚ö†Ô∏è Vers√£o local n√£o est√° rodando ou inacess√≠vel');
      console.log('   Execute: npm run dev no diret√≥rio frontend');
    }
    
    // 3. Instru√ß√µes para teste manual
    console.log('\n3. üìã Instru√ß√µes para teste manual:');
    console.log('   a) Acesse: ' + VERCEL_URL);
    console.log('   b) Abra o Console do navegador (F12)');
    console.log('   c) Procure por erros relacionados a:');
    console.log('      - "acc is not defined"');
    console.log('      - "Erro ao carregar dados da m√°quina"');
    console.log('      - "Erro ao carregar hist√≥rico de status"');
    console.log('   d) Se n√£o houver erros, a corre√ß√£o funcionou! ‚úÖ');
    
    // 4. Verificar se precisa de redeploy
    console.log('\n4. üöÄ Status do Deploy:');
    console.log('   - Git: ‚úÖ Commits enviados');
    console.log('   - Railway: ‚úÖ Funcionando');
    console.log('   - Vercel: ‚ö†Ô∏è PRECISA DE REDEPLOY MANUAL');
    
    console.log('\n5. üîß Como fazer redeploy no Vercel:');
    console.log('   a) Acesse: https://vercel.com/dashboard');
    console.log('   b) Encontre o projeto "sistema-zara-frontend"');
    console.log('   c) Clique em "Redeploy" na √∫ltima deployment');
    console.log('   d) Aguarde o build completar');
    console.log('   e) Teste novamente os erros');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
  
  console.log('\n' + '=' .repeat(50));
  console.log('üéØ Resumo: As corre√ß√µes foram aplicadas localmente.');
  console.log('   Para resolver os erros no Vercel, fa√ßa o redeploy manual.');
}

// Executar o teste
testMachineErrors().catch(console.error);