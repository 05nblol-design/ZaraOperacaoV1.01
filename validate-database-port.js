#!/usr/bin/env node

/**
 * VALIDADOR DE PORTA DA DATABASE_URL
 * 
 * Detecta e corrige problemas espec√≠ficos de porta na string de conex√£o PostgreSQL
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VALIDADOR DE PORTA DA DATABASE_URL\n');

// Fun√ß√£o para validar URL do banco
function validateDatabaseUrl(url) {
    const errors = [];
    const warnings = [];
    
    if (!url) {
        errors.push('DATABASE_URL n√£o definida');
        return { valid: false, errors, warnings };
    }
    
    try {
        // Converter postgresql:// para http:// para usar URL parser
        const testUrl = url.replace(/^postgresql:\/\//, 'http://');
        const parsed = new URL(testUrl);
        
        // Validar porta
        if (!parsed.port) {
            errors.push('Porta n√£o especificada na URL');
        } else {
            const portNum = parseInt(parsed.port);
            
            if (isNaN(portNum)) {
                errors.push(`Porta inv√°lida: "${parsed.port}" (deve ser num√©rica)`);
            } else if (portNum < 1 || portNum > 65535) {
                errors.push(`Porta fora do range v√°lido: ${portNum} (deve ser 1-65535)`);
            } else if (portNum !== 5432) {
                warnings.push(`Porta n√£o padr√£o para PostgreSQL: ${portNum} (padr√£o √© 5432)`);
            }
        }
        
        // Validar hostname
        if (parsed.hostname === 'host') {
            errors.push('Hostname gen√©rico "host" - deve ser o hostname real do Railway');
        } else if (parsed.hostname === 'localhost' || parsed.hostname === '127.0.0.1') {
            warnings.push('Hostname local detectado - pode n√£o funcionar no Railway');
        }
        
        // Validar usu√°rio e senha
        if (!parsed.username) {
            errors.push('Usu√°rio n√£o especificado');
        }
        
        if (!parsed.password) {
            errors.push('Senha n√£o especificada');
        }
        
        // Validar database
        const dbName = parsed.pathname.substring(1);
        if (!dbName) {
            errors.push('Nome do banco n√£o especificado');
        }
        
        return {
            valid: errors.length === 0,
            errors,
            warnings,
            parsed: {
                hostname: parsed.hostname,
                port: parsed.port,
                username: parsed.username,
                password: parsed.password ? '[PRESENTE]' : '[AUSENTE]',
                database: dbName
            }
        };
        
    } catch (error) {
        errors.push(`Erro ao analisar URL: ${error.message}`);
        return { valid: false, errors, warnings };
    }
}

// Fun√ß√£o para gerar URL correta
function generateCorrectUrl() {
    return {
        template: 'postgresql://usuario:senha@hostname.railway.internal:5432/railway',
        example: 'postgresql://postgres:kGh9mN2pL8qR@postgres.railway.internal:5432/railway',
        railwayTemplate: '${{ Postgres.DATABASE_URL }}'
    };
}

// Verificar vari√°veis de ambiente
const envVars = {
    DATABASE_URL: process.env.DATABASE_URL,
    POSTGRES_URL: process.env.POSTGRES_URL,
    DB_URL: process.env.DB_URL
};

console.log('üìã VARI√ÅVEIS DE AMBIENTE ENCONTRADAS:');
Object.entries(envVars).forEach(([key, value]) => {
    if (value) {
        console.log(`‚úÖ ${key}: ${value}`);
    } else {
        console.log(`‚ùå ${key}: n√£o definida`);
    }
});

// Validar DATABASE_URL principal
const mainUrl = envVars.DATABASE_URL;
console.log('\nüîç VALIDA√á√ÉO DA DATABASE_URL:');

if (mainUrl) {
    const validation = validateDatabaseUrl(mainUrl);
    
    console.log('\nüìä DETALHES DA URL:');
    if (validation.parsed) {
        Object.entries(validation.parsed).forEach(([key, value]) => {
            console.log(`   ${key}: ${value}`);
        });
    }
    
    if (validation.errors.length > 0) {
        console.log('\n‚ùå ERROS ENCONTRADOS:');
        validation.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
    }
    
    if (validation.warnings.length > 0) {
        console.log('\n‚ö†Ô∏è  AVISOS:');
        validation.warnings.forEach(warning => console.log(`   ‚Ä¢ ${warning}`));
    }
    
    if (validation.valid) {
        console.log('\n‚úÖ URL v√°lida!');
    } else {
        console.log('\n‚ùå URL inv√°lida - corre√ß√£o necess√°ria');
    }
} else {
    console.log('‚ùå DATABASE_URL n√£o encontrada');
}

// Mostrar formatos corretos
const correctFormats = generateCorrectUrl();
console.log('\nüìù FORMATOS CORRETOS:');
console.log(`\n1. Template Railway:`);
console.log(`   ${correctFormats.railwayTemplate}`);
console.log(`\n2. Formato completo:`);
console.log(`   ${correctFormats.template}`);
console.log(`\n3. Exemplo real:`);
console.log(`   ${correctFormats.example}`);

// Instru√ß√µes de corre√ß√£o
console.log('\nüîß PASSOS PARA CORRE√á√ÉO:');
console.log('\n1. Acesse Railway Dashboard:');
console.log('   https://railway.app/dashboard');
console.log('\n2. No servi√ßo PostgreSQL:');
console.log('   ‚Ä¢ Clique no servi√ßo PostgreSQL');
console.log('   ‚Ä¢ V√° em "Variables" ou "Connect"');
console.log('   ‚Ä¢ Copie a DATABASE_URL completa');
console.log('\n3. No servi√ßo Backend:');
console.log('   ‚Ä¢ Clique no servi√ßo do backend');
console.log('   ‚Ä¢ V√° em "Variables"');
console.log('   ‚Ä¢ Adicione/edite DATABASE_URL');
console.log('   ‚Ä¢ Cole a URL correta');
console.log('   ‚Ä¢ Clique "Deploy"');

console.log('\n‚è±Ô∏è  Tempo estimado: 3-5 minutos');
console.log('\nüß™ Teste ap√≥s corre√ß√£o:');
console.log('curl https://seu-backend.railway.app/api/health');