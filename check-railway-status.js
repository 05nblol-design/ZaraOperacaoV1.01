#!/usr/bin/env node

/**
 * VERIFICA√á√ÉO DE STATUS DO RAILWAY
 * 
 * Script para orientar sobre verifica√ß√£o de logs e status dos servi√ßos
 */

console.log('üöÄ VERIFICA√á√ÉO DE STATUS - RAILWAY DASHBOARD\n');

// Informa√ß√µes do projeto
const projectInfo = {
    name: 'ZaraOperacaoV1.01',
    services: {
        backend: 'Servi√ßo do Backend (Node.js)',
        postgres: 'PostgreSQL Database'
    },
    expectedUrl: 'postgresql://postgres:GNquZiBhCMsFDZbvDTevPkrWFdRyyLQM@postgres.railway.internal:5432/railway'
};

console.log('üìã INFORMA√á√ïES DO PROJETO:');
console.log(`   Nome: ${projectInfo.name}`);
console.log(`   Servi√ßos: Backend + PostgreSQL`);
console.log();

// Verificar vari√°veis de ambiente locais
console.log('üîç VERIFICA√á√ÉO LOCAL:');
const localDbUrl = process.env.DATABASE_URL;

if (localDbUrl) {
    console.log('‚úÖ DATABASE_URL encontrada localmente');
    console.log(`   Valor: ${localDbUrl}`);
    
    if (localDbUrl === projectInfo.expectedUrl) {
        console.log('‚úÖ URL local corresponde √† URL esperada do Railway');
    } else {
        console.log('‚ö†Ô∏è  URL local DIFERENTE da URL esperada do Railway');
    }
} else {
    console.log('‚ùå DATABASE_URL N√ÉO encontrada localmente');
    console.log('   Isso √© normal - a URL deve estar configurada no Railway');
}

console.log();

// Instru√ß√µes para acessar Railway
console.log('üåê ACESSO AO RAILWAY DASHBOARD:');
console.log('1. Abra: https://railway.app/dashboard');
console.log('2. Fa√ßa login na sua conta');
console.log('3. Localize o projeto "ZaraOperacaoV1.01"');
console.log('4. Clique no projeto para abrir');
console.log();

// Verifica√ß√µes espec√≠ficas
console.log('üîç VERIFICA√á√ïES NECESS√ÅRIAS NO RAILWAY:');
console.log();

console.log('üìä 1. STATUS DOS SERVI√áOS:');
console.log('   Backend (Node.js):');
console.log('   ‚îú‚îÄ‚îÄ Status deve estar: "Running" (verde)');
console.log('   ‚îú‚îÄ‚îÄ Se "Crashed": clique "Restart"');
console.log('   ‚îî‚îÄ‚îÄ Se "Building": aguarde conclus√£o');
console.log();
console.log('   PostgreSQL:');
console.log('   ‚îú‚îÄ‚îÄ Status deve estar: "Running" (verde)');
console.log('   ‚îú‚îÄ‚îÄ Se "Crashed": clique "Restart"');
console.log('   ‚îî‚îÄ‚îÄ Deve mostrar uso de mem√≥ria/CPU');
console.log();

console.log('üîß 2. VARI√ÅVEIS DE AMBIENTE (Backend):');
console.log('   ‚Ä¢ Clique no servi√ßo Backend');
console.log('   ‚Ä¢ V√° em "Variables"');
console.log('   ‚Ä¢ Verifique se DATABASE_URL existe');
console.log('   ‚Ä¢ Valor esperado:');
console.log(`     ${projectInfo.expectedUrl}`);
console.log();

console.log('üìã 3. LOGS DO BACKEND:');
console.log('   ‚Ä¢ Clique no servi√ßo Backend');
console.log('   ‚Ä¢ V√° em "Deployments"');
console.log('   ‚Ä¢ Clique no deployment mais recente');
console.log('   ‚Ä¢ Procure por:');
console.log();
console.log('   ‚úÖ LOGS DE SUCESSO:');
console.log('      "Server running on port 3000"');
console.log('      "Database connected successfully"');
console.log('      "Prisma Client initialized"');
console.log();
console.log('   ‚ùå LOGS DE ERRO:');
console.log('      "PrismaClientInitializationError"');
console.log('      "invalid port number"');
console.log('      "Can\'t reach database server"');
console.log('      "ECONNREFUSED"');
console.log();

console.log('üóÑÔ∏è 4. LOGS DO POSTGRESQL:');
console.log('   ‚Ä¢ Clique no servi√ßo PostgreSQL');
console.log('   ‚Ä¢ Verifique os logs para:');
console.log('   ‚úÖ "database system is ready to accept connections"');
console.log('   ‚ùå "database system is shut down"');
console.log();

// A√ß√µes baseadas nos resultados
console.log('üõ†Ô∏è A√á√ïES BASEADAS NOS LOGS:');
console.log();
console.log('Se DATABASE_URL estiver AUSENTE ou INCORRETA:');
console.log('1. No servi√ßo Backend ‚Üí Variables');
console.log('2. Adicionar/editar DATABASE_URL');
console.log('3. Colar a URL correta (mostrada acima)');
console.log('4. Clicar "Deploy"');
console.log('5. Aguardar redeploy (1-2 minutos)');
console.log();

console.log('Se PostgreSQL estiver PARADO:');
console.log('1. Clicar no servi√ßo PostgreSQL');
console.log('2. Clicar "Restart"');
console.log('3. Aguardar status "Running"');
console.log('4. Verificar logs de inicializa√ß√£o');
console.log();

console.log('Se Backend estiver com ERRO:');
console.log('1. Verificar logs completos');
console.log('2. Identificar erro espec√≠fico');
console.log('3. Corrigir configura√ß√£o necess√°ria');
console.log('4. Fazer redeploy se necess√°rio');
console.log();

// Teste de conectividade
console.log('üß™ TESTE DE CONECTIVIDADE:');
console.log();
console.log('Ap√≥s configura√ß√£o, teste o endpoint:');
console.log('curl https://seu-backend.railway.app/api/health');
console.log();
console.log('Resposta esperada:');
console.log('{');
console.log('  "status": "ok",');
console.log('  "database": "connected",');
console.log('  "timestamp": "2024-01-XX..."');
console.log('}');
console.log();

// Resumo final
console.log('üìä RESUMO DA VERIFICA√á√ÉO:');
console.log('1. ‚úÖ Acesse Railway Dashboard');
console.log('2. üîç Verifique status dos servi√ßos');
console.log('3. üîß Confirme DATABASE_URL no backend');
console.log('4. üìã Analise logs para erros');
console.log('5. üõ†Ô∏è Corrija problemas identificados');
console.log('6. üß™ Teste conectividade final');
console.log();

console.log('üéØ OBJETIVO: Garantir que ambos os servi√ßos estejam "Running" e sem erros');
console.log('‚è±Ô∏è  Tempo estimado: 5-10 minutos para verifica√ß√£o completa');
console.log();
console.log('üí° DICA: Mantenha os logs abertos durante os testes!');