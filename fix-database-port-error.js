#!/usr/bin/env node

/**
 * CORRE√á√ÉO URGENTE: Erro de porta inv√°lida na DATABASE_URL
 * 
 * Erro: "invalid port number in database URL"
 * Causa: Porta malformada, caracteres especiais n√£o escapados, ou formato incorreto
 */

console.log('üîç DIAGN√ìSTICO: Erro de porta inv√°lida na DATABASE_URL\n');

// Verificar vari√°vel de ambiente atual
const currentUrl = process.env.DATABASE_URL;

if (!currentUrl) {
    console.log('‚ùå DATABASE_URL n√£o encontrada no ambiente atual');
    console.log('\nüìã Vari√°veis dispon√≠veis:');
    Object.keys(process.env)
        .filter(key => key.includes('DATABASE') || key.includes('POSTGRES'))
        .forEach(key => console.log(`   ${key}=${process.env[key]}`));
} else {
    console.log('‚úÖ DATABASE_URL encontrada:', currentUrl);
    
    // Analisar problemas na URL
    console.log('\nüîç AN√ÅLISE DA URL:');
    
    try {
        const url = new URL(currentUrl.replace('postgresql://', 'http://'));
        console.log('   Host:', url.hostname);
        console.log('   Porta:', url.port);
        console.log('   Usu√°rio:', url.username);
        console.log('   Senha:', url.password ? '[PRESENTE]' : '[AUSENTE]');
        console.log('   Database:', url.pathname.substring(1));
        
        // Verificar problemas espec√≠ficos
        const problems = [];
        
        if (!url.port || url.port === '') {
            problems.push('‚ùå Porta n√£o especificada');
        } else if (isNaN(parseInt(url.port))) {
            problems.push(`‚ùå Porta inv√°lida: "${url.port}" (deve ser num√©rica)`);
        } else if (parseInt(url.port) < 1 || parseInt(url.port) > 65535) {
            problems.push(`‚ùå Porta fora do range v√°lido: ${url.port}`);
        }
        
        if (url.hostname === 'host' || url.hostname === 'localhost') {
            problems.push(`‚ùå Hostname gen√©rico: "${url.hostname}"`);
        }
        
        if (problems.length > 0) {
            console.log('\nüö® PROBLEMAS IDENTIFICADOS:');
            problems.forEach(problem => console.log(`   ${problem}`));
        } else {
            console.log('\n‚úÖ Formato da URL parece correto');
        }
        
    } catch (error) {
        console.log('‚ùå Erro ao analisar URL:', error.message);
    }
}

console.log('\nüîß CORRE√á√ÉO NO RAILWAY DASHBOARD:');
console.log('\n1. Acesse: https://railway.app/dashboard');
console.log('2. Selecione seu projeto');
console.log('3. Clique no servi√ßo PostgreSQL');
console.log('4. V√° em "Variables" ou "Connect"');
console.log('5. Copie a DATABASE_URL correta');
console.log('\n6. No servi√ßo do backend:');
console.log('   - V√° em "Variables"');
console.log('   - Adicione/edite DATABASE_URL');
console.log('   - Cole a URL correta do PostgreSQL');
console.log('   - Clique "Deploy"');

console.log('\nüìù FORMATO CORRETO DA DATABASE_URL:');
console.log('postgresql://usuario:senha@hostname.railway.internal:5432/railway');
console.log('\nExemplo:');
console.log('postgresql://postgres:abc123@postgres.railway.internal:5432/railway');

console.log('\n‚ùå FORMATOS INCORRETOS COMUNS:');
console.log('postgresql://user:pass@host:5432/db          (hostname gen√©rico)');
console.log('postgresql://user:pass@host.com:/db        (porta vazia)');
console.log('postgresql://user:pass@host.com:abc/db     (porta n√£o num√©rica)');
console.log('postgresql://user:pass@host.com:99999/db   (porta inv√°lida)');

console.log('\nüß™ TESTE AP√ìS CORRE√á√ÉO:');
console.log('curl https://seu-backend.railway.app/api/health');

console.log('\n‚è±Ô∏è  TEMPO ESTIMADO: 2-3 minutos para corre√ß√£o + 1-2 minutos para redeploy');
console.log('\nüÜò Se o problema persistir:');
console.log('   1. Verifique se o servi√ßo PostgreSQL est√° ativo');
console.log('   2. Regenere as credenciais do banco');
console.log('   3. Verifique logs do deploy no Railway');