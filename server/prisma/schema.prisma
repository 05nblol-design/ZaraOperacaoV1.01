// Schema Prisma para PostgreSQL - Produção
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String
  avatar      String?
  badgeNumber String?  @unique
  role        String   @default("OPERATOR")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  qualityTests       QualityTest[]
  teflonChanges      TeflonChange[]
  notifications      Notification[]
  machineOperations  MachineOperation[]
  devices            UserDevice[]
  shifts             Shift[]
  reports            Report[]
  permissions        UserPermission[]
  machinePermissions MachinePermission[]
  statusHistory      MachineStatusHistory[]
  productionData     ProductionData[]
  archiveData        ArchiveData[]
  shiftData          ShiftData[]
  productionArchives ProductionArchive[]

  @@map("users")
}

// Modelo de Máquina
model Machine {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        String
  location    String?
  status      String   @default("STOPPED")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  qualityTests      QualityTest[]
  teflonChanges     TeflonChange[]
  operations        MachineOperation[]
  permissions       MachinePermission[]
  statusHistory     MachineStatusHistory[]
  productionData    ProductionData[]
  archiveData       ArchiveData[]
  shiftData         ShiftData[]
  productionArchives ProductionArchive[]

  @@map("machines")
}

// Outros modelos básicos para funcionamento
model QualityTest {
  id        Int      @id @default(autoincrement())
  userId    Int
  machineId Int
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@map("quality_tests")
}

model TeflonChange {
  id        Int      @id @default(autoincrement())
  userId    Int
  machineId Int
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@map("teflon_changes")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model MachineOperation {
  id        Int       @id @default(autoincrement())
  userId    Int
  machineId Int
  status    String    @default("ACTIVE")
  startTime DateTime  @default(now())
  endTime   DateTime?
  createdAt DateTime  @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@map("machine_operations")
}

model UserDevice {
  id     Int    @id @default(autoincrement())
  userId Int
  token  String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_devices")
}

model Shift {
  id     Int @id @default(autoincrement())
  userId Int
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("shifts")
}

model Report {
  id     Int @id @default(autoincrement())
  userId Int
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}

model UserPermission {
  id     Int @id @default(autoincrement())
  userId Int
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_permissions")
}

model MachinePermission {
  id         Int     @id @default(autoincrement())
  userId     Int
  machineId  Int
  canView    Boolean @default(true)
  canOperate Boolean @default(false)
  canEdit    Boolean @default(false)
  grantedBy  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@unique([userId, machineId])
  @@map("machine_permissions")
}

model MachineStatusHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  machineId Int
  status    String
  reason    String?
  notes     String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@map("machine_status_history")
}

model ProductionData {
  id        Int @id @default(autoincrement())
  userId    Int
  machineId Int
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@map("production_data")
}
// Modelo de Dados de Turno
model ShiftData {
  id               Int      @id @default(autoincrement())
  machineId        Int
  operatorId       Int
  shiftType        String   // "MORNING", "AFTERNOON", "NIGHT"
  shiftDate        DateTime @default(now())
  startTime        String
  endTime          String?
  totalProduction  Int      @default(0)
  targetProduction Int      @default(0)
  efficiency       Float    @default(0)
  downtime         Int      @default(0)
  runningTime      Int      @default(0)
  qualityTests     Int      @default(0)
  approvedTests    Int      @default(0)
  rejectedTests    Int      @default(0)
  productionData   String?  // JSON
  qualityData      String?  // JSON
  maintenanceData  String?  // JSON
  isArchived       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  machine  Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  operator User    @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@map("shift_data")
}
// Modelo de Arquivo de Produção
model ProductionArchive {
  id            Int      @id @default(autoincrement())
  shiftDataId   Int
  machineId     Int
  operatorId    Int
  archiveData   String   // JSON com todos os dados do turno
  archivedAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  machine  Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  operator User    @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@map("production_archives")
}



model ArchiveData {
  id        Int @id @default(autoincrement())
  userId    Int
  machineId Int
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@map("archive_data")
}