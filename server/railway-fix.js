const fs = require('fs');
const path = require('path');

console.log('üöÇ CORRE√á√ÉO RAILWAY - Diagn√≥stico e Solu√ß√µes');
console.log('=' .repeat(60));

// Verificar arquivos de configura√ß√£o
const configFiles = [
  { path: '../Dockerfile', name: 'Dockerfile' },
  { path: '../railway.toml', name: 'railway.toml' },
  { path: './railway.json', name: 'railway.json' },
  { path: './package.json', name: 'package.json' },
  { path: './prisma/schema.prisma', name: 'schema.prisma' }
];

console.log('\nüìÅ VERIFICANDO ARQUIVOS DE CONFIGURA√á√ÉO:');
configFiles.forEach(file => {
  if (fs.existsSync(file.path)) {
    console.log(`‚úÖ ${file.name}`);
  } else {
    console.log(`‚ùå ${file.name} - FALTANDO!`);
  }
});

// Verificar package.json
console.log('\nüì¶ VERIFICANDO PACKAGE.JSON:');
try {
  const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
  
  console.log(`‚úÖ Nome: ${packageJson.name}`);
  console.log(`‚úÖ Vers√£o: ${packageJson.version}`);
  
  // Verificar scripts essenciais
  const requiredScripts = ['start', 'dev'];
  requiredScripts.forEach(script => {
    if (packageJson.scripts && packageJson.scripts[script]) {
      console.log(`‚úÖ Script '${script}': ${packageJson.scripts[script]}`);
    } else {
      console.log(`‚ùå Script '${script}' n√£o encontrado!`);
    }
  });
  
  // Verificar depend√™ncias cr√≠ticas
  const criticalDeps = ['express', 'prisma', '@prisma/client'];
  criticalDeps.forEach(dep => {
    if (packageJson.dependencies && packageJson.dependencies[dep]) {
      console.log(`‚úÖ Depend√™ncia '${dep}': ${packageJson.dependencies[dep]}`);
    } else if (packageJson.devDependencies && packageJson.devDependencies[dep]) {
      console.log(`‚úÖ DevDepend√™ncia '${dep}': ${packageJson.devDependencies[dep]}`);
    } else {
      console.log(`‚ùå Depend√™ncia '${dep}' n√£o encontrada!`);
    }
  });
  
} catch (error) {
  console.log(`‚ùå Erro ao ler package.json: ${error.message}`);
}

// Verificar Prisma Schema
console.log('\nüóÑÔ∏è VERIFICANDO PRISMA SCHEMA:');
try {
  const schemaContent = fs.readFileSync('./prisma/schema.prisma', 'utf8');
  
  if (schemaContent.includes('provider = "postgresql"')) {
    console.log('‚úÖ Provider PostgreSQL configurado');
  } else {
    console.log('‚ùå Provider PostgreSQL n√£o encontrado!');
  }
  
  if (schemaContent.includes('env("DATABASE_URL")')) {
    console.log('‚úÖ DATABASE_URL configurada no schema');
  } else {
    console.log('‚ùå DATABASE_URL n√£o configurada no schema!');
  }
  
} catch (error) {
  console.log(`‚ùå Erro ao ler schema.prisma: ${error.message}`);
}

// Verificar railway.toml
console.log('\nüöÇ VERIFICANDO RAILWAY.TOML:');
try {
  const railwayToml = fs.readFileSync('../railway.toml', 'utf8');
  
  if (railwayToml.includes('buildContext = "server"')) {
    console.log('‚úÖ Build context configurado para "server"');
  } else {
    console.log('‚ùå Build context n√£o configurado!');
  }
  
  if (railwayToml.includes('startCommand = "npm start"')) {
    console.log('‚úÖ Start command configurado');
  } else {
    console.log('‚ùå Start command n√£o configurado!');
  }
  
  if (railwayToml.includes('healthcheckPath = "/api/health"')) {
    console.log('‚úÖ Health check configurado');
  } else {
    console.log('‚ùå Health check n√£o configurado!');
  }
  
} catch (error) {
  console.log(`‚ùå Erro ao ler railway.toml: ${error.message}`);
}

// Solu√ß√µes recomendadas
console.log('\nüîß SOLU√á√ïES RECOMENDADAS:');
console.log('=' .repeat(50));

console.log('\n1. üåê CONFIGURAR VARI√ÅVEIS DE AMBIENTE NO RAILWAY:');
console.log('   Acesse o Railway Dashboard ‚Üí Variables e adicione:');
console.log('');
console.log('   DATABASE_URL=postgresql://postgres:senha@host:5432/railway');
console.log('   NODE_ENV=production');
console.log('   PORT=5000');
console.log('   JWT_SECRET=seu-jwt-secret-super-seguro');
console.log('   CORS_ORIGINS=https://sistema-zara-frontend.vercel.app');
console.log('   CLIENT_URL=https://sistema-zara-frontend.vercel.app');
console.log('');

console.log('2. üîÑ REDEPLOYAR O SERVI√áO:');
console.log('   - No Railway Dashboard, clique em "Deploy"');
console.log('   - Ou fa√ßa um novo commit e push para trigger o deploy');
console.log('');

console.log('3. üóÑÔ∏è VERIFICAR POSTGRESQL:');
console.log('   - Certifique-se que o PostgreSQL est√° rodando no Railway');
console.log('   - Verifique se a DATABASE_URL est√° correta');
console.log('   - Execute as migra√ß√µes: npx prisma migrate deploy');
console.log('');

console.log('4. üß™ TESTAR ENDPOINTS:');
console.log('   Ap√≥s o deploy, teste:');
console.log('   - https://seu-app.railway.app/api/health');
console.log('   - https://seu-app.railway.app/api/quality-tests');
console.log('   - https://seu-app.railway.app/api/reports');
console.log('');

console.log('5. üîç VERIFICAR LOGS:');
console.log('   - No Railway Dashboard, v√° em "Deployments"');
console.log('   - Clique no √∫ltimo deploy e verifique os logs');
console.log('   - Procure por erros de build ou runtime');
console.log('');

// Criar arquivo de exemplo de vari√°veis
const envExample = `# VARI√ÅVEIS DE AMBIENTE PARA RAILWAY
# Copie estas vari√°veis para o Railway Dashboard ‚Üí Variables

# Database
DATABASE_URL=postgresql://postgres:senha@host.railway.app:5432/railway

# Servidor
NODE_ENV=production
PORT=5000

# JWT
JWT_SECRET=seu-jwt-secret-super-seguro-aqui
JWT_EXPIRES_IN=7d

# CORS
CORS_ORIGINS=https://sistema-zara-frontend.vercel.app
CLIENT_URL=https://sistema-zara-frontend.vercel.app

# Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH=/tmp/uploads

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Session
SESSION_SECRET=seu-session-secret-super-seguro
TRUST_PROXY=true
SECURE_COOKIES=true

# App Info
APP_NAME=Sistema ZARA
APP_VERSION=1.0.1
`;

fs.writeFileSync('.env.railway.example', envExample);
console.log('üìù Arquivo .env.railway.example criado com as vari√°veis necess√°rias!');

console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO!');
console.log('\nüéØ PR√ìXIMOS PASSOS:');
console.log('1. Configure as vari√°veis de ambiente no Railway Dashboard');
console.log('2. Fa√ßa um redeploy do servi√ßo');
console.log('3. Aguarde o build completar');
console.log('4. Teste os endpoints da API');
console.log('5. Verifique se o frontend consegue conectar');

console.log('\nüîó LINKS √öTEIS:');
console.log('- Railway Dashboard: https://railway.app/dashboard');
console.log('- Documenta√ß√£o Railway: https://docs.railway.app');
console.log('- Prisma Railway Guide: https://www.prisma.io/docs/guides/deployment/deployment-guides/deploying-to-railway');