const jwt = require('jsonwebtoken');
const axios = require('axios');

// Configura√ß√£o
const JWT_SECRET = 'zara-jwt-secret-key-2024';
const API_URL = 'http://localhost:3001/api';

console.log('üîç VERIFICANDO DADOS DAS M√ÅQUINAS');
console.log('=================================\n');

// Gerar token admin
const adminToken = jwt.sign(
  { id: 1, role: 'ADMIN', name: 'Admin Test', email: 'admin@test.com' },
  JWT_SECRET,
  { expiresIn: '1h' }
);

async function checkMachinesData() {
  try {
    console.log('üì° Fazendo requisi√ß√£o para /api/machines...');
    
    const response = await axios.get(`${API_URL}/machines`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    console.log('‚úÖ Resposta recebida:');
    console.log('Status:', response.status);
    console.log('Dados:', JSON.stringify(response.data, null, 2));
    
    if (Array.isArray(response.data)) {
      console.log(`\nüìä Total de m√°quinas: ${response.data.length}`);
      
      if (response.data.length > 0) {
        const firstMachine = response.data[0];
        console.log('\nüè≠ Primeira m√°quina:');
        console.log('ID:', firstMachine.id);
        console.log('Nome:', firstMachine.name || 'N/A');
        console.log('Status:', firstMachine.status || 'N/A');
        console.log('Tipo:', firstMachine.type || 'N/A');
        console.log('Localiza√ß√£o:', firstMachine.location || 'N/A');
        
        console.log('\nüîß Estrutura completa da primeira m√°quina:');
        console.log(JSON.stringify(firstMachine, null, 2));
      } else {
        console.log('‚ùå Nenhuma m√°quina encontrada');
      }
    } else {
      console.log('‚ùå Resposta n√£o √© um array:', typeof response.data);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar m√°quinas:');
    console.error('Status:', error.response?.status);
    console.error('Mensagem:', error.message);
    console.error('Dados:', error.response?.data);
  }
}

checkMachinesData();