const { PrismaClient } = require('@prisma/client');
const axios = require('axios');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();
const API_BASE = 'http://localhost:5000/api';
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// Configura√ß√£o
const API_BASE_URL = 'http://localhost:5000/api';
const MACHINE_ID = 1;
const MANAGER_EMAIL = 'manager@zara.com';
const MANAGER_PASSWORD = 'manager123';

// Gerar token JWT diretamente
async function generateToken() {
  const payload = {
    id: '507f1f77bcf86cd799439013', // ID do manager
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60) // 7 dias
  };
  
  const token = jwt.sign(payload, JWT_SECRET);
  console.log('üîë Token gerado:', token);
  return token;
}

// Fun√ß√£o para buscar dados da m√°quina espec√≠fica
async function getMachineData(token, machineId) {
  try {
    console.log(`üîç Buscando dados da m√°quina ${machineId}...`);
    const response = await axios.get(`${API_BASE_URL}/machines/${machineId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    console.log('‚úÖ Dados da m√°quina obtidos com sucesso:', {
      success: response.data.success,
      machineId: response.data.data?.id,
      machineName: response.data.data?.name
    });
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar dados da m√°quina:', {
      status: error.response?.status,
      message: error.response?.data?.message || error.message,
      data: error.response?.data
    });
    throw error;
  }
}

// Obter produ√ß√£o atual
async function getCurrentProduction(token, machineId) {
  try {
    console.log(`üîç Buscando dados de produ√ß√£o da m√°quina ${machineId}...`);
    const response = await axios.get(`${API_BASE}/machines/${machineId}/production/current-shift`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log(`‚úÖ Dados de produ√ß√£o obtidos:`, JSON.stringify(response.data, null, 2));
    return response.data.data;
  } catch (error) {
    console.error(`‚ùå Erro ao buscar dados de produ√ß√£o da m√°quina ${machineId}:`, error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
    throw error;
  }
}

// Atualizar velocidade de produ√ß√£o
async function updateProductionSpeed(token, machineId, speed) {
  const response = await axios.put(`${API_BASE}/machines/${machineId}/production-speed`, 
    { productionSpeed: speed },
    { headers: { Authorization: `Bearer ${token}` } }
  );
  return response.data.data;
}

async function testProductionBug() {
  console.log('üêõ Testando bug de produ√ß√£o com mudan√ßa de velocidade\n');
  
  try {
    // 1. Gerar token
    console.log('1. Gerando token...');
    const token = await generateToken();
    
    // 2. Buscar dados da m√°quina espec√≠fica
    const machineData = await getMachineData(token, MACHINE_ID);
    
    if (!machineData.success || !machineData.data) {
      console.log('‚ùå M√°quina n√£o encontrada ou erro na busca');
      return;
    }
    
    console.log('üìã M√°quina encontrada:', {
      id: machineData.data.id,
      name: machineData.data.name,
      code: machineData.data.code,
      status: machineData.data.status
    });

    const machineId = MACHINE_ID;
    console.log(`‚úÖ Usando m√°quina: ${machineData.data.name} (ID: ${machineId})\n`);
    
    // 3. Obter estado inicial
    console.log('2. Estado inicial:');
    const initialMachine = machineData.data;
    const initialProduction = await getCurrentProduction(token, machineId);
    
    console.log(`   Velocidade: ${initialMachine.productionSpeed} pe√ßas/min`);
    console.log(`   Produ√ß√£o atual: ${initialProduction.estimatedProduction} pe√ßas`);
    console.log(`   Tempo funcionando: ${initialProduction.runningMinutes} min\n`);
    
    // 4. TESTE 1: Aumentar velocidade
    console.log('3. TESTE 1: Aumentando velocidade de produ√ß√£o');
    const newSpeedHigh = initialMachine.productionSpeed + 20;
    console.log(`   Alterando de ${initialMachine.productionSpeed} para ${newSpeedHigh} pe√ßas/min...`);
    
    await updateProductionSpeed(token, machineId, newSpeedHigh);
    console.log('   ‚úÖ Velocidade atualizada');
    
    // Aguardar um pouco
    console.log('   Aguardando 5 segundos...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const productionAfterIncrease = await getCurrentProduction(token, machineId);
    console.log(`   Produ√ß√£o ap√≥s aumento: ${productionAfterIncrease.estimatedProduction} pe√ßas`);
    console.log(`   Diferen√ßa: ${productionAfterIncrease.estimatedProduction - initialProduction.estimatedProduction} pe√ßas`);
    
    // Verificar se a produ√ß√£o aumentou incorretamente
    const productionDiff1 = productionAfterIncrease.estimatedProduction - initialProduction.estimatedProduction;
    if (productionDiff1 > 10) { // Se aumentou mais que 10 pe√ßas em 5 segundos
      console.log('   ‚ùå BUG DETECTADO: Produ√ß√£o aumentou muito rapidamente!');
      console.log(`      Aumento de ${productionDiff1} pe√ßas em 5 segundos √© suspeito`);
    } else {
      console.log('   ‚úÖ Comportamento normal no aumento');
    }
    
    console.log();
    
    // 5. TESTE 2: Diminuir velocidade
    console.log('4. TESTE 2: Diminuindo velocidade de produ√ß√£o');
    const newSpeedLow = Math.max(1, initialMachine.productionSpeed - 15);
    console.log(`   Alterando de ${newSpeedHigh} para ${newSpeedLow} pe√ßas/min...`);
    
    await updateProductionSpeed(token, machineId, newSpeedLow);
    console.log('   ‚úÖ Velocidade atualizada');
    
    // Aguardar um pouco
    console.log('   Aguardando 5 segundos...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const productionAfterDecrease = await getCurrentProduction(token, machineId);
    console.log(`   Produ√ß√£o ap√≥s diminui√ß√£o: ${productionAfterDecrease.estimatedProduction} pe√ßas`);
    console.log(`   Diferen√ßa: ${productionAfterDecrease.estimatedProduction - productionAfterIncrease.estimatedProduction} pe√ßas`);
    
    // Verificar se a produ√ß√£o diminuiu incorretamente
    const productionDiff2 = productionAfterDecrease.estimatedProduction - productionAfterIncrease.estimatedProduction;
    if (productionDiff2 < -5) { // Se diminuiu mais que 5 pe√ßas
      console.log('   ‚ùå BUG DETECTADO: Produ√ß√£o diminuiu incorretamente!');
      console.log(`      Diminui√ß√£o de ${Math.abs(productionDiff2)} pe√ßas indica problema na l√≥gica`);
    } else if (productionAfterDecrease.estimatedProduction < productionAfterIncrease.estimatedProduction) {
      console.log('   ‚ùå BUG DETECTADO: Produ√ß√£o total diminuiu!');
      console.log('      A produ√ß√£o nunca deveria diminuir, apenas a taxa de crescimento');
    } else {
      console.log('   ‚úÖ Comportamento normal na diminui√ß√£o');
    }
    
    console.log();
    
    // 6. Restaurar velocidade original
    console.log('5. Restaurando velocidade original...');
    await updateProductionSpeed(token, machineId, initialMachine.productionSpeed);
    console.log('   ‚úÖ Velocidade restaurada\n');
    
    // 7. Resumo dos testes
    console.log('üìä RESUMO DOS TESTES:');
    console.log('=' .repeat(50));
    console.log(`Produ√ß√£o inicial: ${initialProduction.estimatedProduction} pe√ßas`);
    console.log(`Ap√≥s aumento de velocidade: ${productionAfterIncrease.estimatedProduction} pe√ßas (${productionDiff1 > 0 ? '+' : ''}${productionDiff1})`);
    console.log(`Ap√≥s diminui√ß√£o de velocidade: ${productionAfterDecrease.estimatedProduction} pe√ßas (${productionDiff2 > 0 ? '+' : ''}${productionDiff2})`);
    
    // An√°lise final
    console.log('\nüîç AN√ÅLISE:');
    if (productionDiff1 > 10) {
      console.log('‚ùå Problema: Aumento de velocidade causa salto na produ√ß√£o');
    }
    if (productionDiff2 < 0) {
      console.log('‚ùå Problema: Diminui√ß√£o de velocidade causa perda de produ√ß√£o');
    }
    if (productionDiff1 <= 10 && productionDiff2 >= 0) {
      console.log('‚úÖ Comportamento correto: Velocidade afeta apenas taxa, n√£o produ√ß√£o atual');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar teste
testProductionBug();