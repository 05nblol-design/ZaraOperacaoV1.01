const { PrismaClient } = require('@prisma/client');
const logger = require('utils/logger');
const prisma = new PrismaClient();

async function checkLucasPermissions() {
  logger.info('üîç Verificando permiss√µes do operador Lucas (ID: 2)...'););
  
  try {
    // Verificar se o usu√°rio existe
    const user = await prisma.user.findUnique({
      where: { id: 2 },
      select: { id: true, name: true, email: true, role: true }
    });
    
    if (!user) {
      logger.info('‚ùå Usu√°rio com ID 2 n√£o encontrado'););
      return;
    }
    
    logger.info('üë§ Usu√°rio encontrado:', user););
    
    // Verificar permiss√µes de m√°quina
    const permissions = await prisma.machinePermission.findMany({
      where: { userId: 2 },
      include: {
        machine: {
          select: { id: true, name: true, status: true }
        },
        user: {
          select: { id: true, name: true, role: true }
        }
      }
    });
    
    logger.info(`\nüìã Permiss√µes encontradas: ${permissions.length}`););
    
    if (permissions.length === 0) {
      logger.info('‚ùå PROBLEMA: Operador Lucas n√£o tem permiss√µes de m√°quina!'););
      logger.info('üí° Solu√ß√£o: Criar permiss√µes para o operador'););
    } else {
      permissions.forEach((p, index) => {
        logger.info(`\n${index + 1}. M√°quina: ${p.machine.name} (ID: ${p.machine.id})`););
        logger.info(`   - canOperate: ${p.canOperate}`););
        logger.info(`   - canMaintain: ${p.canMaintain}`););
        logger.info(`   - Status da m√°quina: ${p.machine.status}`););
        
        if (!p.canOperate) {
          logger.info('   ‚ö†Ô∏è  PROBLEMA: canOperate √© false!'););
        }
      });
    }
    
    // Verificar todas as m√°quinas dispon√≠veis
    const allMachines = await prisma.machine.findMany({
      select: { id: true, name: true, status: true }
    });
    
    logger.info(`\nüè≠ Total de m√°quinas no sistema: ${allMachines.length}`););
    allMachines.forEach(m => {
      logger.info(`   - ${m.name} (ID: ${m.id}) - Status: ${m.status}`););
    });
    
  } catch (error) {
    logger.error('‚ùå Erro ao verificar permiss√µes:', error););
  } finally {
    await prisma.$disconnect();
  }
}

checkLucasPermissions();