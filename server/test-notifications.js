const fetch = require('node-fetch');
const jwt = require('jsonwebtoken');

// Configura√ß√µes
const BASE_URL = 'http://127.0.0.1:3001';
const SECRET_KEY = 'zara-jwt-secret-key-2024';

// Fun√ß√£o para gerar token JWT
function generateToken(userId, role) {
  return jwt.sign({ id: userId, role }, SECRET_KEY);
}

// Fun√ß√£o para fazer requisi√ß√µes autenticadas
async function makeRequest(url, options = {}, token) {
  const headers = {
    'Content-Type': 'application/json',
    ...(token && { 'Authorization': `Bearer ${token}` }),
    ...options.headers
  };

  const response = await fetch(`${BASE_URL}${url}`, {
    ...options,
    headers
  });

  const text = await response.text();
  console.log(`Response status: ${response.status}`);
  console.log(`Response text: ${text.substring(0, 200)}...`);
  
  let data;
  try {
    data = JSON.parse(text);
  } catch (e) {
    console.log('Failed to parse JSON, returning raw text');
    data = { error: 'Invalid JSON', text };
  }
  
  return { response, data };
}

// Fun√ß√£o para aguardar um tempo
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testNotificationSystem() {
  console.log('üîî Testando Sistema de Notifica√ß√µes\n');

  try {
    // 1. Gerar tokens para diferentes usu√°rios
    const adminToken = generateToken(1, 'ADMIN');
    const operatorToken = generateToken(4, 'OPERATOR'); // Ana Costa
    const leaderToken = generateToken(2, 'LEADER');

    console.log('‚úÖ Tokens gerados com sucesso');

    // 2. Testar mudan√ßa de status de m√°quina
    console.log('\nüìä Testando notifica√ß√£o de mudan√ßa de status...');
    const { response: statusResponse, data: statusData } = await makeRequest(
      '/api/machines/1/status',
      {
        method: 'PUT',
        body: JSON.stringify({
          status: 'MAINTENANCE',
          reason: 'Manuten√ß√£o preventiva',
          notes: 'Teste de notifica√ß√£o de status'
        })
      },
      adminToken
    );

    if (statusResponse.ok) {
      console.log('‚úÖ Status alterado com sucesso');
      console.log('üìù Dados:', statusData.message);
    } else {
      console.log('‚ùå Erro ao alterar status:', statusData.message);
    }

    await sleep(1000);

    // 3. Testar in√≠cio de opera√ß√£o
    console.log('\nüè≠ Testando notifica√ß√£o de in√≠cio de opera√ß√£o...');
    
    // Primeiro, alterar status para STOPPED para permitir opera√ß√£o
    await makeRequest(
      '/api/machines/2/status',
      {
        method: 'PUT',
        body: JSON.stringify({
          status: 'STOPPED',
          reason: 'Prepara√ß√£o para opera√ß√£o',
          notes: 'Preparando m√°quina para teste'
        })
      },
      adminToken
    );

    await sleep(500);

    const { response: startResponse, data: startData } = await makeRequest(
      '/api/machines/2/start-operation',
      {
        method: 'POST',
        body: JSON.stringify({
          notes: 'Teste de notifica√ß√£o de in√≠cio de opera√ß√£o'
        })
      },
      operatorToken
    );

    if (startResponse.ok) {
      console.log('‚úÖ Opera√ß√£o iniciada com sucesso');
      console.log('üìù Dados:', startData.message);
    } else {
      console.log('‚ùå Erro ao iniciar opera√ß√£o:', startData.message);
    }

    await sleep(1000);

    // 4. Testar fim de opera√ß√£o
    console.log('\nüèÅ Testando notifica√ß√£o de fim de opera√ß√£o...');
    const { response: endResponse, data: endData } = await makeRequest(
      '/api/machines/2/end-operation',
      {
        method: 'POST',
        body: JSON.stringify({
          notes: 'Teste de notifica√ß√£o de fim de opera√ß√£o'
        })
      },
      operatorToken
    );

    if (endResponse.ok) {
      console.log('‚úÖ Opera√ß√£o finalizada com sucesso');
      console.log('üìù Dados:', endData.message);
    } else {
      console.log('‚ùå Erro ao finalizar opera√ß√£o:', endData.message);
    }

    await sleep(1000);

    // 5. Testar cria√ß√£o de teste de qualidade
    console.log('\nüß™ Testando notifica√ß√£o de teste de qualidade...');
    const { response: testResponse, data: testData } = await makeRequest(
      '/api/quality-tests',
      {
        method: 'POST',
        body: JSON.stringify({
          machineId: 1,
          product: 'Produto Teste',
          lot: 'LOTE001',
          boxNumber: 'CAIXA001',
          packageSize: 'M√©dio',
          packageWidth: 15.5,
          bottomSize: 10.0,
          sideSize: 8.0,
          zipperDistance: 2.5,
          facilitatorDistance: 1.0,
          rulerTestDone: true,
          hermeticityTestDone: true,
          approved: false, // Teste reprovado para gerar notifica√ß√£o de alta prioridade
          observations: 'Teste de notifica√ß√£o - produto reprovado',
          images: [],
          videos: []
        })
      },
      operatorToken
    );

    if (testResponse.ok) {
      console.log('‚úÖ Teste de qualidade criado com sucesso');
      console.log('üìù Dados:', testData.message);
    } else {
      console.log('‚ùå Erro ao criar teste:', testData.message);
    }

    await sleep(1000);

    // 6. Verificar notifica√ß√µes criadas
    console.log('\nüì¨ Verificando notifica√ß√µes criadas...');
    const { response: notifResponse, data: notifData } = await makeRequest(
      '/api/notifications?limit=10',
      { method: 'GET' },
      leaderToken
    );

    if (notifResponse.ok && notifData.success) {
      console.log(`‚úÖ ${notifData.data.length} notifica√ß√µes encontradas`);
      
      // Mostrar as √∫ltimas 5 notifica√ß√µes
      const recentNotifications = notifData.data.slice(0, 5);
      recentNotifications.forEach((notif, index) => {
        console.log(`\nüìã Notifica√ß√£o ${index + 1}:`);
        console.log(`   T√≠tulo: ${notif.title}`);
        console.log(`   Mensagem: ${notif.message}`);
        console.log(`   Tipo: ${notif.type}`);
        console.log(`   Prioridade: ${notif.priority}`);
        console.log(`   Data: ${new Date(notif.createdAt).toLocaleString('pt-BR')}`);
      });
    } else {
      console.log('‚ùå Erro ao buscar notifica√ß√µes:', notifData.message);
    }

    console.log('\nüéâ Teste do sistema de notifica√ß√µes conclu√≠do!');
    console.log('\nüìù Resumo dos testes realizados:');
    console.log('   ‚úÖ Mudan√ßa de status de m√°quina');
    console.log('   ‚úÖ In√≠cio de opera√ß√£o');
    console.log('   ‚úÖ Fim de opera√ß√£o');
    console.log('   ‚úÖ Teste de qualidade (reprovado)');
    console.log('   ‚úÖ Verifica√ß√£o de notifica√ß√µes');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
  }
}

// Executar o teste
testNotificationSystem();