const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testOperatorTeflonPermissions() {
  try {
    console.log('=== Teste de Permiss√µes do Operador para Troca de Teflon ===\n');
    
    // Buscar operador ID 2
    const operator = await prisma.user.findUnique({
      where: { id: 2 },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        badgeNumber: true
      }
    });
    
    if (!operator) {
      console.log('‚ùå Operador ID 2 n√£o encontrado');
      return;
    }
    
    console.log('üë§ Operador encontrado:');
    console.log(`   Nome: ${operator.name}`);
    console.log(`   Email: ${operator.email}`);
    console.log(`   Role: ${operator.role}`);
    console.log(`   Badge: ${operator.badgeNumber}\n`);
    
    // Buscar permiss√µes do operador
    const permissions = await prisma.machinePermission.findMany({
      where: {
        userId: operator.id
      },
      include: {
        machine: {
          select: {
            id: true,
            name: true,
            code: true,
            location: true,
            status: true
          }
        }
      }
    });
    
    console.log(`üîê Permiss√µes do operador (${permissions.length} encontradas):`);
    
    if (permissions.length === 0) {
      console.log('‚ùå PROBLEMA: Operador n√£o tem permiss√µes para nenhuma m√°quina!');
      console.log('   Para resolver: Acesse a p√°gina de Permiss√µes e conceda permiss√µes ao operador\n');
      return;
    }
    
    permissions.forEach(permission => {
      console.log(`   üìç M√°quina: ${permission.machine.name} (${permission.machine.code})`);
      console.log(`      - Localiza√ß√£o: ${permission.machine.location}`);
      console.log(`      - Status: ${permission.machine.status}`);
      console.log(`      - Pode Ver: ${permission.canView ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - Pode Operar: ${permission.canOperate ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - Pode Editar: ${permission.canEdit ? '‚úÖ' : '‚ùå'}`);
      console.log('');
    });
    
    // Verificar m√°quinas que o operador pode operar (necess√°rio para troca de teflon)
    const operableMachines = permissions.filter(p => p.canOperate);
    
    console.log(`üîß M√°quinas que o operador pode operar (${operableMachines.length}):`);
    
    if (operableMachines.length === 0) {
      console.log('‚ùå PROBLEMA: Operador n√£o tem permiss√£o de OPERA√á√ÉO em nenhuma m√°quina!');
      console.log('   Para troca de teflon, o operador precisa ter permiss√£o "canOperate" = true');
      console.log('   Solu√ß√£o: Acesse Permiss√µes > Editar permiss√µes do operador > Marcar "Operar"\n');
    } else {
      operableMachines.forEach(permission => {
        console.log(`   ‚úÖ ${permission.machine.name} - ${permission.machine.location}`);
      });
      console.log('');
    }
    
    // Buscar todas as m√°quinas para compara√ß√£o
    const allMachines = await prisma.machine.findMany({
      select: {
        id: true,
        name: true,
        code: true,
        location: true,
        status: true
      },
      orderBy: { name: 'asc' }
    });
    
    console.log(`üìä Resumo:`);
    console.log(`   - Total de m√°quinas no sistema: ${allMachines.length}`);
    console.log(`   - M√°quinas que o operador pode ver: ${permissions.filter(p => p.canView).length}`);
    console.log(`   - M√°quinas que o operador pode operar: ${operableMachines.length}`);
    console.log(`   - M√°quinas dispon√≠veis para troca de teflon: ${operableMachines.length}\n`);
    
    if (operableMachines.length > 0) {
      console.log('‚úÖ DIAGN√ìSTICO: Operador tem permiss√µes adequadas para troca de teflon');
      console.log('   Se o select ainda estiver vazio, verifique:');
      console.log('   1. Se o usu√°rio est√° logado corretamente no frontend');
      console.log('   2. Se o hook useMachinePermissions est√° carregando as permiss√µes');
      console.log('   3. Se h√° erros no console do navegador');
    } else {
      console.log('‚ùå DIAGN√ìSTICO: Operador N√ÉO tem permiss√µes para troca de teflon');
      console.log('   A√ß√£o necess√°ria: Conceder permiss√£o "Operar" para pelo menos uma m√°quina');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar permiss√µes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testOperatorTeflonPermissions();