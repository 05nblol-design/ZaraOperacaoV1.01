const axios = require('axios');
const jwt = require('jsonwebtoken');

// Configura√ß√µes
const API_BASE_URL = 'http://localhost:5000/api';
const MACHINE_ID = 10;
const JWT_SECRET = 'zara-jwt-secret-key-2024';

/**
 * Gera token JWT para manager
 */
function generateToken() {
  const payload = {
    id: 1,
    name: 'Manager Test',
    email: 'manager@test.com',
    role: 'MANAGER'
  };
  
  const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });
  return token;
}

/**
 * Busca dados da m√°quina
 */
async function getMachineData(machineId, token) {
  try {
    const response = await axios.get(`${API_BASE_URL}/machines/${machineId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar dados da m√°quina:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Atualiza status da m√°quina
 */
async function updateMachineStatus(machineId, status, token) {
  try {
    const response = await axios.put(`${API_BASE_URL}/machines/${machineId}/status`, {
      status: status
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‚úÖ Status da m√°quina atualizado para: ${status}`);
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar status:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Inicia opera√ß√£o na m√°quina
 */
async function startOperation(machineId, token) {
  try {
    const response = await axios.post(`${API_BASE_URL}/machines/${machineId}/operations`, {
      // Dados b√°sicos para iniciar opera√ß√£o
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Opera√ß√£o iniciada na m√°quina');
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao iniciar opera√ß√£o:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Busca dados de produ√ß√£o da m√°quina
 */
async function getProductionData(machineId, token) {
  try {
    const response = await axios.get(`${API_BASE_URL}/machines/${machineId}/production/current-shift`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar dados de produ√ß√£o:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Atualiza velocidade de produ√ß√£o da m√°quina
 */
async function updateProductionSpeed(machineId, speed, token) {
  try {
    const response = await axios.put(`${API_BASE_URL}/machines/${machineId}/production-speed`, {
      productionSpeed: speed
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‚úÖ Velocidade atualizada para ${speed} produtos/min`);
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar velocidade:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Aguarda um tempo espec√≠fico
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Teste principal para reproduzir o bug do salto instant√¢neo
 */
async function testSpeedJumpBugWithOperation() {
  console.log('üß™ Iniciando teste do bug de salto instant√¢neo na produ√ß√£o (com opera√ß√£o)\n');
  
  try {
    const token = generateToken();
    
    // 1. Verificar status da m√°quina
    console.log('üîç 1. Verificando status da m√°quina...');
    const machineData = await getMachineData(MACHINE_ID, token);
    console.log(`   Status atual: ${machineData.status}`);
    console.log(`   Velocidade atual: ${machineData.productionSpeed} produtos/min\n`);
    
    // 2. Garantir que a m√°quina est√° funcionando
    if (machineData.status !== 'FUNCIONANDO') {
      console.log('‚öôÔ∏è 2. Colocando m√°quina em funcionamento...');
      await updateMachineStatus(MACHINE_ID, 'FUNCIONANDO', token);
      await sleep(2000);
    } else {
      console.log('‚úÖ 2. M√°quina j√° est√° funcionando\n');
    }
    
    // 3. Tentar iniciar opera√ß√£o (pode falhar se j√° houver uma ativa)
    console.log('üöÄ 3. Tentando iniciar opera√ß√£o...');
    try {
      await startOperation(MACHINE_ID, token);
    } catch (error) {
      console.log('   ‚ÑπÔ∏è Opera√ß√£o pode j√° estar ativa ou erro esperado\n');
    }
    
    // 4. Buscar produ√ß√£o inicial
    console.log('üìä 4. Buscando produ√ß√£o inicial...');
    const initialProduction = await getProductionData(MACHINE_ID, token);
    console.log(`   Produ√ß√£o inicial: ${initialProduction.estimatedProduction} produtos`);
    console.log(`   Velocidade atual: ${initialProduction.productionSpeed} produtos/min`);
    console.log(`   Status: ${initialProduction.currentStatus}`);
    console.log(`   Funcionando: ${initialProduction.isCurrentlyRunning}\n`);
    
    // 5. Definir velocidade para 1 produto/min
    console.log('‚öôÔ∏è 5. Definindo velocidade para 1 produto/min...');
    await updateProductionSpeed(MACHINE_ID, 1, token);
    await sleep(3000); // Aguardar 3 segundos
    
    const productionAfterSpeed1 = await getProductionData(MACHINE_ID, token);
    console.log(`   Produ√ß√£o ap√≥s definir 1/min: ${productionAfterSpeed1.estimatedProduction} produtos\n`);
    
    // 6. Aguardar 2 minutos para acumular produ√ß√£o
    console.log('‚è±Ô∏è 6. Aguardando 2 minutos para acumular produ√ß√£o...');
    await sleep(120000); // 2 minutos
    
    const productionAfter2Min = await getProductionData(MACHINE_ID, token);
    console.log(`   Produ√ß√£o ap√≥s 2 minutos: ${productionAfter2Min.estimatedProduction} produtos`);
    console.log(`   Aumento esperado: ~2 produtos`);
    console.log(`   Aumento real: ${productionAfter2Min.estimatedProduction - productionAfterSpeed1.estimatedProduction} produtos\n`);
    
    // 7. Aumentar velocidade para 5 produtos/min (aqui deve ocorrer o bug)
    console.log('üöÄ 7. Aumentando velocidade para 5 produtos/min...');
    await updateProductionSpeed(MACHINE_ID, 5, token);
    await sleep(3000); // Aguardar 3 segundos
    
    const productionAfterSpeed5 = await getProductionData(MACHINE_ID, token);
    console.log(`   Produ√ß√£o ap√≥s definir 5/min: ${productionAfterSpeed5.estimatedProduction} produtos`);
    
    // 8. Calcular diferen√ßa (aqui deve mostrar o salto instant√¢neo)
    const jumpDifference = productionAfterSpeed5.estimatedProduction - productionAfter2Min.estimatedProduction;
    console.log(`\nüîç AN√ÅLISE DO BUG:`);
    console.log(`   Produ√ß√£o antes da mudan√ßa: ${productionAfter2Min.estimatedProduction}`);
    console.log(`   Produ√ß√£o ap√≥s mudan√ßa: ${productionAfterSpeed5.estimatedProduction}`);
    console.log(`   Salto instant√¢neo: ${jumpDifference} produtos`);
    
    if (jumpDifference > 10) {
      console.log(`\n‚ùå BUG CONFIRMADO! Salto instant√¢neo de ${jumpDifference} produtos detectado!`);
      console.log(`   Esperado: Aumento gradual baseado no tempo`);
      console.log(`   Encontrado: Salto instant√¢neo na produ√ß√£o`);
      console.log(`\nüîß CAUSA PROV√ÅVEL:`);
      console.log(`   O realTimeProductionService est√° recalculando toda a produ√ß√£o`);
      console.log(`   com a nova velocidade desde o in√≠cio da opera√ß√£o, ao inv√©s de`);
      console.log(`   aplicar a nova velocidade apenas a partir do momento da mudan√ßa.`);
    } else {
      console.log(`\n‚úÖ Comportamento normal. Diferen√ßa: ${jumpDifference} produtos`);
    }
    
    // 9. Aguardar mais 1 minuto para ver comportamento
    console.log('\n‚è±Ô∏è 9. Aguardando mais 1 minuto para observar comportamento...');
    await sleep(60000);
    
    const finalProduction = await getProductionData(MACHINE_ID, token);
    console.log(`   Produ√ß√£o final: ${finalProduction.estimatedProduction} produtos`);
    
    const expectedIncrease = 5; // 5 produtos/min por 1 minuto
    const actualIncrease = finalProduction.estimatedProduction - productionAfterSpeed5.estimatedProduction;
    console.log(`   Aumento esperado no √∫ltimo minuto: ${expectedIncrease} produtos`);
    console.log(`   Aumento real no √∫ltimo minuto: ${actualIncrease} produtos`);
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

// Executar teste
if (require.main === module) {
  testSpeedJumpBugWithOperation();
}

module.exports = { testSpeedJumpBugWithOperation };