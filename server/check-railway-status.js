const axios = require('axios');
const logger = require('./utils/logger');

logger.info('üöÇ VERIFICANDO STATUS DO RAILWAY');
logger.info('============================================================');

// URLs para testar
const urls = [
    'https://zaraoperacaov101-production.up.railway.app',
    'https://zaraoperacaov101-production.up.railway.app/api',
    'https://zaraoperacaov101-production.up.railway.app/health',
    'https://zaraoperacaov101-production.up.railway.app/api/health'
];

async function checkRailwayStatus() {
    logger.info('\nüîç Testando diferentes endpoints...');
    
    for (const url of urls) {
        try {
            logger.info(`\nüì° Testando: ${url}`);
            
            const response = await axios({
                url,
                method: 'GET',
                timeout: 10000,
                validateStatus: function (status) {
                    return status < 500; // Aceitar qualquer status < 500
                }
            });
            
            logger.info(`   ‚úÖ Status: ${response.status}`);
            logger.info(`   üìÑ Content-Type: ${response.headers['content-type'] || 'N/A'}`);
            
            if (response.data) {
                if (typeof response.data === 'string') {
                    logger.info(`   üìù Resposta: ${response.data.substring(0, 200)}...`);
                } else {
                    logger.info(`   üìù Resposta: ${JSON.stringify(response.data).substring(0, 200)}...`);
                }
            }
            
        } catch (error) {
            if (error.response) {
                logger.error(`   ‚ùå Status: ${error.response.status}`);
                logger.error(`   üìÑ Content-Type: ${error.response.headers['content-type'] || 'N/A'}`);
                if (error.response.data) {
                    logger.error(`   üìù Erro: ${JSON.stringify(error.response.data).substring(0, 200)}...`);
                }
            } else if (error.request) {
                logger.error(`   ‚ùå Sem resposta do servidor: ${error.message}`);
            } else {
                logger.error(`   ‚ùå Erro na requisi√ß√£o: ${error.message}`);
            }
        }
    }
    
    // Testar se √© um problema de CORS
    logger.info('\nüåê Testando CORS...');
    try {
        const corsTest = await axios({
            url: 'https://zaraoperacaov101-production.up.railway.app',
            method: 'OPTIONS',
            timeout: 10000,
            headers: {
                'Origin': 'http://localhost:3000',
                'Access-Control-Request-Method': 'GET'
            }
        });
        
        logger.info('   ‚úÖ CORS configurado corretamente');
        logger.info(`   üìÑ Headers CORS: ${JSON.stringify(corsTest.headers)}`);
        
    } catch (error) {
        logger.error(`   ‚ùå Problema com CORS: ${error.message}`);
    }
    
    // Verificar se o servidor est√° realmente online
    logger.info('\nüè• Verificando sa√∫de do servidor...');
    try {
        const healthCheck = await axios({
            url: 'https://zaraoperacaov101-production.up.railway.app',
            method: 'HEAD',
            timeout: 5000
        });
        
        logger.info('   ‚úÖ Servidor respondendo a requisi√ß√µes HEAD');
        logger.info(`   üìä Status: ${healthCheck.status}`);
        
    } catch (error) {
        logger.error(`   ‚ùå Servidor n√£o responde: ${error.message}`);
    }
    
    logger.info('\nüìã DIAGN√ìSTICO COMPLETO:');
    logger.info('============================================================');
    logger.info('Se todos os testes falharam, poss√≠veis causas:');
    logger.info('1. üöÇ Railway pode estar fazendo deploy');
    logger.info('2. üí§ Aplica√ß√£o pode estar em sleep mode');
    logger.info('3. üîß Problemas de configura√ß√£o no servidor');
    logger.info('4. üåê Problemas de DNS ou conectividade');
    logger.info('\nRecomenda√ß√µes:');
    logger.info('- Verificar logs do Railway Dashboard');
    logger.info('- Aguardar alguns minutos e tentar novamente');
    logger.info('- Verificar se h√° deploys em andamento');
}

checkRailwayStatus().then(() => {
    logger.info('\n‚úÖ VERIFICA√á√ÉO DO RAILWAY CONCLU√çDA!');
}).catch(error => {
    logger.error(`Erro na verifica√ß√£o: ${error.message}`);
});