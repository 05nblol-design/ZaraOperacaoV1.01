
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  badgeNumber: 'badgeNumber',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MachineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  status: 'status',
  location: 'location',
  model: 'model',
  description: 'description',
  isActive: 'isActive',
  productionSpeed: 'productionSpeed',
  targetProduction: 'targetProduction',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MachineConfigScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  general: 'general',
  operational: 'operational',
  alerts: 'alerts',
  quality: 'quality',
  maintenance: 'maintenance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MachineOperationScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  userId: 'userId',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QualityTestScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  userId: 'userId',
  product: 'product',
  lot: 'lot',
  boxNumber: 'boxNumber',
  packageSize: 'packageSize',
  packageWidth: 'packageWidth',
  bottomSize: 'bottomSize',
  sideSize: 'sideSize',
  zipperDistance: 'zipperDistance',
  facilitatorDistance: 'facilitatorDistance',
  rulerTestDone: 'rulerTestDone',
  hermeticityTestDone: 'hermeticityTestDone',
  visualInspection: 'visualInspection',
  dimensionalCheck: 'dimensionalCheck',
  colorConsistency: 'colorConsistency',
  surfaceQuality: 'surfaceQuality',
  adhesionTest: 'adhesionTest',
  approved: 'approved',
  observations: 'observations',
  images: 'images',
  videos: 'videos',
  testDate: 'testDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeflonChangeScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  userId: 'userId',
  changeDate: 'changeDate',
  expiryDate: 'expiryDate',
  teflonType: 'teflonType',
  observations: 'observations',
  photos: 'photos',
  alertSent: 'alertSent',
  notificationSent: 'notificationSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  machineId: 'machineId',
  testId: 'testId',
  changeId: 'changeId',
  title: 'title',
  message: 'message',
  type: 'type',
  priority: 'priority',
  channels: 'channels',
  read: 'read',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  deviceInfo: 'deviceInfo',
  active: 'active',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  period: 'period',
  data: 'data',
  generatedAt: 'generatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.MachineStatusHistoryScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  userId: 'userId',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  reason: 'reason',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.MachinePermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  machineId: 'machineId',
  canView: 'canView',
  canOperate: 'canOperate',
  canEdit: 'canEdit',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShiftDataScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  operatorId: 'operatorId',
  shiftType: 'shiftType',
  shiftDate: 'shiftDate',
  startTime: 'startTime',
  endTime: 'endTime',
  totalProduction: 'totalProduction',
  targetProduction: 'targetProduction',
  efficiency: 'efficiency',
  downtime: 'downtime',
  qualityTests: 'qualityTests',
  approvedTests: 'approvedTests',
  rejectedTests: 'rejectedTests',
  isActive: 'isActive',
  isArchived: 'isArchived',
  productionData: 'productionData',
  qualityData: 'qualityData',
  maintenanceData: 'maintenanceData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archivedAt: 'archivedAt'
};

exports.Prisma.ProductionArchiveScalarFieldEnum = {
  id: 'id',
  shiftDataId: 'shiftDataId',
  machineId: 'machineId',
  operatorId: 'operatorId',
  archiveDate: 'archiveDate',
  archivedData: 'archivedData',
  dataSize: 'dataSize',
  checksum: 'checksum',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Machine: 'Machine',
  MachineConfig: 'MachineConfig',
  MachineOperation: 'MachineOperation',
  QualityTest: 'QualityTest',
  TeflonChange: 'TeflonChange',
  Notification: 'Notification',
  UserDevice: 'UserDevice',
  Report: 'Report',
  SystemLog: 'SystemLog',
  MachineStatusHistory: 'MachineStatusHistory',
  MachinePermission: 'MachinePermission',
  ShiftData: 'ShiftData',
  ProductionArchive: 'ProductionArchive'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
