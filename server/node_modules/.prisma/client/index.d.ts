
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Machine
 * 
 */
export type Machine = $Result.DefaultSelection<Prisma.$MachinePayload>
/**
 * Model QualityTest
 * 
 */
export type QualityTest = $Result.DefaultSelection<Prisma.$QualityTestPayload>
/**
 * Model TeflonChange
 * 
 */
export type TeflonChange = $Result.DefaultSelection<Prisma.$TeflonChangePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model MachineOperation
 * 
 */
export type MachineOperation = $Result.DefaultSelection<Prisma.$MachineOperationPayload>
/**
 * Model UserDevice
 * 
 */
export type UserDevice = $Result.DefaultSelection<Prisma.$UserDevicePayload>
/**
 * Model Shift
 * 
 */
export type Shift = $Result.DefaultSelection<Prisma.$ShiftPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model MachinePermission
 * 
 */
export type MachinePermission = $Result.DefaultSelection<Prisma.$MachinePermissionPayload>
/**
 * Model MachineStatusHistory
 * 
 */
export type MachineStatusHistory = $Result.DefaultSelection<Prisma.$MachineStatusHistoryPayload>
/**
 * Model ProductionData
 * 
 */
export type ProductionData = $Result.DefaultSelection<Prisma.$ProductionDataPayload>
/**
 * Model ArchiveData
 * 
 */
export type ArchiveData = $Result.DefaultSelection<Prisma.$ArchiveDataPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.machine`: Exposes CRUD operations for the **Machine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Machines
    * const machines = await prisma.machine.findMany()
    * ```
    */
  get machine(): Prisma.MachineDelegate<ExtArgs>;

  /**
   * `prisma.qualityTest`: Exposes CRUD operations for the **QualityTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QualityTests
    * const qualityTests = await prisma.qualityTest.findMany()
    * ```
    */
  get qualityTest(): Prisma.QualityTestDelegate<ExtArgs>;

  /**
   * `prisma.teflonChange`: Exposes CRUD operations for the **TeflonChange** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeflonChanges
    * const teflonChanges = await prisma.teflonChange.findMany()
    * ```
    */
  get teflonChange(): Prisma.TeflonChangeDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.machineOperation`: Exposes CRUD operations for the **MachineOperation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MachineOperations
    * const machineOperations = await prisma.machineOperation.findMany()
    * ```
    */
  get machineOperation(): Prisma.MachineOperationDelegate<ExtArgs>;

  /**
   * `prisma.userDevice`: Exposes CRUD operations for the **UserDevice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDevices
    * const userDevices = await prisma.userDevice.findMany()
    * ```
    */
  get userDevice(): Prisma.UserDeviceDelegate<ExtArgs>;

  /**
   * `prisma.shift`: Exposes CRUD operations for the **Shift** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shifts
    * const shifts = await prisma.shift.findMany()
    * ```
    */
  get shift(): Prisma.ShiftDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs>;

  /**
   * `prisma.machinePermission`: Exposes CRUD operations for the **MachinePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MachinePermissions
    * const machinePermissions = await prisma.machinePermission.findMany()
    * ```
    */
  get machinePermission(): Prisma.MachinePermissionDelegate<ExtArgs>;

  /**
   * `prisma.machineStatusHistory`: Exposes CRUD operations for the **MachineStatusHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MachineStatusHistories
    * const machineStatusHistories = await prisma.machineStatusHistory.findMany()
    * ```
    */
  get machineStatusHistory(): Prisma.MachineStatusHistoryDelegate<ExtArgs>;

  /**
   * `prisma.productionData`: Exposes CRUD operations for the **ProductionData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductionData
    * const productionData = await prisma.productionData.findMany()
    * ```
    */
  get productionData(): Prisma.ProductionDataDelegate<ExtArgs>;

  /**
   * `prisma.archiveData`: Exposes CRUD operations for the **ArchiveData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchiveData
    * const archiveData = await prisma.archiveData.findMany()
    * ```
    */
  get archiveData(): Prisma.ArchiveDataDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Machine: 'Machine',
    QualityTest: 'QualityTest',
    TeflonChange: 'TeflonChange',
    Notification: 'Notification',
    MachineOperation: 'MachineOperation',
    UserDevice: 'UserDevice',
    Shift: 'Shift',
    Report: 'Report',
    UserPermission: 'UserPermission',
    MachinePermission: 'MachinePermission',
    MachineStatusHistory: 'MachineStatusHistory',
    ProductionData: 'ProductionData',
    ArchiveData: 'ArchiveData'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "machine" | "qualityTest" | "teflonChange" | "notification" | "machineOperation" | "userDevice" | "shift" | "report" | "userPermission" | "machinePermission" | "machineStatusHistory" | "productionData" | "archiveData"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Machine: {
        payload: Prisma.$MachinePayload<ExtArgs>
        fields: Prisma.MachineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MachineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MachineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          findFirst: {
            args: Prisma.MachineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MachineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          findMany: {
            args: Prisma.MachineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>[]
          }
          create: {
            args: Prisma.MachineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          createMany: {
            args: Prisma.MachineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MachineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>[]
          }
          delete: {
            args: Prisma.MachineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          update: {
            args: Prisma.MachineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          deleteMany: {
            args: Prisma.MachineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MachineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MachineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          aggregate: {
            args: Prisma.MachineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMachine>
          }
          groupBy: {
            args: Prisma.MachineGroupByArgs<ExtArgs>
            result: $Utils.Optional<MachineGroupByOutputType>[]
          }
          count: {
            args: Prisma.MachineCountArgs<ExtArgs>
            result: $Utils.Optional<MachineCountAggregateOutputType> | number
          }
        }
      }
      QualityTest: {
        payload: Prisma.$QualityTestPayload<ExtArgs>
        fields: Prisma.QualityTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QualityTestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QualityTestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>
          }
          findFirst: {
            args: Prisma.QualityTestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QualityTestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>
          }
          findMany: {
            args: Prisma.QualityTestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>[]
          }
          create: {
            args: Prisma.QualityTestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>
          }
          createMany: {
            args: Prisma.QualityTestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QualityTestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>[]
          }
          delete: {
            args: Prisma.QualityTestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>
          }
          update: {
            args: Prisma.QualityTestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>
          }
          deleteMany: {
            args: Prisma.QualityTestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QualityTestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QualityTestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityTestPayload>
          }
          aggregate: {
            args: Prisma.QualityTestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQualityTest>
          }
          groupBy: {
            args: Prisma.QualityTestGroupByArgs<ExtArgs>
            result: $Utils.Optional<QualityTestGroupByOutputType>[]
          }
          count: {
            args: Prisma.QualityTestCountArgs<ExtArgs>
            result: $Utils.Optional<QualityTestCountAggregateOutputType> | number
          }
        }
      }
      TeflonChange: {
        payload: Prisma.$TeflonChangePayload<ExtArgs>
        fields: Prisma.TeflonChangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeflonChangeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeflonChangeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>
          }
          findFirst: {
            args: Prisma.TeflonChangeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeflonChangeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>
          }
          findMany: {
            args: Prisma.TeflonChangeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>[]
          }
          create: {
            args: Prisma.TeflonChangeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>
          }
          createMany: {
            args: Prisma.TeflonChangeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeflonChangeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>[]
          }
          delete: {
            args: Prisma.TeflonChangeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>
          }
          update: {
            args: Prisma.TeflonChangeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>
          }
          deleteMany: {
            args: Prisma.TeflonChangeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeflonChangeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeflonChangeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeflonChangePayload>
          }
          aggregate: {
            args: Prisma.TeflonChangeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeflonChange>
          }
          groupBy: {
            args: Prisma.TeflonChangeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeflonChangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeflonChangeCountArgs<ExtArgs>
            result: $Utils.Optional<TeflonChangeCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      MachineOperation: {
        payload: Prisma.$MachineOperationPayload<ExtArgs>
        fields: Prisma.MachineOperationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MachineOperationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MachineOperationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>
          }
          findFirst: {
            args: Prisma.MachineOperationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MachineOperationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>
          }
          findMany: {
            args: Prisma.MachineOperationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>[]
          }
          create: {
            args: Prisma.MachineOperationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>
          }
          createMany: {
            args: Prisma.MachineOperationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MachineOperationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>[]
          }
          delete: {
            args: Prisma.MachineOperationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>
          }
          update: {
            args: Prisma.MachineOperationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>
          }
          deleteMany: {
            args: Prisma.MachineOperationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MachineOperationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MachineOperationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineOperationPayload>
          }
          aggregate: {
            args: Prisma.MachineOperationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMachineOperation>
          }
          groupBy: {
            args: Prisma.MachineOperationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MachineOperationGroupByOutputType>[]
          }
          count: {
            args: Prisma.MachineOperationCountArgs<ExtArgs>
            result: $Utils.Optional<MachineOperationCountAggregateOutputType> | number
          }
        }
      }
      UserDevice: {
        payload: Prisma.$UserDevicePayload<ExtArgs>
        fields: Prisma.UserDeviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDeviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDeviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>
          }
          findFirst: {
            args: Prisma.UserDeviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDeviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>
          }
          findMany: {
            args: Prisma.UserDeviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>[]
          }
          create: {
            args: Prisma.UserDeviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>
          }
          createMany: {
            args: Prisma.UserDeviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserDeviceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>[]
          }
          delete: {
            args: Prisma.UserDeviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>
          }
          update: {
            args: Prisma.UserDeviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>
          }
          deleteMany: {
            args: Prisma.UserDeviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserDeviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserDeviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDevicePayload>
          }
          aggregate: {
            args: Prisma.UserDeviceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserDevice>
          }
          groupBy: {
            args: Prisma.UserDeviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserDeviceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDeviceCountArgs<ExtArgs>
            result: $Utils.Optional<UserDeviceCountAggregateOutputType> | number
          }
        }
      }
      Shift: {
        payload: Prisma.$ShiftPayload<ExtArgs>
        fields: Prisma.ShiftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          findFirst: {
            args: Prisma.ShiftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          findMany: {
            args: Prisma.ShiftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>[]
          }
          create: {
            args: Prisma.ShiftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          createMany: {
            args: Prisma.ShiftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShiftCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>[]
          }
          delete: {
            args: Prisma.ShiftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          update: {
            args: Prisma.ShiftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          deleteMany: {
            args: Prisma.ShiftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShiftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          aggregate: {
            args: Prisma.ShiftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShift>
          }
          groupBy: {
            args: Prisma.ShiftGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      MachinePermission: {
        payload: Prisma.$MachinePermissionPayload<ExtArgs>
        fields: Prisma.MachinePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MachinePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MachinePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>
          }
          findFirst: {
            args: Prisma.MachinePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MachinePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>
          }
          findMany: {
            args: Prisma.MachinePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>[]
          }
          create: {
            args: Prisma.MachinePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>
          }
          createMany: {
            args: Prisma.MachinePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MachinePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>[]
          }
          delete: {
            args: Prisma.MachinePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>
          }
          update: {
            args: Prisma.MachinePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>
          }
          deleteMany: {
            args: Prisma.MachinePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MachinePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MachinePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePermissionPayload>
          }
          aggregate: {
            args: Prisma.MachinePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMachinePermission>
          }
          groupBy: {
            args: Prisma.MachinePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MachinePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MachinePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<MachinePermissionCountAggregateOutputType> | number
          }
        }
      }
      MachineStatusHistory: {
        payload: Prisma.$MachineStatusHistoryPayload<ExtArgs>
        fields: Prisma.MachineStatusHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MachineStatusHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MachineStatusHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>
          }
          findFirst: {
            args: Prisma.MachineStatusHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MachineStatusHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>
          }
          findMany: {
            args: Prisma.MachineStatusHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>[]
          }
          create: {
            args: Prisma.MachineStatusHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>
          }
          createMany: {
            args: Prisma.MachineStatusHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MachineStatusHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>[]
          }
          delete: {
            args: Prisma.MachineStatusHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>
          }
          update: {
            args: Prisma.MachineStatusHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>
          }
          deleteMany: {
            args: Prisma.MachineStatusHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MachineStatusHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MachineStatusHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachineStatusHistoryPayload>
          }
          aggregate: {
            args: Prisma.MachineStatusHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMachineStatusHistory>
          }
          groupBy: {
            args: Prisma.MachineStatusHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MachineStatusHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MachineStatusHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<MachineStatusHistoryCountAggregateOutputType> | number
          }
        }
      }
      ProductionData: {
        payload: Prisma.$ProductionDataPayload<ExtArgs>
        fields: Prisma.ProductionDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductionDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductionDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>
          }
          findFirst: {
            args: Prisma.ProductionDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductionDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>
          }
          findMany: {
            args: Prisma.ProductionDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>[]
          }
          create: {
            args: Prisma.ProductionDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>
          }
          createMany: {
            args: Prisma.ProductionDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductionDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>[]
          }
          delete: {
            args: Prisma.ProductionDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>
          }
          update: {
            args: Prisma.ProductionDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>
          }
          deleteMany: {
            args: Prisma.ProductionDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductionDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductionDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionDataPayload>
          }
          aggregate: {
            args: Prisma.ProductionDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductionData>
          }
          groupBy: {
            args: Prisma.ProductionDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductionDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductionDataCountArgs<ExtArgs>
            result: $Utils.Optional<ProductionDataCountAggregateOutputType> | number
          }
        }
      }
      ArchiveData: {
        payload: Prisma.$ArchiveDataPayload<ExtArgs>
        fields: Prisma.ArchiveDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchiveDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchiveDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>
          }
          findFirst: {
            args: Prisma.ArchiveDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchiveDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>
          }
          findMany: {
            args: Prisma.ArchiveDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>[]
          }
          create: {
            args: Prisma.ArchiveDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>
          }
          createMany: {
            args: Prisma.ArchiveDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArchiveDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>[]
          }
          delete: {
            args: Prisma.ArchiveDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>
          }
          update: {
            args: Prisma.ArchiveDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>
          }
          deleteMany: {
            args: Prisma.ArchiveDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchiveDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchiveDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveDataPayload>
          }
          aggregate: {
            args: Prisma.ArchiveDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchiveData>
          }
          groupBy: {
            args: Prisma.ArchiveDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchiveDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchiveDataCountArgs<ExtArgs>
            result: $Utils.Optional<ArchiveDataCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    qualityTests: number
    teflonChanges: number
    notifications: number
    machineOperations: number
    devices: number
    shifts: number
    reports: number
    permissions: number
    machinePermissions: number
    statusHistory: number
    productionData: number
    archiveData: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualityTests?: boolean | UserCountOutputTypeCountQualityTestsArgs
    teflonChanges?: boolean | UserCountOutputTypeCountTeflonChangesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    machineOperations?: boolean | UserCountOutputTypeCountMachineOperationsArgs
    devices?: boolean | UserCountOutputTypeCountDevicesArgs
    shifts?: boolean | UserCountOutputTypeCountShiftsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
    machinePermissions?: boolean | UserCountOutputTypeCountMachinePermissionsArgs
    statusHistory?: boolean | UserCountOutputTypeCountStatusHistoryArgs
    productionData?: boolean | UserCountOutputTypeCountProductionDataArgs
    archiveData?: boolean | UserCountOutputTypeCountArchiveDataArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQualityTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QualityTestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeflonChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeflonChangeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMachineOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineOperationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDeviceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMachinePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachinePermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineStatusHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProductionDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionDataWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountArchiveDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchiveDataWhereInput
  }


  /**
   * Count Type MachineCountOutputType
   */

  export type MachineCountOutputType = {
    qualityTests: number
    teflonChanges: number
    operations: number
    permissions: number
    statusHistory: number
    productionData: number
    archiveData: number
  }

  export type MachineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualityTests?: boolean | MachineCountOutputTypeCountQualityTestsArgs
    teflonChanges?: boolean | MachineCountOutputTypeCountTeflonChangesArgs
    operations?: boolean | MachineCountOutputTypeCountOperationsArgs
    permissions?: boolean | MachineCountOutputTypeCountPermissionsArgs
    statusHistory?: boolean | MachineCountOutputTypeCountStatusHistoryArgs
    productionData?: boolean | MachineCountOutputTypeCountProductionDataArgs
    archiveData?: boolean | MachineCountOutputTypeCountArchiveDataArgs
  }

  // Custom InputTypes
  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineCountOutputType
     */
    select?: MachineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountQualityTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QualityTestWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountTeflonChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeflonChangeWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineOperationWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachinePermissionWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineStatusHistoryWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountProductionDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionDataWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountArchiveDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchiveDataWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    badgeNumber: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    badgeNumber: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    badgeNumber: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    badgeNumber?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    badgeNumber?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    badgeNumber?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    avatar: string | null
    badgeNumber: string | null
    role: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    badgeNumber?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qualityTests?: boolean | User$qualityTestsArgs<ExtArgs>
    teflonChanges?: boolean | User$teflonChangesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    machineOperations?: boolean | User$machineOperationsArgs<ExtArgs>
    devices?: boolean | User$devicesArgs<ExtArgs>
    shifts?: boolean | User$shiftsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    machinePermissions?: boolean | User$machinePermissionsArgs<ExtArgs>
    statusHistory?: boolean | User$statusHistoryArgs<ExtArgs>
    productionData?: boolean | User$productionDataArgs<ExtArgs>
    archiveData?: boolean | User$archiveDataArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    badgeNumber?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    badgeNumber?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualityTests?: boolean | User$qualityTestsArgs<ExtArgs>
    teflonChanges?: boolean | User$teflonChangesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    machineOperations?: boolean | User$machineOperationsArgs<ExtArgs>
    devices?: boolean | User$devicesArgs<ExtArgs>
    shifts?: boolean | User$shiftsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    machinePermissions?: boolean | User$machinePermissionsArgs<ExtArgs>
    statusHistory?: boolean | User$statusHistoryArgs<ExtArgs>
    productionData?: boolean | User$productionDataArgs<ExtArgs>
    archiveData?: boolean | User$archiveDataArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      qualityTests: Prisma.$QualityTestPayload<ExtArgs>[]
      teflonChanges: Prisma.$TeflonChangePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      machineOperations: Prisma.$MachineOperationPayload<ExtArgs>[]
      devices: Prisma.$UserDevicePayload<ExtArgs>[]
      shifts: Prisma.$ShiftPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      permissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      machinePermissions: Prisma.$MachinePermissionPayload<ExtArgs>[]
      statusHistory: Prisma.$MachineStatusHistoryPayload<ExtArgs>[]
      productionData: Prisma.$ProductionDataPayload<ExtArgs>[]
      archiveData: Prisma.$ArchiveDataPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      avatar: string | null
      badgeNumber: string | null
      role: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualityTests<T extends User$qualityTestsArgs<ExtArgs> = {}>(args?: Subset<T, User$qualityTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findMany"> | Null>
    teflonChanges<T extends User$teflonChangesArgs<ExtArgs> = {}>(args?: Subset<T, User$teflonChangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    machineOperations<T extends User$machineOperationsArgs<ExtArgs> = {}>(args?: Subset<T, User$machineOperationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findMany"> | Null>
    devices<T extends User$devicesArgs<ExtArgs> = {}>(args?: Subset<T, User$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "findMany"> | Null>
    shifts<T extends User$shiftsArgs<ExtArgs> = {}>(args?: Subset<T, User$shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany"> | Null>
    machinePermissions<T extends User$machinePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$machinePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    statusHistory<T extends User$statusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$statusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    productionData<T extends User$productionDataArgs<ExtArgs> = {}>(args?: Subset<T, User$productionDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findMany"> | Null>
    archiveData<T extends User$archiveDataArgs<ExtArgs> = {}>(args?: Subset<T, User$archiveDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly badgeNumber: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.qualityTests
   */
  export type User$qualityTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    where?: QualityTestWhereInput
    orderBy?: QualityTestOrderByWithRelationInput | QualityTestOrderByWithRelationInput[]
    cursor?: QualityTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QualityTestScalarFieldEnum | QualityTestScalarFieldEnum[]
  }

  /**
   * User.teflonChanges
   */
  export type User$teflonChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    where?: TeflonChangeWhereInput
    orderBy?: TeflonChangeOrderByWithRelationInput | TeflonChangeOrderByWithRelationInput[]
    cursor?: TeflonChangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeflonChangeScalarFieldEnum | TeflonChangeScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.machineOperations
   */
  export type User$machineOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    where?: MachineOperationWhereInput
    orderBy?: MachineOperationOrderByWithRelationInput | MachineOperationOrderByWithRelationInput[]
    cursor?: MachineOperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachineOperationScalarFieldEnum | MachineOperationScalarFieldEnum[]
  }

  /**
   * User.devices
   */
  export type User$devicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    where?: UserDeviceWhereInput
    orderBy?: UserDeviceOrderByWithRelationInput | UserDeviceOrderByWithRelationInput[]
    cursor?: UserDeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDeviceScalarFieldEnum | UserDeviceScalarFieldEnum[]
  }

  /**
   * User.shifts
   */
  export type User$shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    where?: ShiftWhereInput
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    cursor?: ShiftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.machinePermissions
   */
  export type User$machinePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    where?: MachinePermissionWhereInput
    orderBy?: MachinePermissionOrderByWithRelationInput | MachinePermissionOrderByWithRelationInput[]
    cursor?: MachinePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachinePermissionScalarFieldEnum | MachinePermissionScalarFieldEnum[]
  }

  /**
   * User.statusHistory
   */
  export type User$statusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    where?: MachineStatusHistoryWhereInput
    orderBy?: MachineStatusHistoryOrderByWithRelationInput | MachineStatusHistoryOrderByWithRelationInput[]
    cursor?: MachineStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachineStatusHistoryScalarFieldEnum | MachineStatusHistoryScalarFieldEnum[]
  }

  /**
   * User.productionData
   */
  export type User$productionDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    where?: ProductionDataWhereInput
    orderBy?: ProductionDataOrderByWithRelationInput | ProductionDataOrderByWithRelationInput[]
    cursor?: ProductionDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductionDataScalarFieldEnum | ProductionDataScalarFieldEnum[]
  }

  /**
   * User.archiveData
   */
  export type User$archiveDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    where?: ArchiveDataWhereInput
    orderBy?: ArchiveDataOrderByWithRelationInput | ArchiveDataOrderByWithRelationInput[]
    cursor?: ArchiveDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchiveDataScalarFieldEnum | ArchiveDataScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Machine
   */

  export type AggregateMachine = {
    _count: MachineCountAggregateOutputType | null
    _avg: MachineAvgAggregateOutputType | null
    _sum: MachineSumAggregateOutputType | null
    _min: MachineMinAggregateOutputType | null
    _max: MachineMaxAggregateOutputType | null
  }

  export type MachineAvgAggregateOutputType = {
    id: number | null
  }

  export type MachineSumAggregateOutputType = {
    id: number | null
  }

  export type MachineMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    location: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MachineMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    location: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MachineCountAggregateOutputType = {
    id: number
    name: number
    type: number
    location: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MachineAvgAggregateInputType = {
    id?: true
  }

  export type MachineSumAggregateInputType = {
    id?: true
  }

  export type MachineMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    location?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MachineMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    location?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MachineCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    location?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MachineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Machine to aggregate.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Machines
    **/
    _count?: true | MachineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MachineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MachineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MachineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MachineMaxAggregateInputType
  }

  export type GetMachineAggregateType<T extends MachineAggregateArgs> = {
        [P in keyof T & keyof AggregateMachine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMachine[P]>
      : GetScalarType<T[P], AggregateMachine[P]>
  }




  export type MachineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineWhereInput
    orderBy?: MachineOrderByWithAggregationInput | MachineOrderByWithAggregationInput[]
    by: MachineScalarFieldEnum[] | MachineScalarFieldEnum
    having?: MachineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MachineCountAggregateInputType | true
    _avg?: MachineAvgAggregateInputType
    _sum?: MachineSumAggregateInputType
    _min?: MachineMinAggregateInputType
    _max?: MachineMaxAggregateInputType
  }

  export type MachineGroupByOutputType = {
    id: number
    name: string
    type: string
    location: string | null
    status: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: MachineCountAggregateOutputType | null
    _avg: MachineAvgAggregateOutputType | null
    _sum: MachineSumAggregateOutputType | null
    _min: MachineMinAggregateOutputType | null
    _max: MachineMaxAggregateOutputType | null
  }

  type GetMachineGroupByPayload<T extends MachineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MachineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MachineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MachineGroupByOutputType[P]>
            : GetScalarType<T[P], MachineGroupByOutputType[P]>
        }
      >
    >


  export type MachineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qualityTests?: boolean | Machine$qualityTestsArgs<ExtArgs>
    teflonChanges?: boolean | Machine$teflonChangesArgs<ExtArgs>
    operations?: boolean | Machine$operationsArgs<ExtArgs>
    permissions?: boolean | Machine$permissionsArgs<ExtArgs>
    statusHistory?: boolean | Machine$statusHistoryArgs<ExtArgs>
    productionData?: boolean | Machine$productionDataArgs<ExtArgs>
    archiveData?: boolean | Machine$archiveDataArgs<ExtArgs>
    _count?: boolean | MachineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machine"]>

  export type MachineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["machine"]>

  export type MachineSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MachineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualityTests?: boolean | Machine$qualityTestsArgs<ExtArgs>
    teflonChanges?: boolean | Machine$teflonChangesArgs<ExtArgs>
    operations?: boolean | Machine$operationsArgs<ExtArgs>
    permissions?: boolean | Machine$permissionsArgs<ExtArgs>
    statusHistory?: boolean | Machine$statusHistoryArgs<ExtArgs>
    productionData?: boolean | Machine$productionDataArgs<ExtArgs>
    archiveData?: boolean | Machine$archiveDataArgs<ExtArgs>
    _count?: boolean | MachineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MachineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MachinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Machine"
    objects: {
      qualityTests: Prisma.$QualityTestPayload<ExtArgs>[]
      teflonChanges: Prisma.$TeflonChangePayload<ExtArgs>[]
      operations: Prisma.$MachineOperationPayload<ExtArgs>[]
      permissions: Prisma.$MachinePermissionPayload<ExtArgs>[]
      statusHistory: Prisma.$MachineStatusHistoryPayload<ExtArgs>[]
      productionData: Prisma.$ProductionDataPayload<ExtArgs>[]
      archiveData: Prisma.$ArchiveDataPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      location: string | null
      status: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["machine"]>
    composites: {}
  }

  type MachineGetPayload<S extends boolean | null | undefined | MachineDefaultArgs> = $Result.GetResult<Prisma.$MachinePayload, S>

  type MachineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MachineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MachineCountAggregateInputType | true
    }

  export interface MachineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Machine'], meta: { name: 'Machine' } }
    /**
     * Find zero or one Machine that matches the filter.
     * @param {MachineFindUniqueArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MachineFindUniqueArgs>(args: SelectSubset<T, MachineFindUniqueArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Machine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MachineFindUniqueOrThrowArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MachineFindUniqueOrThrowArgs>(args: SelectSubset<T, MachineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Machine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindFirstArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MachineFindFirstArgs>(args?: SelectSubset<T, MachineFindFirstArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Machine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindFirstOrThrowArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MachineFindFirstOrThrowArgs>(args?: SelectSubset<T, MachineFindFirstOrThrowArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Machines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Machines
     * const machines = await prisma.machine.findMany()
     * 
     * // Get first 10 Machines
     * const machines = await prisma.machine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const machineWithIdOnly = await prisma.machine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MachineFindManyArgs>(args?: SelectSubset<T, MachineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Machine.
     * @param {MachineCreateArgs} args - Arguments to create a Machine.
     * @example
     * // Create one Machine
     * const Machine = await prisma.machine.create({
     *   data: {
     *     // ... data to create a Machine
     *   }
     * })
     * 
     */
    create<T extends MachineCreateArgs>(args: SelectSubset<T, MachineCreateArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Machines.
     * @param {MachineCreateManyArgs} args - Arguments to create many Machines.
     * @example
     * // Create many Machines
     * const machine = await prisma.machine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MachineCreateManyArgs>(args?: SelectSubset<T, MachineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Machines and returns the data saved in the database.
     * @param {MachineCreateManyAndReturnArgs} args - Arguments to create many Machines.
     * @example
     * // Create many Machines
     * const machine = await prisma.machine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Machines and only return the `id`
     * const machineWithIdOnly = await prisma.machine.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MachineCreateManyAndReturnArgs>(args?: SelectSubset<T, MachineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Machine.
     * @param {MachineDeleteArgs} args - Arguments to delete one Machine.
     * @example
     * // Delete one Machine
     * const Machine = await prisma.machine.delete({
     *   where: {
     *     // ... filter to delete one Machine
     *   }
     * })
     * 
     */
    delete<T extends MachineDeleteArgs>(args: SelectSubset<T, MachineDeleteArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Machine.
     * @param {MachineUpdateArgs} args - Arguments to update one Machine.
     * @example
     * // Update one Machine
     * const machine = await prisma.machine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MachineUpdateArgs>(args: SelectSubset<T, MachineUpdateArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Machines.
     * @param {MachineDeleteManyArgs} args - Arguments to filter Machines to delete.
     * @example
     * // Delete a few Machines
     * const { count } = await prisma.machine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MachineDeleteManyArgs>(args?: SelectSubset<T, MachineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Machines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Machines
     * const machine = await prisma.machine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MachineUpdateManyArgs>(args: SelectSubset<T, MachineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Machine.
     * @param {MachineUpsertArgs} args - Arguments to update or create a Machine.
     * @example
     * // Update or create a Machine
     * const machine = await prisma.machine.upsert({
     *   create: {
     *     // ... data to create a Machine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Machine we want to update
     *   }
     * })
     */
    upsert<T extends MachineUpsertArgs>(args: SelectSubset<T, MachineUpsertArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Machines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineCountArgs} args - Arguments to filter Machines to count.
     * @example
     * // Count the number of Machines
     * const count = await prisma.machine.count({
     *   where: {
     *     // ... the filter for the Machines we want to count
     *   }
     * })
    **/
    count<T extends MachineCountArgs>(
      args?: Subset<T, MachineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MachineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Machine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MachineAggregateArgs>(args: Subset<T, MachineAggregateArgs>): Prisma.PrismaPromise<GetMachineAggregateType<T>>

    /**
     * Group by Machine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MachineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MachineGroupByArgs['orderBy'] }
        : { orderBy?: MachineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MachineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMachineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Machine model
   */
  readonly fields: MachineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Machine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MachineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualityTests<T extends Machine$qualityTestsArgs<ExtArgs> = {}>(args?: Subset<T, Machine$qualityTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findMany"> | Null>
    teflonChanges<T extends Machine$teflonChangesArgs<ExtArgs> = {}>(args?: Subset<T, Machine$teflonChangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findMany"> | Null>
    operations<T extends Machine$operationsArgs<ExtArgs> = {}>(args?: Subset<T, Machine$operationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends Machine$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Machine$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    statusHistory<T extends Machine$statusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Machine$statusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    productionData<T extends Machine$productionDataArgs<ExtArgs> = {}>(args?: Subset<T, Machine$productionDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findMany"> | Null>
    archiveData<T extends Machine$archiveDataArgs<ExtArgs> = {}>(args?: Subset<T, Machine$archiveDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Machine model
   */ 
  interface MachineFieldRefs {
    readonly id: FieldRef<"Machine", 'Int'>
    readonly name: FieldRef<"Machine", 'String'>
    readonly type: FieldRef<"Machine", 'String'>
    readonly location: FieldRef<"Machine", 'String'>
    readonly status: FieldRef<"Machine", 'String'>
    readonly isActive: FieldRef<"Machine", 'Boolean'>
    readonly createdAt: FieldRef<"Machine", 'DateTime'>
    readonly updatedAt: FieldRef<"Machine", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Machine findUnique
   */
  export type MachineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine findUniqueOrThrow
   */
  export type MachineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine findFirst
   */
  export type MachineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Machines.
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Machines.
     */
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * Machine findFirstOrThrow
   */
  export type MachineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Machines.
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Machines.
     */
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * Machine findMany
   */
  export type MachineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machines to fetch.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Machines.
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * Machine create
   */
  export type MachineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * The data needed to create a Machine.
     */
    data: XOR<MachineCreateInput, MachineUncheckedCreateInput>
  }

  /**
   * Machine createMany
   */
  export type MachineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Machines.
     */
    data: MachineCreateManyInput | MachineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Machine createManyAndReturn
   */
  export type MachineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Machines.
     */
    data: MachineCreateManyInput | MachineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Machine update
   */
  export type MachineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * The data needed to update a Machine.
     */
    data: XOR<MachineUpdateInput, MachineUncheckedUpdateInput>
    /**
     * Choose, which Machine to update.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine updateMany
   */
  export type MachineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Machines.
     */
    data: XOR<MachineUpdateManyMutationInput, MachineUncheckedUpdateManyInput>
    /**
     * Filter which Machines to update
     */
    where?: MachineWhereInput
  }

  /**
   * Machine upsert
   */
  export type MachineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * The filter to search for the Machine to update in case it exists.
     */
    where: MachineWhereUniqueInput
    /**
     * In case the Machine found by the `where` argument doesn't exist, create a new Machine with this data.
     */
    create: XOR<MachineCreateInput, MachineUncheckedCreateInput>
    /**
     * In case the Machine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MachineUpdateInput, MachineUncheckedUpdateInput>
  }

  /**
   * Machine delete
   */
  export type MachineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter which Machine to delete.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine deleteMany
   */
  export type MachineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Machines to delete
     */
    where?: MachineWhereInput
  }

  /**
   * Machine.qualityTests
   */
  export type Machine$qualityTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    where?: QualityTestWhereInput
    orderBy?: QualityTestOrderByWithRelationInput | QualityTestOrderByWithRelationInput[]
    cursor?: QualityTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QualityTestScalarFieldEnum | QualityTestScalarFieldEnum[]
  }

  /**
   * Machine.teflonChanges
   */
  export type Machine$teflonChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    where?: TeflonChangeWhereInput
    orderBy?: TeflonChangeOrderByWithRelationInput | TeflonChangeOrderByWithRelationInput[]
    cursor?: TeflonChangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeflonChangeScalarFieldEnum | TeflonChangeScalarFieldEnum[]
  }

  /**
   * Machine.operations
   */
  export type Machine$operationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    where?: MachineOperationWhereInput
    orderBy?: MachineOperationOrderByWithRelationInput | MachineOperationOrderByWithRelationInput[]
    cursor?: MachineOperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachineOperationScalarFieldEnum | MachineOperationScalarFieldEnum[]
  }

  /**
   * Machine.permissions
   */
  export type Machine$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    where?: MachinePermissionWhereInput
    orderBy?: MachinePermissionOrderByWithRelationInput | MachinePermissionOrderByWithRelationInput[]
    cursor?: MachinePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachinePermissionScalarFieldEnum | MachinePermissionScalarFieldEnum[]
  }

  /**
   * Machine.statusHistory
   */
  export type Machine$statusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    where?: MachineStatusHistoryWhereInput
    orderBy?: MachineStatusHistoryOrderByWithRelationInput | MachineStatusHistoryOrderByWithRelationInput[]
    cursor?: MachineStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachineStatusHistoryScalarFieldEnum | MachineStatusHistoryScalarFieldEnum[]
  }

  /**
   * Machine.productionData
   */
  export type Machine$productionDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    where?: ProductionDataWhereInput
    orderBy?: ProductionDataOrderByWithRelationInput | ProductionDataOrderByWithRelationInput[]
    cursor?: ProductionDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductionDataScalarFieldEnum | ProductionDataScalarFieldEnum[]
  }

  /**
   * Machine.archiveData
   */
  export type Machine$archiveDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    where?: ArchiveDataWhereInput
    orderBy?: ArchiveDataOrderByWithRelationInput | ArchiveDataOrderByWithRelationInput[]
    cursor?: ArchiveDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchiveDataScalarFieldEnum | ArchiveDataScalarFieldEnum[]
  }

  /**
   * Machine without action
   */
  export type MachineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
  }


  /**
   * Model QualityTest
   */

  export type AggregateQualityTest = {
    _count: QualityTestCountAggregateOutputType | null
    _avg: QualityTestAvgAggregateOutputType | null
    _sum: QualityTestSumAggregateOutputType | null
    _min: QualityTestMinAggregateOutputType | null
    _max: QualityTestMaxAggregateOutputType | null
  }

  export type QualityTestAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type QualityTestSumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type QualityTestMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    createdAt: Date | null
  }

  export type QualityTestMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    createdAt: Date | null
  }

  export type QualityTestCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    createdAt: number
    _all: number
  }


  export type QualityTestAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type QualityTestSumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type QualityTestMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    createdAt?: true
  }

  export type QualityTestMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    createdAt?: true
  }

  export type QualityTestCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    createdAt?: true
    _all?: true
  }

  export type QualityTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QualityTest to aggregate.
     */
    where?: QualityTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityTests to fetch.
     */
    orderBy?: QualityTestOrderByWithRelationInput | QualityTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QualityTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QualityTests
    **/
    _count?: true | QualityTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QualityTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QualityTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QualityTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QualityTestMaxAggregateInputType
  }

  export type GetQualityTestAggregateType<T extends QualityTestAggregateArgs> = {
        [P in keyof T & keyof AggregateQualityTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQualityTest[P]>
      : GetScalarType<T[P], AggregateQualityTest[P]>
  }




  export type QualityTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QualityTestWhereInput
    orderBy?: QualityTestOrderByWithAggregationInput | QualityTestOrderByWithAggregationInput[]
    by: QualityTestScalarFieldEnum[] | QualityTestScalarFieldEnum
    having?: QualityTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QualityTestCountAggregateInputType | true
    _avg?: QualityTestAvgAggregateInputType
    _sum?: QualityTestSumAggregateInputType
    _min?: QualityTestMinAggregateInputType
    _max?: QualityTestMaxAggregateInputType
  }

  export type QualityTestGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    createdAt: Date
    _count: QualityTestCountAggregateOutputType | null
    _avg: QualityTestAvgAggregateOutputType | null
    _sum: QualityTestSumAggregateOutputType | null
    _min: QualityTestMinAggregateOutputType | null
    _max: QualityTestMaxAggregateOutputType | null
  }

  type GetQualityTestGroupByPayload<T extends QualityTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QualityTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QualityTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QualityTestGroupByOutputType[P]>
            : GetScalarType<T[P], QualityTestGroupByOutputType[P]>
        }
      >
    >


  export type QualityTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qualityTest"]>

  export type QualityTestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qualityTest"]>

  export type QualityTestSelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
    createdAt?: boolean
  }

  export type QualityTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type QualityTestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $QualityTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QualityTest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
      createdAt: Date
    }, ExtArgs["result"]["qualityTest"]>
    composites: {}
  }

  type QualityTestGetPayload<S extends boolean | null | undefined | QualityTestDefaultArgs> = $Result.GetResult<Prisma.$QualityTestPayload, S>

  type QualityTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QualityTestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QualityTestCountAggregateInputType | true
    }

  export interface QualityTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QualityTest'], meta: { name: 'QualityTest' } }
    /**
     * Find zero or one QualityTest that matches the filter.
     * @param {QualityTestFindUniqueArgs} args - Arguments to find a QualityTest
     * @example
     * // Get one QualityTest
     * const qualityTest = await prisma.qualityTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QualityTestFindUniqueArgs>(args: SelectSubset<T, QualityTestFindUniqueArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QualityTest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QualityTestFindUniqueOrThrowArgs} args - Arguments to find a QualityTest
     * @example
     * // Get one QualityTest
     * const qualityTest = await prisma.qualityTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QualityTestFindUniqueOrThrowArgs>(args: SelectSubset<T, QualityTestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QualityTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestFindFirstArgs} args - Arguments to find a QualityTest
     * @example
     * // Get one QualityTest
     * const qualityTest = await prisma.qualityTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QualityTestFindFirstArgs>(args?: SelectSubset<T, QualityTestFindFirstArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QualityTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestFindFirstOrThrowArgs} args - Arguments to find a QualityTest
     * @example
     * // Get one QualityTest
     * const qualityTest = await prisma.qualityTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QualityTestFindFirstOrThrowArgs>(args?: SelectSubset<T, QualityTestFindFirstOrThrowArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QualityTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QualityTests
     * const qualityTests = await prisma.qualityTest.findMany()
     * 
     * // Get first 10 QualityTests
     * const qualityTests = await prisma.qualityTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qualityTestWithIdOnly = await prisma.qualityTest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QualityTestFindManyArgs>(args?: SelectSubset<T, QualityTestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QualityTest.
     * @param {QualityTestCreateArgs} args - Arguments to create a QualityTest.
     * @example
     * // Create one QualityTest
     * const QualityTest = await prisma.qualityTest.create({
     *   data: {
     *     // ... data to create a QualityTest
     *   }
     * })
     * 
     */
    create<T extends QualityTestCreateArgs>(args: SelectSubset<T, QualityTestCreateArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QualityTests.
     * @param {QualityTestCreateManyArgs} args - Arguments to create many QualityTests.
     * @example
     * // Create many QualityTests
     * const qualityTest = await prisma.qualityTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QualityTestCreateManyArgs>(args?: SelectSubset<T, QualityTestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QualityTests and returns the data saved in the database.
     * @param {QualityTestCreateManyAndReturnArgs} args - Arguments to create many QualityTests.
     * @example
     * // Create many QualityTests
     * const qualityTest = await prisma.qualityTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QualityTests and only return the `id`
     * const qualityTestWithIdOnly = await prisma.qualityTest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QualityTestCreateManyAndReturnArgs>(args?: SelectSubset<T, QualityTestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QualityTest.
     * @param {QualityTestDeleteArgs} args - Arguments to delete one QualityTest.
     * @example
     * // Delete one QualityTest
     * const QualityTest = await prisma.qualityTest.delete({
     *   where: {
     *     // ... filter to delete one QualityTest
     *   }
     * })
     * 
     */
    delete<T extends QualityTestDeleteArgs>(args: SelectSubset<T, QualityTestDeleteArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QualityTest.
     * @param {QualityTestUpdateArgs} args - Arguments to update one QualityTest.
     * @example
     * // Update one QualityTest
     * const qualityTest = await prisma.qualityTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QualityTestUpdateArgs>(args: SelectSubset<T, QualityTestUpdateArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QualityTests.
     * @param {QualityTestDeleteManyArgs} args - Arguments to filter QualityTests to delete.
     * @example
     * // Delete a few QualityTests
     * const { count } = await prisma.qualityTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QualityTestDeleteManyArgs>(args?: SelectSubset<T, QualityTestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QualityTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QualityTests
     * const qualityTest = await prisma.qualityTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QualityTestUpdateManyArgs>(args: SelectSubset<T, QualityTestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QualityTest.
     * @param {QualityTestUpsertArgs} args - Arguments to update or create a QualityTest.
     * @example
     * // Update or create a QualityTest
     * const qualityTest = await prisma.qualityTest.upsert({
     *   create: {
     *     // ... data to create a QualityTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QualityTest we want to update
     *   }
     * })
     */
    upsert<T extends QualityTestUpsertArgs>(args: SelectSubset<T, QualityTestUpsertArgs<ExtArgs>>): Prisma__QualityTestClient<$Result.GetResult<Prisma.$QualityTestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QualityTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestCountArgs} args - Arguments to filter QualityTests to count.
     * @example
     * // Count the number of QualityTests
     * const count = await prisma.qualityTest.count({
     *   where: {
     *     // ... the filter for the QualityTests we want to count
     *   }
     * })
    **/
    count<T extends QualityTestCountArgs>(
      args?: Subset<T, QualityTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QualityTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QualityTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QualityTestAggregateArgs>(args: Subset<T, QualityTestAggregateArgs>): Prisma.PrismaPromise<GetQualityTestAggregateType<T>>

    /**
     * Group by QualityTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QualityTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QualityTestGroupByArgs['orderBy'] }
        : { orderBy?: QualityTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QualityTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQualityTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QualityTest model
   */
  readonly fields: QualityTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QualityTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QualityTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QualityTest model
   */ 
  interface QualityTestFieldRefs {
    readonly id: FieldRef<"QualityTest", 'Int'>
    readonly userId: FieldRef<"QualityTest", 'Int'>
    readonly machineId: FieldRef<"QualityTest", 'Int'>
    readonly createdAt: FieldRef<"QualityTest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QualityTest findUnique
   */
  export type QualityTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * Filter, which QualityTest to fetch.
     */
    where: QualityTestWhereUniqueInput
  }

  /**
   * QualityTest findUniqueOrThrow
   */
  export type QualityTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * Filter, which QualityTest to fetch.
     */
    where: QualityTestWhereUniqueInput
  }

  /**
   * QualityTest findFirst
   */
  export type QualityTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * Filter, which QualityTest to fetch.
     */
    where?: QualityTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityTests to fetch.
     */
    orderBy?: QualityTestOrderByWithRelationInput | QualityTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QualityTests.
     */
    cursor?: QualityTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QualityTests.
     */
    distinct?: QualityTestScalarFieldEnum | QualityTestScalarFieldEnum[]
  }

  /**
   * QualityTest findFirstOrThrow
   */
  export type QualityTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * Filter, which QualityTest to fetch.
     */
    where?: QualityTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityTests to fetch.
     */
    orderBy?: QualityTestOrderByWithRelationInput | QualityTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QualityTests.
     */
    cursor?: QualityTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QualityTests.
     */
    distinct?: QualityTestScalarFieldEnum | QualityTestScalarFieldEnum[]
  }

  /**
   * QualityTest findMany
   */
  export type QualityTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * Filter, which QualityTests to fetch.
     */
    where?: QualityTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityTests to fetch.
     */
    orderBy?: QualityTestOrderByWithRelationInput | QualityTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QualityTests.
     */
    cursor?: QualityTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityTests.
     */
    skip?: number
    distinct?: QualityTestScalarFieldEnum | QualityTestScalarFieldEnum[]
  }

  /**
   * QualityTest create
   */
  export type QualityTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * The data needed to create a QualityTest.
     */
    data: XOR<QualityTestCreateInput, QualityTestUncheckedCreateInput>
  }

  /**
   * QualityTest createMany
   */
  export type QualityTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QualityTests.
     */
    data: QualityTestCreateManyInput | QualityTestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QualityTest createManyAndReturn
   */
  export type QualityTestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QualityTests.
     */
    data: QualityTestCreateManyInput | QualityTestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QualityTest update
   */
  export type QualityTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * The data needed to update a QualityTest.
     */
    data: XOR<QualityTestUpdateInput, QualityTestUncheckedUpdateInput>
    /**
     * Choose, which QualityTest to update.
     */
    where: QualityTestWhereUniqueInput
  }

  /**
   * QualityTest updateMany
   */
  export type QualityTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QualityTests.
     */
    data: XOR<QualityTestUpdateManyMutationInput, QualityTestUncheckedUpdateManyInput>
    /**
     * Filter which QualityTests to update
     */
    where?: QualityTestWhereInput
  }

  /**
   * QualityTest upsert
   */
  export type QualityTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * The filter to search for the QualityTest to update in case it exists.
     */
    where: QualityTestWhereUniqueInput
    /**
     * In case the QualityTest found by the `where` argument doesn't exist, create a new QualityTest with this data.
     */
    create: XOR<QualityTestCreateInput, QualityTestUncheckedCreateInput>
    /**
     * In case the QualityTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QualityTestUpdateInput, QualityTestUncheckedUpdateInput>
  }

  /**
   * QualityTest delete
   */
  export type QualityTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
    /**
     * Filter which QualityTest to delete.
     */
    where: QualityTestWhereUniqueInput
  }

  /**
   * QualityTest deleteMany
   */
  export type QualityTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QualityTests to delete
     */
    where?: QualityTestWhereInput
  }

  /**
   * QualityTest without action
   */
  export type QualityTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityTest
     */
    select?: QualityTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityTestInclude<ExtArgs> | null
  }


  /**
   * Model TeflonChange
   */

  export type AggregateTeflonChange = {
    _count: TeflonChangeCountAggregateOutputType | null
    _avg: TeflonChangeAvgAggregateOutputType | null
    _sum: TeflonChangeSumAggregateOutputType | null
    _min: TeflonChangeMinAggregateOutputType | null
    _max: TeflonChangeMaxAggregateOutputType | null
  }

  export type TeflonChangeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type TeflonChangeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type TeflonChangeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    createdAt: Date | null
  }

  export type TeflonChangeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    createdAt: Date | null
  }

  export type TeflonChangeCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    createdAt: number
    _all: number
  }


  export type TeflonChangeAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type TeflonChangeSumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type TeflonChangeMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    createdAt?: true
  }

  export type TeflonChangeMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    createdAt?: true
  }

  export type TeflonChangeCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    createdAt?: true
    _all?: true
  }

  export type TeflonChangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeflonChange to aggregate.
     */
    where?: TeflonChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeflonChanges to fetch.
     */
    orderBy?: TeflonChangeOrderByWithRelationInput | TeflonChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeflonChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeflonChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeflonChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeflonChanges
    **/
    _count?: true | TeflonChangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeflonChangeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeflonChangeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeflonChangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeflonChangeMaxAggregateInputType
  }

  export type GetTeflonChangeAggregateType<T extends TeflonChangeAggregateArgs> = {
        [P in keyof T & keyof AggregateTeflonChange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeflonChange[P]>
      : GetScalarType<T[P], AggregateTeflonChange[P]>
  }




  export type TeflonChangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeflonChangeWhereInput
    orderBy?: TeflonChangeOrderByWithAggregationInput | TeflonChangeOrderByWithAggregationInput[]
    by: TeflonChangeScalarFieldEnum[] | TeflonChangeScalarFieldEnum
    having?: TeflonChangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeflonChangeCountAggregateInputType | true
    _avg?: TeflonChangeAvgAggregateInputType
    _sum?: TeflonChangeSumAggregateInputType
    _min?: TeflonChangeMinAggregateInputType
    _max?: TeflonChangeMaxAggregateInputType
  }

  export type TeflonChangeGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    createdAt: Date
    _count: TeflonChangeCountAggregateOutputType | null
    _avg: TeflonChangeAvgAggregateOutputType | null
    _sum: TeflonChangeSumAggregateOutputType | null
    _min: TeflonChangeMinAggregateOutputType | null
    _max: TeflonChangeMaxAggregateOutputType | null
  }

  type GetTeflonChangeGroupByPayload<T extends TeflonChangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeflonChangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeflonChangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeflonChangeGroupByOutputType[P]>
            : GetScalarType<T[P], TeflonChangeGroupByOutputType[P]>
        }
      >
    >


  export type TeflonChangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teflonChange"]>

  export type TeflonChangeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teflonChange"]>

  export type TeflonChangeSelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
    createdAt?: boolean
  }

  export type TeflonChangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type TeflonChangeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $TeflonChangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeflonChange"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
      createdAt: Date
    }, ExtArgs["result"]["teflonChange"]>
    composites: {}
  }

  type TeflonChangeGetPayload<S extends boolean | null | undefined | TeflonChangeDefaultArgs> = $Result.GetResult<Prisma.$TeflonChangePayload, S>

  type TeflonChangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeflonChangeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeflonChangeCountAggregateInputType | true
    }

  export interface TeflonChangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeflonChange'], meta: { name: 'TeflonChange' } }
    /**
     * Find zero or one TeflonChange that matches the filter.
     * @param {TeflonChangeFindUniqueArgs} args - Arguments to find a TeflonChange
     * @example
     * // Get one TeflonChange
     * const teflonChange = await prisma.teflonChange.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeflonChangeFindUniqueArgs>(args: SelectSubset<T, TeflonChangeFindUniqueArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeflonChange that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeflonChangeFindUniqueOrThrowArgs} args - Arguments to find a TeflonChange
     * @example
     * // Get one TeflonChange
     * const teflonChange = await prisma.teflonChange.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeflonChangeFindUniqueOrThrowArgs>(args: SelectSubset<T, TeflonChangeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeflonChange that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeFindFirstArgs} args - Arguments to find a TeflonChange
     * @example
     * // Get one TeflonChange
     * const teflonChange = await prisma.teflonChange.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeflonChangeFindFirstArgs>(args?: SelectSubset<T, TeflonChangeFindFirstArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeflonChange that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeFindFirstOrThrowArgs} args - Arguments to find a TeflonChange
     * @example
     * // Get one TeflonChange
     * const teflonChange = await prisma.teflonChange.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeflonChangeFindFirstOrThrowArgs>(args?: SelectSubset<T, TeflonChangeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeflonChanges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeflonChanges
     * const teflonChanges = await prisma.teflonChange.findMany()
     * 
     * // Get first 10 TeflonChanges
     * const teflonChanges = await prisma.teflonChange.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teflonChangeWithIdOnly = await prisma.teflonChange.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeflonChangeFindManyArgs>(args?: SelectSubset<T, TeflonChangeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeflonChange.
     * @param {TeflonChangeCreateArgs} args - Arguments to create a TeflonChange.
     * @example
     * // Create one TeflonChange
     * const TeflonChange = await prisma.teflonChange.create({
     *   data: {
     *     // ... data to create a TeflonChange
     *   }
     * })
     * 
     */
    create<T extends TeflonChangeCreateArgs>(args: SelectSubset<T, TeflonChangeCreateArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeflonChanges.
     * @param {TeflonChangeCreateManyArgs} args - Arguments to create many TeflonChanges.
     * @example
     * // Create many TeflonChanges
     * const teflonChange = await prisma.teflonChange.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeflonChangeCreateManyArgs>(args?: SelectSubset<T, TeflonChangeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeflonChanges and returns the data saved in the database.
     * @param {TeflonChangeCreateManyAndReturnArgs} args - Arguments to create many TeflonChanges.
     * @example
     * // Create many TeflonChanges
     * const teflonChange = await prisma.teflonChange.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeflonChanges and only return the `id`
     * const teflonChangeWithIdOnly = await prisma.teflonChange.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeflonChangeCreateManyAndReturnArgs>(args?: SelectSubset<T, TeflonChangeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TeflonChange.
     * @param {TeflonChangeDeleteArgs} args - Arguments to delete one TeflonChange.
     * @example
     * // Delete one TeflonChange
     * const TeflonChange = await prisma.teflonChange.delete({
     *   where: {
     *     // ... filter to delete one TeflonChange
     *   }
     * })
     * 
     */
    delete<T extends TeflonChangeDeleteArgs>(args: SelectSubset<T, TeflonChangeDeleteArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeflonChange.
     * @param {TeflonChangeUpdateArgs} args - Arguments to update one TeflonChange.
     * @example
     * // Update one TeflonChange
     * const teflonChange = await prisma.teflonChange.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeflonChangeUpdateArgs>(args: SelectSubset<T, TeflonChangeUpdateArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeflonChanges.
     * @param {TeflonChangeDeleteManyArgs} args - Arguments to filter TeflonChanges to delete.
     * @example
     * // Delete a few TeflonChanges
     * const { count } = await prisma.teflonChange.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeflonChangeDeleteManyArgs>(args?: SelectSubset<T, TeflonChangeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeflonChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeflonChanges
     * const teflonChange = await prisma.teflonChange.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeflonChangeUpdateManyArgs>(args: SelectSubset<T, TeflonChangeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeflonChange.
     * @param {TeflonChangeUpsertArgs} args - Arguments to update or create a TeflonChange.
     * @example
     * // Update or create a TeflonChange
     * const teflonChange = await prisma.teflonChange.upsert({
     *   create: {
     *     // ... data to create a TeflonChange
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeflonChange we want to update
     *   }
     * })
     */
    upsert<T extends TeflonChangeUpsertArgs>(args: SelectSubset<T, TeflonChangeUpsertArgs<ExtArgs>>): Prisma__TeflonChangeClient<$Result.GetResult<Prisma.$TeflonChangePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeflonChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeCountArgs} args - Arguments to filter TeflonChanges to count.
     * @example
     * // Count the number of TeflonChanges
     * const count = await prisma.teflonChange.count({
     *   where: {
     *     // ... the filter for the TeflonChanges we want to count
     *   }
     * })
    **/
    count<T extends TeflonChangeCountArgs>(
      args?: Subset<T, TeflonChangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeflonChangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeflonChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeflonChangeAggregateArgs>(args: Subset<T, TeflonChangeAggregateArgs>): Prisma.PrismaPromise<GetTeflonChangeAggregateType<T>>

    /**
     * Group by TeflonChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeflonChangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeflonChangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeflonChangeGroupByArgs['orderBy'] }
        : { orderBy?: TeflonChangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeflonChangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeflonChangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeflonChange model
   */
  readonly fields: TeflonChangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeflonChange.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeflonChangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeflonChange model
   */ 
  interface TeflonChangeFieldRefs {
    readonly id: FieldRef<"TeflonChange", 'Int'>
    readonly userId: FieldRef<"TeflonChange", 'Int'>
    readonly machineId: FieldRef<"TeflonChange", 'Int'>
    readonly createdAt: FieldRef<"TeflonChange", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeflonChange findUnique
   */
  export type TeflonChangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * Filter, which TeflonChange to fetch.
     */
    where: TeflonChangeWhereUniqueInput
  }

  /**
   * TeflonChange findUniqueOrThrow
   */
  export type TeflonChangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * Filter, which TeflonChange to fetch.
     */
    where: TeflonChangeWhereUniqueInput
  }

  /**
   * TeflonChange findFirst
   */
  export type TeflonChangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * Filter, which TeflonChange to fetch.
     */
    where?: TeflonChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeflonChanges to fetch.
     */
    orderBy?: TeflonChangeOrderByWithRelationInput | TeflonChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeflonChanges.
     */
    cursor?: TeflonChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeflonChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeflonChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeflonChanges.
     */
    distinct?: TeflonChangeScalarFieldEnum | TeflonChangeScalarFieldEnum[]
  }

  /**
   * TeflonChange findFirstOrThrow
   */
  export type TeflonChangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * Filter, which TeflonChange to fetch.
     */
    where?: TeflonChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeflonChanges to fetch.
     */
    orderBy?: TeflonChangeOrderByWithRelationInput | TeflonChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeflonChanges.
     */
    cursor?: TeflonChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeflonChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeflonChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeflonChanges.
     */
    distinct?: TeflonChangeScalarFieldEnum | TeflonChangeScalarFieldEnum[]
  }

  /**
   * TeflonChange findMany
   */
  export type TeflonChangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * Filter, which TeflonChanges to fetch.
     */
    where?: TeflonChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeflonChanges to fetch.
     */
    orderBy?: TeflonChangeOrderByWithRelationInput | TeflonChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeflonChanges.
     */
    cursor?: TeflonChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeflonChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeflonChanges.
     */
    skip?: number
    distinct?: TeflonChangeScalarFieldEnum | TeflonChangeScalarFieldEnum[]
  }

  /**
   * TeflonChange create
   */
  export type TeflonChangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * The data needed to create a TeflonChange.
     */
    data: XOR<TeflonChangeCreateInput, TeflonChangeUncheckedCreateInput>
  }

  /**
   * TeflonChange createMany
   */
  export type TeflonChangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeflonChanges.
     */
    data: TeflonChangeCreateManyInput | TeflonChangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeflonChange createManyAndReturn
   */
  export type TeflonChangeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TeflonChanges.
     */
    data: TeflonChangeCreateManyInput | TeflonChangeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeflonChange update
   */
  export type TeflonChangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * The data needed to update a TeflonChange.
     */
    data: XOR<TeflonChangeUpdateInput, TeflonChangeUncheckedUpdateInput>
    /**
     * Choose, which TeflonChange to update.
     */
    where: TeflonChangeWhereUniqueInput
  }

  /**
   * TeflonChange updateMany
   */
  export type TeflonChangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeflonChanges.
     */
    data: XOR<TeflonChangeUpdateManyMutationInput, TeflonChangeUncheckedUpdateManyInput>
    /**
     * Filter which TeflonChanges to update
     */
    where?: TeflonChangeWhereInput
  }

  /**
   * TeflonChange upsert
   */
  export type TeflonChangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * The filter to search for the TeflonChange to update in case it exists.
     */
    where: TeflonChangeWhereUniqueInput
    /**
     * In case the TeflonChange found by the `where` argument doesn't exist, create a new TeflonChange with this data.
     */
    create: XOR<TeflonChangeCreateInput, TeflonChangeUncheckedCreateInput>
    /**
     * In case the TeflonChange was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeflonChangeUpdateInput, TeflonChangeUncheckedUpdateInput>
  }

  /**
   * TeflonChange delete
   */
  export type TeflonChangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
    /**
     * Filter which TeflonChange to delete.
     */
    where: TeflonChangeWhereUniqueInput
  }

  /**
   * TeflonChange deleteMany
   */
  export type TeflonChangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeflonChanges to delete
     */
    where?: TeflonChangeWhereInput
  }

  /**
   * TeflonChange without action
   */
  export type TeflonChangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeflonChange
     */
    select?: TeflonChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeflonChangeInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    message: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    message: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    message: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    message: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      message: string
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model MachineOperation
   */

  export type AggregateMachineOperation = {
    _count: MachineOperationCountAggregateOutputType | null
    _avg: MachineOperationAvgAggregateOutputType | null
    _sum: MachineOperationSumAggregateOutputType | null
    _min: MachineOperationMinAggregateOutputType | null
    _max: MachineOperationMaxAggregateOutputType | null
  }

  export type MachineOperationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type MachineOperationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type MachineOperationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    status: string | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type MachineOperationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    status: string | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type MachineOperationCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    status: number
    startTime: number
    endTime: number
    createdAt: number
    _all: number
  }


  export type MachineOperationAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type MachineOperationSumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type MachineOperationMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    status?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type MachineOperationMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    status?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type MachineOperationCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    status?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    _all?: true
  }

  export type MachineOperationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MachineOperation to aggregate.
     */
    where?: MachineOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineOperations to fetch.
     */
    orderBy?: MachineOperationOrderByWithRelationInput | MachineOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MachineOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MachineOperations
    **/
    _count?: true | MachineOperationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MachineOperationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MachineOperationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MachineOperationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MachineOperationMaxAggregateInputType
  }

  export type GetMachineOperationAggregateType<T extends MachineOperationAggregateArgs> = {
        [P in keyof T & keyof AggregateMachineOperation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMachineOperation[P]>
      : GetScalarType<T[P], AggregateMachineOperation[P]>
  }




  export type MachineOperationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineOperationWhereInput
    orderBy?: MachineOperationOrderByWithAggregationInput | MachineOperationOrderByWithAggregationInput[]
    by: MachineOperationScalarFieldEnum[] | MachineOperationScalarFieldEnum
    having?: MachineOperationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MachineOperationCountAggregateInputType | true
    _avg?: MachineOperationAvgAggregateInputType
    _sum?: MachineOperationSumAggregateInputType
    _min?: MachineOperationMinAggregateInputType
    _max?: MachineOperationMaxAggregateInputType
  }

  export type MachineOperationGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    status: string
    startTime: Date
    endTime: Date | null
    createdAt: Date
    _count: MachineOperationCountAggregateOutputType | null
    _avg: MachineOperationAvgAggregateOutputType | null
    _sum: MachineOperationSumAggregateOutputType | null
    _min: MachineOperationMinAggregateOutputType | null
    _max: MachineOperationMaxAggregateOutputType | null
  }

  type GetMachineOperationGroupByPayload<T extends MachineOperationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MachineOperationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MachineOperationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MachineOperationGroupByOutputType[P]>
            : GetScalarType<T[P], MachineOperationGroupByOutputType[P]>
        }
      >
    >


  export type MachineOperationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machineOperation"]>

  export type MachineOperationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machineOperation"]>

  export type MachineOperationSelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
  }

  export type MachineOperationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type MachineOperationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $MachineOperationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MachineOperation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
      status: string
      startTime: Date
      endTime: Date | null
      createdAt: Date
    }, ExtArgs["result"]["machineOperation"]>
    composites: {}
  }

  type MachineOperationGetPayload<S extends boolean | null | undefined | MachineOperationDefaultArgs> = $Result.GetResult<Prisma.$MachineOperationPayload, S>

  type MachineOperationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MachineOperationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MachineOperationCountAggregateInputType | true
    }

  export interface MachineOperationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MachineOperation'], meta: { name: 'MachineOperation' } }
    /**
     * Find zero or one MachineOperation that matches the filter.
     * @param {MachineOperationFindUniqueArgs} args - Arguments to find a MachineOperation
     * @example
     * // Get one MachineOperation
     * const machineOperation = await prisma.machineOperation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MachineOperationFindUniqueArgs>(args: SelectSubset<T, MachineOperationFindUniqueArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MachineOperation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MachineOperationFindUniqueOrThrowArgs} args - Arguments to find a MachineOperation
     * @example
     * // Get one MachineOperation
     * const machineOperation = await prisma.machineOperation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MachineOperationFindUniqueOrThrowArgs>(args: SelectSubset<T, MachineOperationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MachineOperation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationFindFirstArgs} args - Arguments to find a MachineOperation
     * @example
     * // Get one MachineOperation
     * const machineOperation = await prisma.machineOperation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MachineOperationFindFirstArgs>(args?: SelectSubset<T, MachineOperationFindFirstArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MachineOperation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationFindFirstOrThrowArgs} args - Arguments to find a MachineOperation
     * @example
     * // Get one MachineOperation
     * const machineOperation = await prisma.machineOperation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MachineOperationFindFirstOrThrowArgs>(args?: SelectSubset<T, MachineOperationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MachineOperations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MachineOperations
     * const machineOperations = await prisma.machineOperation.findMany()
     * 
     * // Get first 10 MachineOperations
     * const machineOperations = await prisma.machineOperation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const machineOperationWithIdOnly = await prisma.machineOperation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MachineOperationFindManyArgs>(args?: SelectSubset<T, MachineOperationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MachineOperation.
     * @param {MachineOperationCreateArgs} args - Arguments to create a MachineOperation.
     * @example
     * // Create one MachineOperation
     * const MachineOperation = await prisma.machineOperation.create({
     *   data: {
     *     // ... data to create a MachineOperation
     *   }
     * })
     * 
     */
    create<T extends MachineOperationCreateArgs>(args: SelectSubset<T, MachineOperationCreateArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MachineOperations.
     * @param {MachineOperationCreateManyArgs} args - Arguments to create many MachineOperations.
     * @example
     * // Create many MachineOperations
     * const machineOperation = await prisma.machineOperation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MachineOperationCreateManyArgs>(args?: SelectSubset<T, MachineOperationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MachineOperations and returns the data saved in the database.
     * @param {MachineOperationCreateManyAndReturnArgs} args - Arguments to create many MachineOperations.
     * @example
     * // Create many MachineOperations
     * const machineOperation = await prisma.machineOperation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MachineOperations and only return the `id`
     * const machineOperationWithIdOnly = await prisma.machineOperation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MachineOperationCreateManyAndReturnArgs>(args?: SelectSubset<T, MachineOperationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MachineOperation.
     * @param {MachineOperationDeleteArgs} args - Arguments to delete one MachineOperation.
     * @example
     * // Delete one MachineOperation
     * const MachineOperation = await prisma.machineOperation.delete({
     *   where: {
     *     // ... filter to delete one MachineOperation
     *   }
     * })
     * 
     */
    delete<T extends MachineOperationDeleteArgs>(args: SelectSubset<T, MachineOperationDeleteArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MachineOperation.
     * @param {MachineOperationUpdateArgs} args - Arguments to update one MachineOperation.
     * @example
     * // Update one MachineOperation
     * const machineOperation = await prisma.machineOperation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MachineOperationUpdateArgs>(args: SelectSubset<T, MachineOperationUpdateArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MachineOperations.
     * @param {MachineOperationDeleteManyArgs} args - Arguments to filter MachineOperations to delete.
     * @example
     * // Delete a few MachineOperations
     * const { count } = await prisma.machineOperation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MachineOperationDeleteManyArgs>(args?: SelectSubset<T, MachineOperationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MachineOperations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MachineOperations
     * const machineOperation = await prisma.machineOperation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MachineOperationUpdateManyArgs>(args: SelectSubset<T, MachineOperationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MachineOperation.
     * @param {MachineOperationUpsertArgs} args - Arguments to update or create a MachineOperation.
     * @example
     * // Update or create a MachineOperation
     * const machineOperation = await prisma.machineOperation.upsert({
     *   create: {
     *     // ... data to create a MachineOperation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MachineOperation we want to update
     *   }
     * })
     */
    upsert<T extends MachineOperationUpsertArgs>(args: SelectSubset<T, MachineOperationUpsertArgs<ExtArgs>>): Prisma__MachineOperationClient<$Result.GetResult<Prisma.$MachineOperationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MachineOperations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationCountArgs} args - Arguments to filter MachineOperations to count.
     * @example
     * // Count the number of MachineOperations
     * const count = await prisma.machineOperation.count({
     *   where: {
     *     // ... the filter for the MachineOperations we want to count
     *   }
     * })
    **/
    count<T extends MachineOperationCountArgs>(
      args?: Subset<T, MachineOperationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MachineOperationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MachineOperation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MachineOperationAggregateArgs>(args: Subset<T, MachineOperationAggregateArgs>): Prisma.PrismaPromise<GetMachineOperationAggregateType<T>>

    /**
     * Group by MachineOperation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineOperationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MachineOperationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MachineOperationGroupByArgs['orderBy'] }
        : { orderBy?: MachineOperationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MachineOperationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMachineOperationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MachineOperation model
   */
  readonly fields: MachineOperationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MachineOperation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MachineOperationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MachineOperation model
   */ 
  interface MachineOperationFieldRefs {
    readonly id: FieldRef<"MachineOperation", 'Int'>
    readonly userId: FieldRef<"MachineOperation", 'Int'>
    readonly machineId: FieldRef<"MachineOperation", 'Int'>
    readonly status: FieldRef<"MachineOperation", 'String'>
    readonly startTime: FieldRef<"MachineOperation", 'DateTime'>
    readonly endTime: FieldRef<"MachineOperation", 'DateTime'>
    readonly createdAt: FieldRef<"MachineOperation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MachineOperation findUnique
   */
  export type MachineOperationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * Filter, which MachineOperation to fetch.
     */
    where: MachineOperationWhereUniqueInput
  }

  /**
   * MachineOperation findUniqueOrThrow
   */
  export type MachineOperationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * Filter, which MachineOperation to fetch.
     */
    where: MachineOperationWhereUniqueInput
  }

  /**
   * MachineOperation findFirst
   */
  export type MachineOperationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * Filter, which MachineOperation to fetch.
     */
    where?: MachineOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineOperations to fetch.
     */
    orderBy?: MachineOperationOrderByWithRelationInput | MachineOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MachineOperations.
     */
    cursor?: MachineOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MachineOperations.
     */
    distinct?: MachineOperationScalarFieldEnum | MachineOperationScalarFieldEnum[]
  }

  /**
   * MachineOperation findFirstOrThrow
   */
  export type MachineOperationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * Filter, which MachineOperation to fetch.
     */
    where?: MachineOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineOperations to fetch.
     */
    orderBy?: MachineOperationOrderByWithRelationInput | MachineOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MachineOperations.
     */
    cursor?: MachineOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MachineOperations.
     */
    distinct?: MachineOperationScalarFieldEnum | MachineOperationScalarFieldEnum[]
  }

  /**
   * MachineOperation findMany
   */
  export type MachineOperationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * Filter, which MachineOperations to fetch.
     */
    where?: MachineOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineOperations to fetch.
     */
    orderBy?: MachineOperationOrderByWithRelationInput | MachineOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MachineOperations.
     */
    cursor?: MachineOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineOperations.
     */
    skip?: number
    distinct?: MachineOperationScalarFieldEnum | MachineOperationScalarFieldEnum[]
  }

  /**
   * MachineOperation create
   */
  export type MachineOperationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * The data needed to create a MachineOperation.
     */
    data: XOR<MachineOperationCreateInput, MachineOperationUncheckedCreateInput>
  }

  /**
   * MachineOperation createMany
   */
  export type MachineOperationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MachineOperations.
     */
    data: MachineOperationCreateManyInput | MachineOperationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MachineOperation createManyAndReturn
   */
  export type MachineOperationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MachineOperations.
     */
    data: MachineOperationCreateManyInput | MachineOperationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MachineOperation update
   */
  export type MachineOperationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * The data needed to update a MachineOperation.
     */
    data: XOR<MachineOperationUpdateInput, MachineOperationUncheckedUpdateInput>
    /**
     * Choose, which MachineOperation to update.
     */
    where: MachineOperationWhereUniqueInput
  }

  /**
   * MachineOperation updateMany
   */
  export type MachineOperationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MachineOperations.
     */
    data: XOR<MachineOperationUpdateManyMutationInput, MachineOperationUncheckedUpdateManyInput>
    /**
     * Filter which MachineOperations to update
     */
    where?: MachineOperationWhereInput
  }

  /**
   * MachineOperation upsert
   */
  export type MachineOperationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * The filter to search for the MachineOperation to update in case it exists.
     */
    where: MachineOperationWhereUniqueInput
    /**
     * In case the MachineOperation found by the `where` argument doesn't exist, create a new MachineOperation with this data.
     */
    create: XOR<MachineOperationCreateInput, MachineOperationUncheckedCreateInput>
    /**
     * In case the MachineOperation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MachineOperationUpdateInput, MachineOperationUncheckedUpdateInput>
  }

  /**
   * MachineOperation delete
   */
  export type MachineOperationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
    /**
     * Filter which MachineOperation to delete.
     */
    where: MachineOperationWhereUniqueInput
  }

  /**
   * MachineOperation deleteMany
   */
  export type MachineOperationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MachineOperations to delete
     */
    where?: MachineOperationWhereInput
  }

  /**
   * MachineOperation without action
   */
  export type MachineOperationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineOperation
     */
    select?: MachineOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineOperationInclude<ExtArgs> | null
  }


  /**
   * Model UserDevice
   */

  export type AggregateUserDevice = {
    _count: UserDeviceCountAggregateOutputType | null
    _avg: UserDeviceAvgAggregateOutputType | null
    _sum: UserDeviceSumAggregateOutputType | null
    _min: UserDeviceMinAggregateOutputType | null
    _max: UserDeviceMaxAggregateOutputType | null
  }

  export type UserDeviceAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserDeviceSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserDeviceMinAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
  }

  export type UserDeviceMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
  }

  export type UserDeviceCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    _all: number
  }


  export type UserDeviceAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserDeviceSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserDeviceMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
  }

  export type UserDeviceMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
  }

  export type UserDeviceCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    _all?: true
  }

  export type UserDeviceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDevice to aggregate.
     */
    where?: UserDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDevices to fetch.
     */
    orderBy?: UserDeviceOrderByWithRelationInput | UserDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDevices
    **/
    _count?: true | UserDeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserDeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserDeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDeviceMaxAggregateInputType
  }

  export type GetUserDeviceAggregateType<T extends UserDeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDevice[P]>
      : GetScalarType<T[P], AggregateUserDevice[P]>
  }




  export type UserDeviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDeviceWhereInput
    orderBy?: UserDeviceOrderByWithAggregationInput | UserDeviceOrderByWithAggregationInput[]
    by: UserDeviceScalarFieldEnum[] | UserDeviceScalarFieldEnum
    having?: UserDeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDeviceCountAggregateInputType | true
    _avg?: UserDeviceAvgAggregateInputType
    _sum?: UserDeviceSumAggregateInputType
    _min?: UserDeviceMinAggregateInputType
    _max?: UserDeviceMaxAggregateInputType
  }

  export type UserDeviceGroupByOutputType = {
    id: number
    userId: number
    token: string
    _count: UserDeviceCountAggregateOutputType | null
    _avg: UserDeviceAvgAggregateOutputType | null
    _sum: UserDeviceSumAggregateOutputType | null
    _min: UserDeviceMinAggregateOutputType | null
    _max: UserDeviceMaxAggregateOutputType | null
  }

  type GetUserDeviceGroupByPayload<T extends UserDeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDeviceGroupByOutputType[P]>
            : GetScalarType<T[P], UserDeviceGroupByOutputType[P]>
        }
      >
    >


  export type UserDeviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDevice"]>

  export type UserDeviceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDevice"]>

  export type UserDeviceSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
  }

  export type UserDeviceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserDeviceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserDevicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDevice"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      token: string
    }, ExtArgs["result"]["userDevice"]>
    composites: {}
  }

  type UserDeviceGetPayload<S extends boolean | null | undefined | UserDeviceDefaultArgs> = $Result.GetResult<Prisma.$UserDevicePayload, S>

  type UserDeviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserDeviceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserDeviceCountAggregateInputType | true
    }

  export interface UserDeviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDevice'], meta: { name: 'UserDevice' } }
    /**
     * Find zero or one UserDevice that matches the filter.
     * @param {UserDeviceFindUniqueArgs} args - Arguments to find a UserDevice
     * @example
     * // Get one UserDevice
     * const userDevice = await prisma.userDevice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserDeviceFindUniqueArgs>(args: SelectSubset<T, UserDeviceFindUniqueArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserDevice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserDeviceFindUniqueOrThrowArgs} args - Arguments to find a UserDevice
     * @example
     * // Get one UserDevice
     * const userDevice = await prisma.userDevice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserDeviceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserDeviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserDevice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceFindFirstArgs} args - Arguments to find a UserDevice
     * @example
     * // Get one UserDevice
     * const userDevice = await prisma.userDevice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserDeviceFindFirstArgs>(args?: SelectSubset<T, UserDeviceFindFirstArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserDevice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceFindFirstOrThrowArgs} args - Arguments to find a UserDevice
     * @example
     * // Get one UserDevice
     * const userDevice = await prisma.userDevice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserDeviceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserDeviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserDevices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDevices
     * const userDevices = await prisma.userDevice.findMany()
     * 
     * // Get first 10 UserDevices
     * const userDevices = await prisma.userDevice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDeviceWithIdOnly = await prisma.userDevice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserDeviceFindManyArgs>(args?: SelectSubset<T, UserDeviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserDevice.
     * @param {UserDeviceCreateArgs} args - Arguments to create a UserDevice.
     * @example
     * // Create one UserDevice
     * const UserDevice = await prisma.userDevice.create({
     *   data: {
     *     // ... data to create a UserDevice
     *   }
     * })
     * 
     */
    create<T extends UserDeviceCreateArgs>(args: SelectSubset<T, UserDeviceCreateArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserDevices.
     * @param {UserDeviceCreateManyArgs} args - Arguments to create many UserDevices.
     * @example
     * // Create many UserDevices
     * const userDevice = await prisma.userDevice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserDeviceCreateManyArgs>(args?: SelectSubset<T, UserDeviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserDevices and returns the data saved in the database.
     * @param {UserDeviceCreateManyAndReturnArgs} args - Arguments to create many UserDevices.
     * @example
     * // Create many UserDevices
     * const userDevice = await prisma.userDevice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserDevices and only return the `id`
     * const userDeviceWithIdOnly = await prisma.userDevice.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserDeviceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserDeviceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserDevice.
     * @param {UserDeviceDeleteArgs} args - Arguments to delete one UserDevice.
     * @example
     * // Delete one UserDevice
     * const UserDevice = await prisma.userDevice.delete({
     *   where: {
     *     // ... filter to delete one UserDevice
     *   }
     * })
     * 
     */
    delete<T extends UserDeviceDeleteArgs>(args: SelectSubset<T, UserDeviceDeleteArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserDevice.
     * @param {UserDeviceUpdateArgs} args - Arguments to update one UserDevice.
     * @example
     * // Update one UserDevice
     * const userDevice = await prisma.userDevice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserDeviceUpdateArgs>(args: SelectSubset<T, UserDeviceUpdateArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserDevices.
     * @param {UserDeviceDeleteManyArgs} args - Arguments to filter UserDevices to delete.
     * @example
     * // Delete a few UserDevices
     * const { count } = await prisma.userDevice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeviceDeleteManyArgs>(args?: SelectSubset<T, UserDeviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDevices
     * const userDevice = await prisma.userDevice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserDeviceUpdateManyArgs>(args: SelectSubset<T, UserDeviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserDevice.
     * @param {UserDeviceUpsertArgs} args - Arguments to update or create a UserDevice.
     * @example
     * // Update or create a UserDevice
     * const userDevice = await prisma.userDevice.upsert({
     *   create: {
     *     // ... data to create a UserDevice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDevice we want to update
     *   }
     * })
     */
    upsert<T extends UserDeviceUpsertArgs>(args: SelectSubset<T, UserDeviceUpsertArgs<ExtArgs>>): Prisma__UserDeviceClient<$Result.GetResult<Prisma.$UserDevicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceCountArgs} args - Arguments to filter UserDevices to count.
     * @example
     * // Count the number of UserDevices
     * const count = await prisma.userDevice.count({
     *   where: {
     *     // ... the filter for the UserDevices we want to count
     *   }
     * })
    **/
    count<T extends UserDeviceCountArgs>(
      args?: Subset<T, UserDeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDeviceAggregateArgs>(args: Subset<T, UserDeviceAggregateArgs>): Prisma.PrismaPromise<GetUserDeviceAggregateType<T>>

    /**
     * Group by UserDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDeviceGroupByArgs['orderBy'] }
        : { orderBy?: UserDeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDevice model
   */
  readonly fields: UserDeviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDevice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDeviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserDevice model
   */ 
  interface UserDeviceFieldRefs {
    readonly id: FieldRef<"UserDevice", 'Int'>
    readonly userId: FieldRef<"UserDevice", 'Int'>
    readonly token: FieldRef<"UserDevice", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserDevice findUnique
   */
  export type UserDeviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * Filter, which UserDevice to fetch.
     */
    where: UserDeviceWhereUniqueInput
  }

  /**
   * UserDevice findUniqueOrThrow
   */
  export type UserDeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * Filter, which UserDevice to fetch.
     */
    where: UserDeviceWhereUniqueInput
  }

  /**
   * UserDevice findFirst
   */
  export type UserDeviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * Filter, which UserDevice to fetch.
     */
    where?: UserDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDevices to fetch.
     */
    orderBy?: UserDeviceOrderByWithRelationInput | UserDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDevices.
     */
    cursor?: UserDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDevices.
     */
    distinct?: UserDeviceScalarFieldEnum | UserDeviceScalarFieldEnum[]
  }

  /**
   * UserDevice findFirstOrThrow
   */
  export type UserDeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * Filter, which UserDevice to fetch.
     */
    where?: UserDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDevices to fetch.
     */
    orderBy?: UserDeviceOrderByWithRelationInput | UserDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDevices.
     */
    cursor?: UserDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDevices.
     */
    distinct?: UserDeviceScalarFieldEnum | UserDeviceScalarFieldEnum[]
  }

  /**
   * UserDevice findMany
   */
  export type UserDeviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * Filter, which UserDevices to fetch.
     */
    where?: UserDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDevices to fetch.
     */
    orderBy?: UserDeviceOrderByWithRelationInput | UserDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDevices.
     */
    cursor?: UserDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDevices.
     */
    skip?: number
    distinct?: UserDeviceScalarFieldEnum | UserDeviceScalarFieldEnum[]
  }

  /**
   * UserDevice create
   */
  export type UserDeviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDevice.
     */
    data: XOR<UserDeviceCreateInput, UserDeviceUncheckedCreateInput>
  }

  /**
   * UserDevice createMany
   */
  export type UserDeviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDevices.
     */
    data: UserDeviceCreateManyInput | UserDeviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDevice createManyAndReturn
   */
  export type UserDeviceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserDevices.
     */
    data: UserDeviceCreateManyInput | UserDeviceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDevice update
   */
  export type UserDeviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDevice.
     */
    data: XOR<UserDeviceUpdateInput, UserDeviceUncheckedUpdateInput>
    /**
     * Choose, which UserDevice to update.
     */
    where: UserDeviceWhereUniqueInput
  }

  /**
   * UserDevice updateMany
   */
  export type UserDeviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDevices.
     */
    data: XOR<UserDeviceUpdateManyMutationInput, UserDeviceUncheckedUpdateManyInput>
    /**
     * Filter which UserDevices to update
     */
    where?: UserDeviceWhereInput
  }

  /**
   * UserDevice upsert
   */
  export type UserDeviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDevice to update in case it exists.
     */
    where: UserDeviceWhereUniqueInput
    /**
     * In case the UserDevice found by the `where` argument doesn't exist, create a new UserDevice with this data.
     */
    create: XOR<UserDeviceCreateInput, UserDeviceUncheckedCreateInput>
    /**
     * In case the UserDevice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDeviceUpdateInput, UserDeviceUncheckedUpdateInput>
  }

  /**
   * UserDevice delete
   */
  export type UserDeviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
    /**
     * Filter which UserDevice to delete.
     */
    where: UserDeviceWhereUniqueInput
  }

  /**
   * UserDevice deleteMany
   */
  export type UserDeviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDevices to delete
     */
    where?: UserDeviceWhereInput
  }

  /**
   * UserDevice without action
   */
  export type UserDeviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDevice
     */
    select?: UserDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDeviceInclude<ExtArgs> | null
  }


  /**
   * Model Shift
   */

  export type AggregateShift = {
    _count: ShiftCountAggregateOutputType | null
    _avg: ShiftAvgAggregateOutputType | null
    _sum: ShiftSumAggregateOutputType | null
    _min: ShiftMinAggregateOutputType | null
    _max: ShiftMaxAggregateOutputType | null
  }

  export type ShiftAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShiftSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShiftMinAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShiftMaxAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShiftCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type ShiftAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShiftSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShiftMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShiftMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShiftCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type ShiftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shift to aggregate.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shifts
    **/
    _count?: true | ShiftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftMaxAggregateInputType
  }

  export type GetShiftAggregateType<T extends ShiftAggregateArgs> = {
        [P in keyof T & keyof AggregateShift]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShift[P]>
      : GetScalarType<T[P], AggregateShift[P]>
  }




  export type ShiftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftWhereInput
    orderBy?: ShiftOrderByWithAggregationInput | ShiftOrderByWithAggregationInput[]
    by: ShiftScalarFieldEnum[] | ShiftScalarFieldEnum
    having?: ShiftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftCountAggregateInputType | true
    _avg?: ShiftAvgAggregateInputType
    _sum?: ShiftSumAggregateInputType
    _min?: ShiftMinAggregateInputType
    _max?: ShiftMaxAggregateInputType
  }

  export type ShiftGroupByOutputType = {
    id: number
    userId: number
    _count: ShiftCountAggregateOutputType | null
    _avg: ShiftAvgAggregateOutputType | null
    _sum: ShiftSumAggregateOutputType | null
    _min: ShiftMinAggregateOutputType | null
    _max: ShiftMaxAggregateOutputType | null
  }

  type GetShiftGroupByPayload<T extends ShiftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftGroupByOutputType[P]>
        }
      >
    >


  export type ShiftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shift"]>

  export type ShiftSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shift"]>

  export type ShiftSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type ShiftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShiftIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShiftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shift"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
    }, ExtArgs["result"]["shift"]>
    composites: {}
  }

  type ShiftGetPayload<S extends boolean | null | undefined | ShiftDefaultArgs> = $Result.GetResult<Prisma.$ShiftPayload, S>

  type ShiftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShiftFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShiftCountAggregateInputType | true
    }

  export interface ShiftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shift'], meta: { name: 'Shift' } }
    /**
     * Find zero or one Shift that matches the filter.
     * @param {ShiftFindUniqueArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftFindUniqueArgs>(args: SelectSubset<T, ShiftFindUniqueArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shift that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShiftFindUniqueOrThrowArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shift that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindFirstArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftFindFirstArgs>(args?: SelectSubset<T, ShiftFindFirstArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shift that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindFirstOrThrowArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shifts
     * const shifts = await prisma.shift.findMany()
     * 
     * // Get first 10 Shifts
     * const shifts = await prisma.shift.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftWithIdOnly = await prisma.shift.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftFindManyArgs>(args?: SelectSubset<T, ShiftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shift.
     * @param {ShiftCreateArgs} args - Arguments to create a Shift.
     * @example
     * // Create one Shift
     * const Shift = await prisma.shift.create({
     *   data: {
     *     // ... data to create a Shift
     *   }
     * })
     * 
     */
    create<T extends ShiftCreateArgs>(args: SelectSubset<T, ShiftCreateArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shifts.
     * @param {ShiftCreateManyArgs} args - Arguments to create many Shifts.
     * @example
     * // Create many Shifts
     * const shift = await prisma.shift.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftCreateManyArgs>(args?: SelectSubset<T, ShiftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shifts and returns the data saved in the database.
     * @param {ShiftCreateManyAndReturnArgs} args - Arguments to create many Shifts.
     * @example
     * // Create many Shifts
     * const shift = await prisma.shift.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shifts and only return the `id`
     * const shiftWithIdOnly = await prisma.shift.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShiftCreateManyAndReturnArgs>(args?: SelectSubset<T, ShiftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Shift.
     * @param {ShiftDeleteArgs} args - Arguments to delete one Shift.
     * @example
     * // Delete one Shift
     * const Shift = await prisma.shift.delete({
     *   where: {
     *     // ... filter to delete one Shift
     *   }
     * })
     * 
     */
    delete<T extends ShiftDeleteArgs>(args: SelectSubset<T, ShiftDeleteArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shift.
     * @param {ShiftUpdateArgs} args - Arguments to update one Shift.
     * @example
     * // Update one Shift
     * const shift = await prisma.shift.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftUpdateArgs>(args: SelectSubset<T, ShiftUpdateArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shifts.
     * @param {ShiftDeleteManyArgs} args - Arguments to filter Shifts to delete.
     * @example
     * // Delete a few Shifts
     * const { count } = await prisma.shift.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftDeleteManyArgs>(args?: SelectSubset<T, ShiftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shifts
     * const shift = await prisma.shift.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftUpdateManyArgs>(args: SelectSubset<T, ShiftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shift.
     * @param {ShiftUpsertArgs} args - Arguments to update or create a Shift.
     * @example
     * // Update or create a Shift
     * const shift = await prisma.shift.upsert({
     *   create: {
     *     // ... data to create a Shift
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shift we want to update
     *   }
     * })
     */
    upsert<T extends ShiftUpsertArgs>(args: SelectSubset<T, ShiftUpsertArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftCountArgs} args - Arguments to filter Shifts to count.
     * @example
     * // Count the number of Shifts
     * const count = await prisma.shift.count({
     *   where: {
     *     // ... the filter for the Shifts we want to count
     *   }
     * })
    **/
    count<T extends ShiftCountArgs>(
      args?: Subset<T, ShiftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftAggregateArgs>(args: Subset<T, ShiftAggregateArgs>): Prisma.PrismaPromise<GetShiftAggregateType<T>>

    /**
     * Group by Shift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftGroupByArgs['orderBy'] }
        : { orderBy?: ShiftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shift model
   */
  readonly fields: ShiftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shift.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shift model
   */ 
  interface ShiftFieldRefs {
    readonly id: FieldRef<"Shift", 'Int'>
    readonly userId: FieldRef<"Shift", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Shift findUnique
   */
  export type ShiftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift findUniqueOrThrow
   */
  export type ShiftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift findFirst
   */
  export type ShiftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shifts.
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shifts.
     */
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Shift findFirstOrThrow
   */
  export type ShiftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shifts.
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shifts.
     */
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Shift findMany
   */
  export type ShiftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shifts to fetch.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shifts.
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Shift create
   */
  export type ShiftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * The data needed to create a Shift.
     */
    data: XOR<ShiftCreateInput, ShiftUncheckedCreateInput>
  }

  /**
   * Shift createMany
   */
  export type ShiftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shifts.
     */
    data: ShiftCreateManyInput | ShiftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shift createManyAndReturn
   */
  export type ShiftCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Shifts.
     */
    data: ShiftCreateManyInput | ShiftCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shift update
   */
  export type ShiftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * The data needed to update a Shift.
     */
    data: XOR<ShiftUpdateInput, ShiftUncheckedUpdateInput>
    /**
     * Choose, which Shift to update.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift updateMany
   */
  export type ShiftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shifts.
     */
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyInput>
    /**
     * Filter which Shifts to update
     */
    where?: ShiftWhereInput
  }

  /**
   * Shift upsert
   */
  export type ShiftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * The filter to search for the Shift to update in case it exists.
     */
    where: ShiftWhereUniqueInput
    /**
     * In case the Shift found by the `where` argument doesn't exist, create a new Shift with this data.
     */
    create: XOR<ShiftCreateInput, ShiftUncheckedCreateInput>
    /**
     * In case the Shift was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftUpdateInput, ShiftUncheckedUpdateInput>
  }

  /**
   * Shift delete
   */
  export type ShiftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter which Shift to delete.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift deleteMany
   */
  export type ShiftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shifts to delete
     */
    where?: ShiftWhereInput
  }

  /**
   * Shift without action
   */
  export type ShiftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    userId: number
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'Int'>
    readonly userId: FieldRef<"Report", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserPermissionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type UserPermissionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserPermissionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _avg?: UserPermissionAvgAggregateInputType
    _sum?: UserPermissionSumAggregateInputType
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: number
    userId: number
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */ 
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'Int'>
    readonly userId: FieldRef<"UserPermission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Model MachinePermission
   */

  export type AggregateMachinePermission = {
    _count: MachinePermissionCountAggregateOutputType | null
    _avg: MachinePermissionAvgAggregateOutputType | null
    _sum: MachinePermissionSumAggregateOutputType | null
    _min: MachinePermissionMinAggregateOutputType | null
    _max: MachinePermissionMaxAggregateOutputType | null
  }

  export type MachinePermissionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    grantedBy: number | null
  }

  export type MachinePermissionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    grantedBy: number | null
  }

  export type MachinePermissionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    canView: boolean | null
    canOperate: boolean | null
    canEdit: boolean | null
    grantedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MachinePermissionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    canView: boolean | null
    canOperate: boolean | null
    canEdit: boolean | null
    grantedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MachinePermissionCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    canView: number
    canOperate: number
    canEdit: number
    grantedBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MachinePermissionAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    grantedBy?: true
  }

  export type MachinePermissionSumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    grantedBy?: true
  }

  export type MachinePermissionMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    canView?: true
    canOperate?: true
    canEdit?: true
    grantedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MachinePermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    canView?: true
    canOperate?: true
    canEdit?: true
    grantedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MachinePermissionCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    canView?: true
    canOperate?: true
    canEdit?: true
    grantedBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MachinePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MachinePermission to aggregate.
     */
    where?: MachinePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachinePermissions to fetch.
     */
    orderBy?: MachinePermissionOrderByWithRelationInput | MachinePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MachinePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachinePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachinePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MachinePermissions
    **/
    _count?: true | MachinePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MachinePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MachinePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MachinePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MachinePermissionMaxAggregateInputType
  }

  export type GetMachinePermissionAggregateType<T extends MachinePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateMachinePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMachinePermission[P]>
      : GetScalarType<T[P], AggregateMachinePermission[P]>
  }




  export type MachinePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachinePermissionWhereInput
    orderBy?: MachinePermissionOrderByWithAggregationInput | MachinePermissionOrderByWithAggregationInput[]
    by: MachinePermissionScalarFieldEnum[] | MachinePermissionScalarFieldEnum
    having?: MachinePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MachinePermissionCountAggregateInputType | true
    _avg?: MachinePermissionAvgAggregateInputType
    _sum?: MachinePermissionSumAggregateInputType
    _min?: MachinePermissionMinAggregateInputType
    _max?: MachinePermissionMaxAggregateInputType
  }

  export type MachinePermissionGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    canView: boolean
    canOperate: boolean
    canEdit: boolean
    grantedBy: number | null
    createdAt: Date
    updatedAt: Date
    _count: MachinePermissionCountAggregateOutputType | null
    _avg: MachinePermissionAvgAggregateOutputType | null
    _sum: MachinePermissionSumAggregateOutputType | null
    _min: MachinePermissionMinAggregateOutputType | null
    _max: MachinePermissionMaxAggregateOutputType | null
  }

  type GetMachinePermissionGroupByPayload<T extends MachinePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MachinePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MachinePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MachinePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], MachinePermissionGroupByOutputType[P]>
        }
      >
    >


  export type MachinePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machinePermission"]>

  export type MachinePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machinePermission"]>

  export type MachinePermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MachinePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type MachinePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $MachinePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MachinePermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
      canView: boolean
      canOperate: boolean
      canEdit: boolean
      grantedBy: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["machinePermission"]>
    composites: {}
  }

  type MachinePermissionGetPayload<S extends boolean | null | undefined | MachinePermissionDefaultArgs> = $Result.GetResult<Prisma.$MachinePermissionPayload, S>

  type MachinePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MachinePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MachinePermissionCountAggregateInputType | true
    }

  export interface MachinePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MachinePermission'], meta: { name: 'MachinePermission' } }
    /**
     * Find zero or one MachinePermission that matches the filter.
     * @param {MachinePermissionFindUniqueArgs} args - Arguments to find a MachinePermission
     * @example
     * // Get one MachinePermission
     * const machinePermission = await prisma.machinePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MachinePermissionFindUniqueArgs>(args: SelectSubset<T, MachinePermissionFindUniqueArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MachinePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MachinePermissionFindUniqueOrThrowArgs} args - Arguments to find a MachinePermission
     * @example
     * // Get one MachinePermission
     * const machinePermission = await prisma.machinePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MachinePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, MachinePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MachinePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionFindFirstArgs} args - Arguments to find a MachinePermission
     * @example
     * // Get one MachinePermission
     * const machinePermission = await prisma.machinePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MachinePermissionFindFirstArgs>(args?: SelectSubset<T, MachinePermissionFindFirstArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MachinePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionFindFirstOrThrowArgs} args - Arguments to find a MachinePermission
     * @example
     * // Get one MachinePermission
     * const machinePermission = await prisma.machinePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MachinePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, MachinePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MachinePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MachinePermissions
     * const machinePermissions = await prisma.machinePermission.findMany()
     * 
     * // Get first 10 MachinePermissions
     * const machinePermissions = await prisma.machinePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const machinePermissionWithIdOnly = await prisma.machinePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MachinePermissionFindManyArgs>(args?: SelectSubset<T, MachinePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MachinePermission.
     * @param {MachinePermissionCreateArgs} args - Arguments to create a MachinePermission.
     * @example
     * // Create one MachinePermission
     * const MachinePermission = await prisma.machinePermission.create({
     *   data: {
     *     // ... data to create a MachinePermission
     *   }
     * })
     * 
     */
    create<T extends MachinePermissionCreateArgs>(args: SelectSubset<T, MachinePermissionCreateArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MachinePermissions.
     * @param {MachinePermissionCreateManyArgs} args - Arguments to create many MachinePermissions.
     * @example
     * // Create many MachinePermissions
     * const machinePermission = await prisma.machinePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MachinePermissionCreateManyArgs>(args?: SelectSubset<T, MachinePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MachinePermissions and returns the data saved in the database.
     * @param {MachinePermissionCreateManyAndReturnArgs} args - Arguments to create many MachinePermissions.
     * @example
     * // Create many MachinePermissions
     * const machinePermission = await prisma.machinePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MachinePermissions and only return the `id`
     * const machinePermissionWithIdOnly = await prisma.machinePermission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MachinePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, MachinePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MachinePermission.
     * @param {MachinePermissionDeleteArgs} args - Arguments to delete one MachinePermission.
     * @example
     * // Delete one MachinePermission
     * const MachinePermission = await prisma.machinePermission.delete({
     *   where: {
     *     // ... filter to delete one MachinePermission
     *   }
     * })
     * 
     */
    delete<T extends MachinePermissionDeleteArgs>(args: SelectSubset<T, MachinePermissionDeleteArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MachinePermission.
     * @param {MachinePermissionUpdateArgs} args - Arguments to update one MachinePermission.
     * @example
     * // Update one MachinePermission
     * const machinePermission = await prisma.machinePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MachinePermissionUpdateArgs>(args: SelectSubset<T, MachinePermissionUpdateArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MachinePermissions.
     * @param {MachinePermissionDeleteManyArgs} args - Arguments to filter MachinePermissions to delete.
     * @example
     * // Delete a few MachinePermissions
     * const { count } = await prisma.machinePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MachinePermissionDeleteManyArgs>(args?: SelectSubset<T, MachinePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MachinePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MachinePermissions
     * const machinePermission = await prisma.machinePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MachinePermissionUpdateManyArgs>(args: SelectSubset<T, MachinePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MachinePermission.
     * @param {MachinePermissionUpsertArgs} args - Arguments to update or create a MachinePermission.
     * @example
     * // Update or create a MachinePermission
     * const machinePermission = await prisma.machinePermission.upsert({
     *   create: {
     *     // ... data to create a MachinePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MachinePermission we want to update
     *   }
     * })
     */
    upsert<T extends MachinePermissionUpsertArgs>(args: SelectSubset<T, MachinePermissionUpsertArgs<ExtArgs>>): Prisma__MachinePermissionClient<$Result.GetResult<Prisma.$MachinePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MachinePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionCountArgs} args - Arguments to filter MachinePermissions to count.
     * @example
     * // Count the number of MachinePermissions
     * const count = await prisma.machinePermission.count({
     *   where: {
     *     // ... the filter for the MachinePermissions we want to count
     *   }
     * })
    **/
    count<T extends MachinePermissionCountArgs>(
      args?: Subset<T, MachinePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MachinePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MachinePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MachinePermissionAggregateArgs>(args: Subset<T, MachinePermissionAggregateArgs>): Prisma.PrismaPromise<GetMachinePermissionAggregateType<T>>

    /**
     * Group by MachinePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachinePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MachinePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MachinePermissionGroupByArgs['orderBy'] }
        : { orderBy?: MachinePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MachinePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMachinePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MachinePermission model
   */
  readonly fields: MachinePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MachinePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MachinePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MachinePermission model
   */ 
  interface MachinePermissionFieldRefs {
    readonly id: FieldRef<"MachinePermission", 'Int'>
    readonly userId: FieldRef<"MachinePermission", 'Int'>
    readonly machineId: FieldRef<"MachinePermission", 'Int'>
    readonly canView: FieldRef<"MachinePermission", 'Boolean'>
    readonly canOperate: FieldRef<"MachinePermission", 'Boolean'>
    readonly canEdit: FieldRef<"MachinePermission", 'Boolean'>
    readonly grantedBy: FieldRef<"MachinePermission", 'Int'>
    readonly createdAt: FieldRef<"MachinePermission", 'DateTime'>
    readonly updatedAt: FieldRef<"MachinePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MachinePermission findUnique
   */
  export type MachinePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * Filter, which MachinePermission to fetch.
     */
    where: MachinePermissionWhereUniqueInput
  }

  /**
   * MachinePermission findUniqueOrThrow
   */
  export type MachinePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * Filter, which MachinePermission to fetch.
     */
    where: MachinePermissionWhereUniqueInput
  }

  /**
   * MachinePermission findFirst
   */
  export type MachinePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * Filter, which MachinePermission to fetch.
     */
    where?: MachinePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachinePermissions to fetch.
     */
    orderBy?: MachinePermissionOrderByWithRelationInput | MachinePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MachinePermissions.
     */
    cursor?: MachinePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachinePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachinePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MachinePermissions.
     */
    distinct?: MachinePermissionScalarFieldEnum | MachinePermissionScalarFieldEnum[]
  }

  /**
   * MachinePermission findFirstOrThrow
   */
  export type MachinePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * Filter, which MachinePermission to fetch.
     */
    where?: MachinePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachinePermissions to fetch.
     */
    orderBy?: MachinePermissionOrderByWithRelationInput | MachinePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MachinePermissions.
     */
    cursor?: MachinePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachinePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachinePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MachinePermissions.
     */
    distinct?: MachinePermissionScalarFieldEnum | MachinePermissionScalarFieldEnum[]
  }

  /**
   * MachinePermission findMany
   */
  export type MachinePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * Filter, which MachinePermissions to fetch.
     */
    where?: MachinePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachinePermissions to fetch.
     */
    orderBy?: MachinePermissionOrderByWithRelationInput | MachinePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MachinePermissions.
     */
    cursor?: MachinePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachinePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachinePermissions.
     */
    skip?: number
    distinct?: MachinePermissionScalarFieldEnum | MachinePermissionScalarFieldEnum[]
  }

  /**
   * MachinePermission create
   */
  export type MachinePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a MachinePermission.
     */
    data: XOR<MachinePermissionCreateInput, MachinePermissionUncheckedCreateInput>
  }

  /**
   * MachinePermission createMany
   */
  export type MachinePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MachinePermissions.
     */
    data: MachinePermissionCreateManyInput | MachinePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MachinePermission createManyAndReturn
   */
  export type MachinePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MachinePermissions.
     */
    data: MachinePermissionCreateManyInput | MachinePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MachinePermission update
   */
  export type MachinePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a MachinePermission.
     */
    data: XOR<MachinePermissionUpdateInput, MachinePermissionUncheckedUpdateInput>
    /**
     * Choose, which MachinePermission to update.
     */
    where: MachinePermissionWhereUniqueInput
  }

  /**
   * MachinePermission updateMany
   */
  export type MachinePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MachinePermissions.
     */
    data: XOR<MachinePermissionUpdateManyMutationInput, MachinePermissionUncheckedUpdateManyInput>
    /**
     * Filter which MachinePermissions to update
     */
    where?: MachinePermissionWhereInput
  }

  /**
   * MachinePermission upsert
   */
  export type MachinePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the MachinePermission to update in case it exists.
     */
    where: MachinePermissionWhereUniqueInput
    /**
     * In case the MachinePermission found by the `where` argument doesn't exist, create a new MachinePermission with this data.
     */
    create: XOR<MachinePermissionCreateInput, MachinePermissionUncheckedCreateInput>
    /**
     * In case the MachinePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MachinePermissionUpdateInput, MachinePermissionUncheckedUpdateInput>
  }

  /**
   * MachinePermission delete
   */
  export type MachinePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
    /**
     * Filter which MachinePermission to delete.
     */
    where: MachinePermissionWhereUniqueInput
  }

  /**
   * MachinePermission deleteMany
   */
  export type MachinePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MachinePermissions to delete
     */
    where?: MachinePermissionWhereInput
  }

  /**
   * MachinePermission without action
   */
  export type MachinePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachinePermission
     */
    select?: MachinePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachinePermissionInclude<ExtArgs> | null
  }


  /**
   * Model MachineStatusHistory
   */

  export type AggregateMachineStatusHistory = {
    _count: MachineStatusHistoryCountAggregateOutputType | null
    _avg: MachineStatusHistoryAvgAggregateOutputType | null
    _sum: MachineStatusHistorySumAggregateOutputType | null
    _min: MachineStatusHistoryMinAggregateOutputType | null
    _max: MachineStatusHistoryMaxAggregateOutputType | null
  }

  export type MachineStatusHistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type MachineStatusHistorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type MachineStatusHistoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    status: string | null
    reason: string | null
    notes: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MachineStatusHistoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
    status: string | null
    reason: string | null
    notes: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MachineStatusHistoryCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    status: number
    reason: number
    notes: number
    timestamp: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MachineStatusHistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type MachineStatusHistorySumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type MachineStatusHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    status?: true
    reason?: true
    notes?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MachineStatusHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    status?: true
    reason?: true
    notes?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MachineStatusHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    status?: true
    reason?: true
    notes?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MachineStatusHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MachineStatusHistory to aggregate.
     */
    where?: MachineStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineStatusHistories to fetch.
     */
    orderBy?: MachineStatusHistoryOrderByWithRelationInput | MachineStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MachineStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MachineStatusHistories
    **/
    _count?: true | MachineStatusHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MachineStatusHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MachineStatusHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MachineStatusHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MachineStatusHistoryMaxAggregateInputType
  }

  export type GetMachineStatusHistoryAggregateType<T extends MachineStatusHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMachineStatusHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMachineStatusHistory[P]>
      : GetScalarType<T[P], AggregateMachineStatusHistory[P]>
  }




  export type MachineStatusHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineStatusHistoryWhereInput
    orderBy?: MachineStatusHistoryOrderByWithAggregationInput | MachineStatusHistoryOrderByWithAggregationInput[]
    by: MachineStatusHistoryScalarFieldEnum[] | MachineStatusHistoryScalarFieldEnum
    having?: MachineStatusHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MachineStatusHistoryCountAggregateInputType | true
    _avg?: MachineStatusHistoryAvgAggregateInputType
    _sum?: MachineStatusHistorySumAggregateInputType
    _min?: MachineStatusHistoryMinAggregateInputType
    _max?: MachineStatusHistoryMaxAggregateInputType
  }

  export type MachineStatusHistoryGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    status: string
    reason: string | null
    notes: string | null
    timestamp: Date
    createdAt: Date
    updatedAt: Date
    _count: MachineStatusHistoryCountAggregateOutputType | null
    _avg: MachineStatusHistoryAvgAggregateOutputType | null
    _sum: MachineStatusHistorySumAggregateOutputType | null
    _min: MachineStatusHistoryMinAggregateOutputType | null
    _max: MachineStatusHistoryMaxAggregateOutputType | null
  }

  type GetMachineStatusHistoryGroupByPayload<T extends MachineStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MachineStatusHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MachineStatusHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MachineStatusHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], MachineStatusHistoryGroupByOutputType[P]>
        }
      >
    >


  export type MachineStatusHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    status?: boolean
    reason?: boolean
    notes?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machineStatusHistory"]>

  export type MachineStatusHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    status?: boolean
    reason?: boolean
    notes?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machineStatusHistory"]>

  export type MachineStatusHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
    status?: boolean
    reason?: boolean
    notes?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MachineStatusHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type MachineStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $MachineStatusHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MachineStatusHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
      status: string
      reason: string | null
      notes: string | null
      timestamp: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["machineStatusHistory"]>
    composites: {}
  }

  type MachineStatusHistoryGetPayload<S extends boolean | null | undefined | MachineStatusHistoryDefaultArgs> = $Result.GetResult<Prisma.$MachineStatusHistoryPayload, S>

  type MachineStatusHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MachineStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MachineStatusHistoryCountAggregateInputType | true
    }

  export interface MachineStatusHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MachineStatusHistory'], meta: { name: 'MachineStatusHistory' } }
    /**
     * Find zero or one MachineStatusHistory that matches the filter.
     * @param {MachineStatusHistoryFindUniqueArgs} args - Arguments to find a MachineStatusHistory
     * @example
     * // Get one MachineStatusHistory
     * const machineStatusHistory = await prisma.machineStatusHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MachineStatusHistoryFindUniqueArgs>(args: SelectSubset<T, MachineStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MachineStatusHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MachineStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a MachineStatusHistory
     * @example
     * // Get one MachineStatusHistory
     * const machineStatusHistory = await prisma.machineStatusHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MachineStatusHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, MachineStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MachineStatusHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryFindFirstArgs} args - Arguments to find a MachineStatusHistory
     * @example
     * // Get one MachineStatusHistory
     * const machineStatusHistory = await prisma.machineStatusHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MachineStatusHistoryFindFirstArgs>(args?: SelectSubset<T, MachineStatusHistoryFindFirstArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MachineStatusHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a MachineStatusHistory
     * @example
     * // Get one MachineStatusHistory
     * const machineStatusHistory = await prisma.machineStatusHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MachineStatusHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, MachineStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MachineStatusHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MachineStatusHistories
     * const machineStatusHistories = await prisma.machineStatusHistory.findMany()
     * 
     * // Get first 10 MachineStatusHistories
     * const machineStatusHistories = await prisma.machineStatusHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const machineStatusHistoryWithIdOnly = await prisma.machineStatusHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MachineStatusHistoryFindManyArgs>(args?: SelectSubset<T, MachineStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MachineStatusHistory.
     * @param {MachineStatusHistoryCreateArgs} args - Arguments to create a MachineStatusHistory.
     * @example
     * // Create one MachineStatusHistory
     * const MachineStatusHistory = await prisma.machineStatusHistory.create({
     *   data: {
     *     // ... data to create a MachineStatusHistory
     *   }
     * })
     * 
     */
    create<T extends MachineStatusHistoryCreateArgs>(args: SelectSubset<T, MachineStatusHistoryCreateArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MachineStatusHistories.
     * @param {MachineStatusHistoryCreateManyArgs} args - Arguments to create many MachineStatusHistories.
     * @example
     * // Create many MachineStatusHistories
     * const machineStatusHistory = await prisma.machineStatusHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MachineStatusHistoryCreateManyArgs>(args?: SelectSubset<T, MachineStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MachineStatusHistories and returns the data saved in the database.
     * @param {MachineStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many MachineStatusHistories.
     * @example
     * // Create many MachineStatusHistories
     * const machineStatusHistory = await prisma.machineStatusHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MachineStatusHistories and only return the `id`
     * const machineStatusHistoryWithIdOnly = await prisma.machineStatusHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MachineStatusHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, MachineStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MachineStatusHistory.
     * @param {MachineStatusHistoryDeleteArgs} args - Arguments to delete one MachineStatusHistory.
     * @example
     * // Delete one MachineStatusHistory
     * const MachineStatusHistory = await prisma.machineStatusHistory.delete({
     *   where: {
     *     // ... filter to delete one MachineStatusHistory
     *   }
     * })
     * 
     */
    delete<T extends MachineStatusHistoryDeleteArgs>(args: SelectSubset<T, MachineStatusHistoryDeleteArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MachineStatusHistory.
     * @param {MachineStatusHistoryUpdateArgs} args - Arguments to update one MachineStatusHistory.
     * @example
     * // Update one MachineStatusHistory
     * const machineStatusHistory = await prisma.machineStatusHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MachineStatusHistoryUpdateArgs>(args: SelectSubset<T, MachineStatusHistoryUpdateArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MachineStatusHistories.
     * @param {MachineStatusHistoryDeleteManyArgs} args - Arguments to filter MachineStatusHistories to delete.
     * @example
     * // Delete a few MachineStatusHistories
     * const { count } = await prisma.machineStatusHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MachineStatusHistoryDeleteManyArgs>(args?: SelectSubset<T, MachineStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MachineStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MachineStatusHistories
     * const machineStatusHistory = await prisma.machineStatusHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MachineStatusHistoryUpdateManyArgs>(args: SelectSubset<T, MachineStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MachineStatusHistory.
     * @param {MachineStatusHistoryUpsertArgs} args - Arguments to update or create a MachineStatusHistory.
     * @example
     * // Update or create a MachineStatusHistory
     * const machineStatusHistory = await prisma.machineStatusHistory.upsert({
     *   create: {
     *     // ... data to create a MachineStatusHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MachineStatusHistory we want to update
     *   }
     * })
     */
    upsert<T extends MachineStatusHistoryUpsertArgs>(args: SelectSubset<T, MachineStatusHistoryUpsertArgs<ExtArgs>>): Prisma__MachineStatusHistoryClient<$Result.GetResult<Prisma.$MachineStatusHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MachineStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryCountArgs} args - Arguments to filter MachineStatusHistories to count.
     * @example
     * // Count the number of MachineStatusHistories
     * const count = await prisma.machineStatusHistory.count({
     *   where: {
     *     // ... the filter for the MachineStatusHistories we want to count
     *   }
     * })
    **/
    count<T extends MachineStatusHistoryCountArgs>(
      args?: Subset<T, MachineStatusHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MachineStatusHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MachineStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MachineStatusHistoryAggregateArgs>(args: Subset<T, MachineStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetMachineStatusHistoryAggregateType<T>>

    /**
     * Group by MachineStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineStatusHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MachineStatusHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MachineStatusHistoryGroupByArgs['orderBy'] }
        : { orderBy?: MachineStatusHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MachineStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMachineStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MachineStatusHistory model
   */
  readonly fields: MachineStatusHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MachineStatusHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MachineStatusHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MachineStatusHistory model
   */ 
  interface MachineStatusHistoryFieldRefs {
    readonly id: FieldRef<"MachineStatusHistory", 'Int'>
    readonly userId: FieldRef<"MachineStatusHistory", 'Int'>
    readonly machineId: FieldRef<"MachineStatusHistory", 'Int'>
    readonly status: FieldRef<"MachineStatusHistory", 'String'>
    readonly reason: FieldRef<"MachineStatusHistory", 'String'>
    readonly notes: FieldRef<"MachineStatusHistory", 'String'>
    readonly timestamp: FieldRef<"MachineStatusHistory", 'DateTime'>
    readonly createdAt: FieldRef<"MachineStatusHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"MachineStatusHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MachineStatusHistory findUnique
   */
  export type MachineStatusHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MachineStatusHistory to fetch.
     */
    where: MachineStatusHistoryWhereUniqueInput
  }

  /**
   * MachineStatusHistory findUniqueOrThrow
   */
  export type MachineStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MachineStatusHistory to fetch.
     */
    where: MachineStatusHistoryWhereUniqueInput
  }

  /**
   * MachineStatusHistory findFirst
   */
  export type MachineStatusHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MachineStatusHistory to fetch.
     */
    where?: MachineStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineStatusHistories to fetch.
     */
    orderBy?: MachineStatusHistoryOrderByWithRelationInput | MachineStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MachineStatusHistories.
     */
    cursor?: MachineStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MachineStatusHistories.
     */
    distinct?: MachineStatusHistoryScalarFieldEnum | MachineStatusHistoryScalarFieldEnum[]
  }

  /**
   * MachineStatusHistory findFirstOrThrow
   */
  export type MachineStatusHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MachineStatusHistory to fetch.
     */
    where?: MachineStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineStatusHistories to fetch.
     */
    orderBy?: MachineStatusHistoryOrderByWithRelationInput | MachineStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MachineStatusHistories.
     */
    cursor?: MachineStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MachineStatusHistories.
     */
    distinct?: MachineStatusHistoryScalarFieldEnum | MachineStatusHistoryScalarFieldEnum[]
  }

  /**
   * MachineStatusHistory findMany
   */
  export type MachineStatusHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MachineStatusHistories to fetch.
     */
    where?: MachineStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MachineStatusHistories to fetch.
     */
    orderBy?: MachineStatusHistoryOrderByWithRelationInput | MachineStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MachineStatusHistories.
     */
    cursor?: MachineStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MachineStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MachineStatusHistories.
     */
    skip?: number
    distinct?: MachineStatusHistoryScalarFieldEnum | MachineStatusHistoryScalarFieldEnum[]
  }

  /**
   * MachineStatusHistory create
   */
  export type MachineStatusHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MachineStatusHistory.
     */
    data: XOR<MachineStatusHistoryCreateInput, MachineStatusHistoryUncheckedCreateInput>
  }

  /**
   * MachineStatusHistory createMany
   */
  export type MachineStatusHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MachineStatusHistories.
     */
    data: MachineStatusHistoryCreateManyInput | MachineStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MachineStatusHistory createManyAndReturn
   */
  export type MachineStatusHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MachineStatusHistories.
     */
    data: MachineStatusHistoryCreateManyInput | MachineStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MachineStatusHistory update
   */
  export type MachineStatusHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MachineStatusHistory.
     */
    data: XOR<MachineStatusHistoryUpdateInput, MachineStatusHistoryUncheckedUpdateInput>
    /**
     * Choose, which MachineStatusHistory to update.
     */
    where: MachineStatusHistoryWhereUniqueInput
  }

  /**
   * MachineStatusHistory updateMany
   */
  export type MachineStatusHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MachineStatusHistories.
     */
    data: XOR<MachineStatusHistoryUpdateManyMutationInput, MachineStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which MachineStatusHistories to update
     */
    where?: MachineStatusHistoryWhereInput
  }

  /**
   * MachineStatusHistory upsert
   */
  export type MachineStatusHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MachineStatusHistory to update in case it exists.
     */
    where: MachineStatusHistoryWhereUniqueInput
    /**
     * In case the MachineStatusHistory found by the `where` argument doesn't exist, create a new MachineStatusHistory with this data.
     */
    create: XOR<MachineStatusHistoryCreateInput, MachineStatusHistoryUncheckedCreateInput>
    /**
     * In case the MachineStatusHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MachineStatusHistoryUpdateInput, MachineStatusHistoryUncheckedUpdateInput>
  }

  /**
   * MachineStatusHistory delete
   */
  export type MachineStatusHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter which MachineStatusHistory to delete.
     */
    where: MachineStatusHistoryWhereUniqueInput
  }

  /**
   * MachineStatusHistory deleteMany
   */
  export type MachineStatusHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MachineStatusHistories to delete
     */
    where?: MachineStatusHistoryWhereInput
  }

  /**
   * MachineStatusHistory without action
   */
  export type MachineStatusHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineStatusHistory
     */
    select?: MachineStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineStatusHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ProductionData
   */

  export type AggregateProductionData = {
    _count: ProductionDataCountAggregateOutputType | null
    _avg: ProductionDataAvgAggregateOutputType | null
    _sum: ProductionDataSumAggregateOutputType | null
    _min: ProductionDataMinAggregateOutputType | null
    _max: ProductionDataMaxAggregateOutputType | null
  }

  export type ProductionDataAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ProductionDataSumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ProductionDataMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ProductionDataMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ProductionDataCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    _all: number
  }


  export type ProductionDataAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ProductionDataSumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ProductionDataMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ProductionDataMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ProductionDataCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    _all?: true
  }

  export type ProductionDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductionData to aggregate.
     */
    where?: ProductionDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionData to fetch.
     */
    orderBy?: ProductionDataOrderByWithRelationInput | ProductionDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductionDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductionData
    **/
    _count?: true | ProductionDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductionDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductionDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductionDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductionDataMaxAggregateInputType
  }

  export type GetProductionDataAggregateType<T extends ProductionDataAggregateArgs> = {
        [P in keyof T & keyof AggregateProductionData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductionData[P]>
      : GetScalarType<T[P], AggregateProductionData[P]>
  }




  export type ProductionDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionDataWhereInput
    orderBy?: ProductionDataOrderByWithAggregationInput | ProductionDataOrderByWithAggregationInput[]
    by: ProductionDataScalarFieldEnum[] | ProductionDataScalarFieldEnum
    having?: ProductionDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductionDataCountAggregateInputType | true
    _avg?: ProductionDataAvgAggregateInputType
    _sum?: ProductionDataSumAggregateInputType
    _min?: ProductionDataMinAggregateInputType
    _max?: ProductionDataMaxAggregateInputType
  }

  export type ProductionDataGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    _count: ProductionDataCountAggregateOutputType | null
    _avg: ProductionDataAvgAggregateOutputType | null
    _sum: ProductionDataSumAggregateOutputType | null
    _min: ProductionDataMinAggregateOutputType | null
    _max: ProductionDataMaxAggregateOutputType | null
  }

  type GetProductionDataGroupByPayload<T extends ProductionDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductionDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductionDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductionDataGroupByOutputType[P]>
            : GetScalarType<T[P], ProductionDataGroupByOutputType[P]>
        }
      >
    >


  export type ProductionDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionData"]>

  export type ProductionDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionData"]>

  export type ProductionDataSelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
  }

  export type ProductionDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type ProductionDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $ProductionDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductionData"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
    }, ExtArgs["result"]["productionData"]>
    composites: {}
  }

  type ProductionDataGetPayload<S extends boolean | null | undefined | ProductionDataDefaultArgs> = $Result.GetResult<Prisma.$ProductionDataPayload, S>

  type ProductionDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductionDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductionDataCountAggregateInputType | true
    }

  export interface ProductionDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductionData'], meta: { name: 'ProductionData' } }
    /**
     * Find zero or one ProductionData that matches the filter.
     * @param {ProductionDataFindUniqueArgs} args - Arguments to find a ProductionData
     * @example
     * // Get one ProductionData
     * const productionData = await prisma.productionData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductionDataFindUniqueArgs>(args: SelectSubset<T, ProductionDataFindUniqueArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProductionData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductionDataFindUniqueOrThrowArgs} args - Arguments to find a ProductionData
     * @example
     * // Get one ProductionData
     * const productionData = await prisma.productionData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductionDataFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductionDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProductionData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataFindFirstArgs} args - Arguments to find a ProductionData
     * @example
     * // Get one ProductionData
     * const productionData = await prisma.productionData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductionDataFindFirstArgs>(args?: SelectSubset<T, ProductionDataFindFirstArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProductionData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataFindFirstOrThrowArgs} args - Arguments to find a ProductionData
     * @example
     * // Get one ProductionData
     * const productionData = await prisma.productionData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductionDataFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductionDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProductionData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductionData
     * const productionData = await prisma.productionData.findMany()
     * 
     * // Get first 10 ProductionData
     * const productionData = await prisma.productionData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productionDataWithIdOnly = await prisma.productionData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductionDataFindManyArgs>(args?: SelectSubset<T, ProductionDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProductionData.
     * @param {ProductionDataCreateArgs} args - Arguments to create a ProductionData.
     * @example
     * // Create one ProductionData
     * const ProductionData = await prisma.productionData.create({
     *   data: {
     *     // ... data to create a ProductionData
     *   }
     * })
     * 
     */
    create<T extends ProductionDataCreateArgs>(args: SelectSubset<T, ProductionDataCreateArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProductionData.
     * @param {ProductionDataCreateManyArgs} args - Arguments to create many ProductionData.
     * @example
     * // Create many ProductionData
     * const productionData = await prisma.productionData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductionDataCreateManyArgs>(args?: SelectSubset<T, ProductionDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductionData and returns the data saved in the database.
     * @param {ProductionDataCreateManyAndReturnArgs} args - Arguments to create many ProductionData.
     * @example
     * // Create many ProductionData
     * const productionData = await prisma.productionData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductionData and only return the `id`
     * const productionDataWithIdOnly = await prisma.productionData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductionDataCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductionDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProductionData.
     * @param {ProductionDataDeleteArgs} args - Arguments to delete one ProductionData.
     * @example
     * // Delete one ProductionData
     * const ProductionData = await prisma.productionData.delete({
     *   where: {
     *     // ... filter to delete one ProductionData
     *   }
     * })
     * 
     */
    delete<T extends ProductionDataDeleteArgs>(args: SelectSubset<T, ProductionDataDeleteArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProductionData.
     * @param {ProductionDataUpdateArgs} args - Arguments to update one ProductionData.
     * @example
     * // Update one ProductionData
     * const productionData = await prisma.productionData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductionDataUpdateArgs>(args: SelectSubset<T, ProductionDataUpdateArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProductionData.
     * @param {ProductionDataDeleteManyArgs} args - Arguments to filter ProductionData to delete.
     * @example
     * // Delete a few ProductionData
     * const { count } = await prisma.productionData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductionDataDeleteManyArgs>(args?: SelectSubset<T, ProductionDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductionData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductionData
     * const productionData = await prisma.productionData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductionDataUpdateManyArgs>(args: SelectSubset<T, ProductionDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductionData.
     * @param {ProductionDataUpsertArgs} args - Arguments to update or create a ProductionData.
     * @example
     * // Update or create a ProductionData
     * const productionData = await prisma.productionData.upsert({
     *   create: {
     *     // ... data to create a ProductionData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductionData we want to update
     *   }
     * })
     */
    upsert<T extends ProductionDataUpsertArgs>(args: SelectSubset<T, ProductionDataUpsertArgs<ExtArgs>>): Prisma__ProductionDataClient<$Result.GetResult<Prisma.$ProductionDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProductionData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataCountArgs} args - Arguments to filter ProductionData to count.
     * @example
     * // Count the number of ProductionData
     * const count = await prisma.productionData.count({
     *   where: {
     *     // ... the filter for the ProductionData we want to count
     *   }
     * })
    **/
    count<T extends ProductionDataCountArgs>(
      args?: Subset<T, ProductionDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductionDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductionData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductionDataAggregateArgs>(args: Subset<T, ProductionDataAggregateArgs>): Prisma.PrismaPromise<GetProductionDataAggregateType<T>>

    /**
     * Group by ProductionData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductionDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductionDataGroupByArgs['orderBy'] }
        : { orderBy?: ProductionDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductionDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductionDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductionData model
   */
  readonly fields: ProductionDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductionData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductionDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductionData model
   */ 
  interface ProductionDataFieldRefs {
    readonly id: FieldRef<"ProductionData", 'Int'>
    readonly userId: FieldRef<"ProductionData", 'Int'>
    readonly machineId: FieldRef<"ProductionData", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductionData findUnique
   */
  export type ProductionDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * Filter, which ProductionData to fetch.
     */
    where: ProductionDataWhereUniqueInput
  }

  /**
   * ProductionData findUniqueOrThrow
   */
  export type ProductionDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * Filter, which ProductionData to fetch.
     */
    where: ProductionDataWhereUniqueInput
  }

  /**
   * ProductionData findFirst
   */
  export type ProductionDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * Filter, which ProductionData to fetch.
     */
    where?: ProductionDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionData to fetch.
     */
    orderBy?: ProductionDataOrderByWithRelationInput | ProductionDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductionData.
     */
    cursor?: ProductionDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductionData.
     */
    distinct?: ProductionDataScalarFieldEnum | ProductionDataScalarFieldEnum[]
  }

  /**
   * ProductionData findFirstOrThrow
   */
  export type ProductionDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * Filter, which ProductionData to fetch.
     */
    where?: ProductionDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionData to fetch.
     */
    orderBy?: ProductionDataOrderByWithRelationInput | ProductionDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductionData.
     */
    cursor?: ProductionDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductionData.
     */
    distinct?: ProductionDataScalarFieldEnum | ProductionDataScalarFieldEnum[]
  }

  /**
   * ProductionData findMany
   */
  export type ProductionDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * Filter, which ProductionData to fetch.
     */
    where?: ProductionDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionData to fetch.
     */
    orderBy?: ProductionDataOrderByWithRelationInput | ProductionDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductionData.
     */
    cursor?: ProductionDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionData.
     */
    skip?: number
    distinct?: ProductionDataScalarFieldEnum | ProductionDataScalarFieldEnum[]
  }

  /**
   * ProductionData create
   */
  export type ProductionDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductionData.
     */
    data: XOR<ProductionDataCreateInput, ProductionDataUncheckedCreateInput>
  }

  /**
   * ProductionData createMany
   */
  export type ProductionDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductionData.
     */
    data: ProductionDataCreateManyInput | ProductionDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductionData createManyAndReturn
   */
  export type ProductionDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProductionData.
     */
    data: ProductionDataCreateManyInput | ProductionDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductionData update
   */
  export type ProductionDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductionData.
     */
    data: XOR<ProductionDataUpdateInput, ProductionDataUncheckedUpdateInput>
    /**
     * Choose, which ProductionData to update.
     */
    where: ProductionDataWhereUniqueInput
  }

  /**
   * ProductionData updateMany
   */
  export type ProductionDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductionData.
     */
    data: XOR<ProductionDataUpdateManyMutationInput, ProductionDataUncheckedUpdateManyInput>
    /**
     * Filter which ProductionData to update
     */
    where?: ProductionDataWhereInput
  }

  /**
   * ProductionData upsert
   */
  export type ProductionDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductionData to update in case it exists.
     */
    where: ProductionDataWhereUniqueInput
    /**
     * In case the ProductionData found by the `where` argument doesn't exist, create a new ProductionData with this data.
     */
    create: XOR<ProductionDataCreateInput, ProductionDataUncheckedCreateInput>
    /**
     * In case the ProductionData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductionDataUpdateInput, ProductionDataUncheckedUpdateInput>
  }

  /**
   * ProductionData delete
   */
  export type ProductionDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
    /**
     * Filter which ProductionData to delete.
     */
    where: ProductionDataWhereUniqueInput
  }

  /**
   * ProductionData deleteMany
   */
  export type ProductionDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductionData to delete
     */
    where?: ProductionDataWhereInput
  }

  /**
   * ProductionData without action
   */
  export type ProductionDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionData
     */
    select?: ProductionDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionDataInclude<ExtArgs> | null
  }


  /**
   * Model ArchiveData
   */

  export type AggregateArchiveData = {
    _count: ArchiveDataCountAggregateOutputType | null
    _avg: ArchiveDataAvgAggregateOutputType | null
    _sum: ArchiveDataSumAggregateOutputType | null
    _min: ArchiveDataMinAggregateOutputType | null
    _max: ArchiveDataMaxAggregateOutputType | null
  }

  export type ArchiveDataAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ArchiveDataSumAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ArchiveDataMinAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ArchiveDataMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    machineId: number | null
  }

  export type ArchiveDataCountAggregateOutputType = {
    id: number
    userId: number
    machineId: number
    _all: number
  }


  export type ArchiveDataAvgAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ArchiveDataSumAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ArchiveDataMinAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ArchiveDataMaxAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
  }

  export type ArchiveDataCountAggregateInputType = {
    id?: true
    userId?: true
    machineId?: true
    _all?: true
  }

  export type ArchiveDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchiveData to aggregate.
     */
    where?: ArchiveDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveData to fetch.
     */
    orderBy?: ArchiveDataOrderByWithRelationInput | ArchiveDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchiveDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchiveData
    **/
    _count?: true | ArchiveDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArchiveDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArchiveDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchiveDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchiveDataMaxAggregateInputType
  }

  export type GetArchiveDataAggregateType<T extends ArchiveDataAggregateArgs> = {
        [P in keyof T & keyof AggregateArchiveData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchiveData[P]>
      : GetScalarType<T[P], AggregateArchiveData[P]>
  }




  export type ArchiveDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchiveDataWhereInput
    orderBy?: ArchiveDataOrderByWithAggregationInput | ArchiveDataOrderByWithAggregationInput[]
    by: ArchiveDataScalarFieldEnum[] | ArchiveDataScalarFieldEnum
    having?: ArchiveDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchiveDataCountAggregateInputType | true
    _avg?: ArchiveDataAvgAggregateInputType
    _sum?: ArchiveDataSumAggregateInputType
    _min?: ArchiveDataMinAggregateInputType
    _max?: ArchiveDataMaxAggregateInputType
  }

  export type ArchiveDataGroupByOutputType = {
    id: number
    userId: number
    machineId: number
    _count: ArchiveDataCountAggregateOutputType | null
    _avg: ArchiveDataAvgAggregateOutputType | null
    _sum: ArchiveDataSumAggregateOutputType | null
    _min: ArchiveDataMinAggregateOutputType | null
    _max: ArchiveDataMaxAggregateOutputType | null
  }

  type GetArchiveDataGroupByPayload<T extends ArchiveDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchiveDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchiveDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchiveDataGroupByOutputType[P]>
            : GetScalarType<T[P], ArchiveDataGroupByOutputType[P]>
        }
      >
    >


  export type ArchiveDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["archiveData"]>

  export type ArchiveDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["archiveData"]>

  export type ArchiveDataSelectScalar = {
    id?: boolean
    userId?: boolean
    machineId?: boolean
  }

  export type ArchiveDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type ArchiveDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $ArchiveDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchiveData"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      machineId: number
    }, ExtArgs["result"]["archiveData"]>
    composites: {}
  }

  type ArchiveDataGetPayload<S extends boolean | null | undefined | ArchiveDataDefaultArgs> = $Result.GetResult<Prisma.$ArchiveDataPayload, S>

  type ArchiveDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchiveDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchiveDataCountAggregateInputType | true
    }

  export interface ArchiveDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchiveData'], meta: { name: 'ArchiveData' } }
    /**
     * Find zero or one ArchiveData that matches the filter.
     * @param {ArchiveDataFindUniqueArgs} args - Arguments to find a ArchiveData
     * @example
     * // Get one ArchiveData
     * const archiveData = await prisma.archiveData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchiveDataFindUniqueArgs>(args: SelectSubset<T, ArchiveDataFindUniqueArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchiveData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchiveDataFindUniqueOrThrowArgs} args - Arguments to find a ArchiveData
     * @example
     * // Get one ArchiveData
     * const archiveData = await prisma.archiveData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchiveDataFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchiveDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchiveData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataFindFirstArgs} args - Arguments to find a ArchiveData
     * @example
     * // Get one ArchiveData
     * const archiveData = await prisma.archiveData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchiveDataFindFirstArgs>(args?: SelectSubset<T, ArchiveDataFindFirstArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchiveData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataFindFirstOrThrowArgs} args - Arguments to find a ArchiveData
     * @example
     * // Get one ArchiveData
     * const archiveData = await prisma.archiveData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchiveDataFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchiveDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchiveData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchiveData
     * const archiveData = await prisma.archiveData.findMany()
     * 
     * // Get first 10 ArchiveData
     * const archiveData = await prisma.archiveData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const archiveDataWithIdOnly = await prisma.archiveData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArchiveDataFindManyArgs>(args?: SelectSubset<T, ArchiveDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchiveData.
     * @param {ArchiveDataCreateArgs} args - Arguments to create a ArchiveData.
     * @example
     * // Create one ArchiveData
     * const ArchiveData = await prisma.archiveData.create({
     *   data: {
     *     // ... data to create a ArchiveData
     *   }
     * })
     * 
     */
    create<T extends ArchiveDataCreateArgs>(args: SelectSubset<T, ArchiveDataCreateArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchiveData.
     * @param {ArchiveDataCreateManyArgs} args - Arguments to create many ArchiveData.
     * @example
     * // Create many ArchiveData
     * const archiveData = await prisma.archiveData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchiveDataCreateManyArgs>(args?: SelectSubset<T, ArchiveDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArchiveData and returns the data saved in the database.
     * @param {ArchiveDataCreateManyAndReturnArgs} args - Arguments to create many ArchiveData.
     * @example
     * // Create many ArchiveData
     * const archiveData = await prisma.archiveData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArchiveData and only return the `id`
     * const archiveDataWithIdOnly = await prisma.archiveData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArchiveDataCreateManyAndReturnArgs>(args?: SelectSubset<T, ArchiveDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ArchiveData.
     * @param {ArchiveDataDeleteArgs} args - Arguments to delete one ArchiveData.
     * @example
     * // Delete one ArchiveData
     * const ArchiveData = await prisma.archiveData.delete({
     *   where: {
     *     // ... filter to delete one ArchiveData
     *   }
     * })
     * 
     */
    delete<T extends ArchiveDataDeleteArgs>(args: SelectSubset<T, ArchiveDataDeleteArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchiveData.
     * @param {ArchiveDataUpdateArgs} args - Arguments to update one ArchiveData.
     * @example
     * // Update one ArchiveData
     * const archiveData = await prisma.archiveData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchiveDataUpdateArgs>(args: SelectSubset<T, ArchiveDataUpdateArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchiveData.
     * @param {ArchiveDataDeleteManyArgs} args - Arguments to filter ArchiveData to delete.
     * @example
     * // Delete a few ArchiveData
     * const { count } = await prisma.archiveData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchiveDataDeleteManyArgs>(args?: SelectSubset<T, ArchiveDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchiveData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchiveData
     * const archiveData = await prisma.archiveData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchiveDataUpdateManyArgs>(args: SelectSubset<T, ArchiveDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchiveData.
     * @param {ArchiveDataUpsertArgs} args - Arguments to update or create a ArchiveData.
     * @example
     * // Update or create a ArchiveData
     * const archiveData = await prisma.archiveData.upsert({
     *   create: {
     *     // ... data to create a ArchiveData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchiveData we want to update
     *   }
     * })
     */
    upsert<T extends ArchiveDataUpsertArgs>(args: SelectSubset<T, ArchiveDataUpsertArgs<ExtArgs>>): Prisma__ArchiveDataClient<$Result.GetResult<Prisma.$ArchiveDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchiveData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataCountArgs} args - Arguments to filter ArchiveData to count.
     * @example
     * // Count the number of ArchiveData
     * const count = await prisma.archiveData.count({
     *   where: {
     *     // ... the filter for the ArchiveData we want to count
     *   }
     * })
    **/
    count<T extends ArchiveDataCountArgs>(
      args?: Subset<T, ArchiveDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchiveDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchiveData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchiveDataAggregateArgs>(args: Subset<T, ArchiveDataAggregateArgs>): Prisma.PrismaPromise<GetArchiveDataAggregateType<T>>

    /**
     * Group by ArchiveData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchiveDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchiveDataGroupByArgs['orderBy'] }
        : { orderBy?: ArchiveDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchiveDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchiveDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchiveData model
   */
  readonly fields: ArchiveDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchiveData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchiveDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchiveData model
   */ 
  interface ArchiveDataFieldRefs {
    readonly id: FieldRef<"ArchiveData", 'Int'>
    readonly userId: FieldRef<"ArchiveData", 'Int'>
    readonly machineId: FieldRef<"ArchiveData", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ArchiveData findUnique
   */
  export type ArchiveDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * Filter, which ArchiveData to fetch.
     */
    where: ArchiveDataWhereUniqueInput
  }

  /**
   * ArchiveData findUniqueOrThrow
   */
  export type ArchiveDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * Filter, which ArchiveData to fetch.
     */
    where: ArchiveDataWhereUniqueInput
  }

  /**
   * ArchiveData findFirst
   */
  export type ArchiveDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * Filter, which ArchiveData to fetch.
     */
    where?: ArchiveDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveData to fetch.
     */
    orderBy?: ArchiveDataOrderByWithRelationInput | ArchiveDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchiveData.
     */
    cursor?: ArchiveDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchiveData.
     */
    distinct?: ArchiveDataScalarFieldEnum | ArchiveDataScalarFieldEnum[]
  }

  /**
   * ArchiveData findFirstOrThrow
   */
  export type ArchiveDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * Filter, which ArchiveData to fetch.
     */
    where?: ArchiveDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveData to fetch.
     */
    orderBy?: ArchiveDataOrderByWithRelationInput | ArchiveDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchiveData.
     */
    cursor?: ArchiveDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchiveData.
     */
    distinct?: ArchiveDataScalarFieldEnum | ArchiveDataScalarFieldEnum[]
  }

  /**
   * ArchiveData findMany
   */
  export type ArchiveDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * Filter, which ArchiveData to fetch.
     */
    where?: ArchiveDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveData to fetch.
     */
    orderBy?: ArchiveDataOrderByWithRelationInput | ArchiveDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchiveData.
     */
    cursor?: ArchiveDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveData.
     */
    skip?: number
    distinct?: ArchiveDataScalarFieldEnum | ArchiveDataScalarFieldEnum[]
  }

  /**
   * ArchiveData create
   */
  export type ArchiveDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * The data needed to create a ArchiveData.
     */
    data: XOR<ArchiveDataCreateInput, ArchiveDataUncheckedCreateInput>
  }

  /**
   * ArchiveData createMany
   */
  export type ArchiveDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchiveData.
     */
    data: ArchiveDataCreateManyInput | ArchiveDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchiveData createManyAndReturn
   */
  export type ArchiveDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArchiveData.
     */
    data: ArchiveDataCreateManyInput | ArchiveDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ArchiveData update
   */
  export type ArchiveDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * The data needed to update a ArchiveData.
     */
    data: XOR<ArchiveDataUpdateInput, ArchiveDataUncheckedUpdateInput>
    /**
     * Choose, which ArchiveData to update.
     */
    where: ArchiveDataWhereUniqueInput
  }

  /**
   * ArchiveData updateMany
   */
  export type ArchiveDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchiveData.
     */
    data: XOR<ArchiveDataUpdateManyMutationInput, ArchiveDataUncheckedUpdateManyInput>
    /**
     * Filter which ArchiveData to update
     */
    where?: ArchiveDataWhereInput
  }

  /**
   * ArchiveData upsert
   */
  export type ArchiveDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * The filter to search for the ArchiveData to update in case it exists.
     */
    where: ArchiveDataWhereUniqueInput
    /**
     * In case the ArchiveData found by the `where` argument doesn't exist, create a new ArchiveData with this data.
     */
    create: XOR<ArchiveDataCreateInput, ArchiveDataUncheckedCreateInput>
    /**
     * In case the ArchiveData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchiveDataUpdateInput, ArchiveDataUncheckedUpdateInput>
  }

  /**
   * ArchiveData delete
   */
  export type ArchiveDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
    /**
     * Filter which ArchiveData to delete.
     */
    where: ArchiveDataWhereUniqueInput
  }

  /**
   * ArchiveData deleteMany
   */
  export type ArchiveDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchiveData to delete
     */
    where?: ArchiveDataWhereInput
  }

  /**
   * ArchiveData without action
   */
  export type ArchiveDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveData
     */
    select?: ArchiveDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchiveDataInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    badgeNumber: 'badgeNumber',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MachineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    location: 'location',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MachineScalarFieldEnum = (typeof MachineScalarFieldEnum)[keyof typeof MachineScalarFieldEnum]


  export const QualityTestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId',
    createdAt: 'createdAt'
  };

  export type QualityTestScalarFieldEnum = (typeof QualityTestScalarFieldEnum)[keyof typeof QualityTestScalarFieldEnum]


  export const TeflonChangeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId',
    createdAt: 'createdAt'
  };

  export type TeflonChangeScalarFieldEnum = (typeof TeflonChangeScalarFieldEnum)[keyof typeof TeflonChangeScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const MachineOperationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId',
    status: 'status',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt'
  };

  export type MachineOperationScalarFieldEnum = (typeof MachineOperationScalarFieldEnum)[keyof typeof MachineOperationScalarFieldEnum]


  export const UserDeviceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token'
  };

  export type UserDeviceScalarFieldEnum = (typeof UserDeviceScalarFieldEnum)[keyof typeof UserDeviceScalarFieldEnum]


  export const ShiftScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type ShiftScalarFieldEnum = (typeof ShiftScalarFieldEnum)[keyof typeof ShiftScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const MachinePermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId',
    canView: 'canView',
    canOperate: 'canOperate',
    canEdit: 'canEdit',
    grantedBy: 'grantedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MachinePermissionScalarFieldEnum = (typeof MachinePermissionScalarFieldEnum)[keyof typeof MachinePermissionScalarFieldEnum]


  export const MachineStatusHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId',
    status: 'status',
    reason: 'reason',
    notes: 'notes',
    timestamp: 'timestamp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MachineStatusHistoryScalarFieldEnum = (typeof MachineStatusHistoryScalarFieldEnum)[keyof typeof MachineStatusHistoryScalarFieldEnum]


  export const ProductionDataScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId'
  };

  export type ProductionDataScalarFieldEnum = (typeof ProductionDataScalarFieldEnum)[keyof typeof ProductionDataScalarFieldEnum]


  export const ArchiveDataScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineId: 'machineId'
  };

  export type ArchiveDataScalarFieldEnum = (typeof ArchiveDataScalarFieldEnum)[keyof typeof ArchiveDataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    badgeNumber?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    qualityTests?: QualityTestListRelationFilter
    teflonChanges?: TeflonChangeListRelationFilter
    notifications?: NotificationListRelationFilter
    machineOperations?: MachineOperationListRelationFilter
    devices?: UserDeviceListRelationFilter
    shifts?: ShiftListRelationFilter
    reports?: ReportListRelationFilter
    permissions?: UserPermissionListRelationFilter
    machinePermissions?: MachinePermissionListRelationFilter
    statusHistory?: MachineStatusHistoryListRelationFilter
    productionData?: ProductionDataListRelationFilter
    archiveData?: ArchiveDataListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    badgeNumber?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qualityTests?: QualityTestOrderByRelationAggregateInput
    teflonChanges?: TeflonChangeOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    machineOperations?: MachineOperationOrderByRelationAggregateInput
    devices?: UserDeviceOrderByRelationAggregateInput
    shifts?: ShiftOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    permissions?: UserPermissionOrderByRelationAggregateInput
    machinePermissions?: MachinePermissionOrderByRelationAggregateInput
    statusHistory?: MachineStatusHistoryOrderByRelationAggregateInput
    productionData?: ProductionDataOrderByRelationAggregateInput
    archiveData?: ArchiveDataOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    badgeNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    qualityTests?: QualityTestListRelationFilter
    teflonChanges?: TeflonChangeListRelationFilter
    notifications?: NotificationListRelationFilter
    machineOperations?: MachineOperationListRelationFilter
    devices?: UserDeviceListRelationFilter
    shifts?: ShiftListRelationFilter
    reports?: ReportListRelationFilter
    permissions?: UserPermissionListRelationFilter
    machinePermissions?: MachinePermissionListRelationFilter
    statusHistory?: MachineStatusHistoryListRelationFilter
    productionData?: ProductionDataListRelationFilter
    archiveData?: ArchiveDataListRelationFilter
  }, "id" | "email" | "badgeNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    badgeNumber?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    badgeNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MachineWhereInput = {
    AND?: MachineWhereInput | MachineWhereInput[]
    OR?: MachineWhereInput[]
    NOT?: MachineWhereInput | MachineWhereInput[]
    id?: IntFilter<"Machine"> | number
    name?: StringFilter<"Machine"> | string
    type?: StringFilter<"Machine"> | string
    location?: StringNullableFilter<"Machine"> | string | null
    status?: StringFilter<"Machine"> | string
    isActive?: BoolFilter<"Machine"> | boolean
    createdAt?: DateTimeFilter<"Machine"> | Date | string
    updatedAt?: DateTimeFilter<"Machine"> | Date | string
    qualityTests?: QualityTestListRelationFilter
    teflonChanges?: TeflonChangeListRelationFilter
    operations?: MachineOperationListRelationFilter
    permissions?: MachinePermissionListRelationFilter
    statusHistory?: MachineStatusHistoryListRelationFilter
    productionData?: ProductionDataListRelationFilter
    archiveData?: ArchiveDataListRelationFilter
  }

  export type MachineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qualityTests?: QualityTestOrderByRelationAggregateInput
    teflonChanges?: TeflonChangeOrderByRelationAggregateInput
    operations?: MachineOperationOrderByRelationAggregateInput
    permissions?: MachinePermissionOrderByRelationAggregateInput
    statusHistory?: MachineStatusHistoryOrderByRelationAggregateInput
    productionData?: ProductionDataOrderByRelationAggregateInput
    archiveData?: ArchiveDataOrderByRelationAggregateInput
  }

  export type MachineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: MachineWhereInput | MachineWhereInput[]
    OR?: MachineWhereInput[]
    NOT?: MachineWhereInput | MachineWhereInput[]
    type?: StringFilter<"Machine"> | string
    location?: StringNullableFilter<"Machine"> | string | null
    status?: StringFilter<"Machine"> | string
    isActive?: BoolFilter<"Machine"> | boolean
    createdAt?: DateTimeFilter<"Machine"> | Date | string
    updatedAt?: DateTimeFilter<"Machine"> | Date | string
    qualityTests?: QualityTestListRelationFilter
    teflonChanges?: TeflonChangeListRelationFilter
    operations?: MachineOperationListRelationFilter
    permissions?: MachinePermissionListRelationFilter
    statusHistory?: MachineStatusHistoryListRelationFilter
    productionData?: ProductionDataListRelationFilter
    archiveData?: ArchiveDataListRelationFilter
  }, "id" | "name">

  export type MachineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MachineCountOrderByAggregateInput
    _avg?: MachineAvgOrderByAggregateInput
    _max?: MachineMaxOrderByAggregateInput
    _min?: MachineMinOrderByAggregateInput
    _sum?: MachineSumOrderByAggregateInput
  }

  export type MachineScalarWhereWithAggregatesInput = {
    AND?: MachineScalarWhereWithAggregatesInput | MachineScalarWhereWithAggregatesInput[]
    OR?: MachineScalarWhereWithAggregatesInput[]
    NOT?: MachineScalarWhereWithAggregatesInput | MachineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Machine"> | number
    name?: StringWithAggregatesFilter<"Machine"> | string
    type?: StringWithAggregatesFilter<"Machine"> | string
    location?: StringNullableWithAggregatesFilter<"Machine"> | string | null
    status?: StringWithAggregatesFilter<"Machine"> | string
    isActive?: BoolWithAggregatesFilter<"Machine"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Machine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Machine"> | Date | string
  }

  export type QualityTestWhereInput = {
    AND?: QualityTestWhereInput | QualityTestWhereInput[]
    OR?: QualityTestWhereInput[]
    NOT?: QualityTestWhereInput | QualityTestWhereInput[]
    id?: IntFilter<"QualityTest"> | number
    userId?: IntFilter<"QualityTest"> | number
    machineId?: IntFilter<"QualityTest"> | number
    createdAt?: DateTimeFilter<"QualityTest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type QualityTestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type QualityTestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QualityTestWhereInput | QualityTestWhereInput[]
    OR?: QualityTestWhereInput[]
    NOT?: QualityTestWhereInput | QualityTestWhereInput[]
    userId?: IntFilter<"QualityTest"> | number
    machineId?: IntFilter<"QualityTest"> | number
    createdAt?: DateTimeFilter<"QualityTest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id">

  export type QualityTestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
    _count?: QualityTestCountOrderByAggregateInput
    _avg?: QualityTestAvgOrderByAggregateInput
    _max?: QualityTestMaxOrderByAggregateInput
    _min?: QualityTestMinOrderByAggregateInput
    _sum?: QualityTestSumOrderByAggregateInput
  }

  export type QualityTestScalarWhereWithAggregatesInput = {
    AND?: QualityTestScalarWhereWithAggregatesInput | QualityTestScalarWhereWithAggregatesInput[]
    OR?: QualityTestScalarWhereWithAggregatesInput[]
    NOT?: QualityTestScalarWhereWithAggregatesInput | QualityTestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QualityTest"> | number
    userId?: IntWithAggregatesFilter<"QualityTest"> | number
    machineId?: IntWithAggregatesFilter<"QualityTest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"QualityTest"> | Date | string
  }

  export type TeflonChangeWhereInput = {
    AND?: TeflonChangeWhereInput | TeflonChangeWhereInput[]
    OR?: TeflonChangeWhereInput[]
    NOT?: TeflonChangeWhereInput | TeflonChangeWhereInput[]
    id?: IntFilter<"TeflonChange"> | number
    userId?: IntFilter<"TeflonChange"> | number
    machineId?: IntFilter<"TeflonChange"> | number
    createdAt?: DateTimeFilter<"TeflonChange"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type TeflonChangeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type TeflonChangeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeflonChangeWhereInput | TeflonChangeWhereInput[]
    OR?: TeflonChangeWhereInput[]
    NOT?: TeflonChangeWhereInput | TeflonChangeWhereInput[]
    userId?: IntFilter<"TeflonChange"> | number
    machineId?: IntFilter<"TeflonChange"> | number
    createdAt?: DateTimeFilter<"TeflonChange"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id">

  export type TeflonChangeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
    _count?: TeflonChangeCountOrderByAggregateInput
    _avg?: TeflonChangeAvgOrderByAggregateInput
    _max?: TeflonChangeMaxOrderByAggregateInput
    _min?: TeflonChangeMinOrderByAggregateInput
    _sum?: TeflonChangeSumOrderByAggregateInput
  }

  export type TeflonChangeScalarWhereWithAggregatesInput = {
    AND?: TeflonChangeScalarWhereWithAggregatesInput | TeflonChangeScalarWhereWithAggregatesInput[]
    OR?: TeflonChangeScalarWhereWithAggregatesInput[]
    NOT?: TeflonChangeScalarWhereWithAggregatesInput | TeflonChangeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeflonChange"> | number
    userId?: IntWithAggregatesFilter<"TeflonChange"> | number
    machineId?: IntWithAggregatesFilter<"TeflonChange"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TeflonChange"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    message?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type MachineOperationWhereInput = {
    AND?: MachineOperationWhereInput | MachineOperationWhereInput[]
    OR?: MachineOperationWhereInput[]
    NOT?: MachineOperationWhereInput | MachineOperationWhereInput[]
    id?: IntFilter<"MachineOperation"> | number
    userId?: IntFilter<"MachineOperation"> | number
    machineId?: IntFilter<"MachineOperation"> | number
    status?: StringFilter<"MachineOperation"> | string
    startTime?: DateTimeFilter<"MachineOperation"> | Date | string
    endTime?: DateTimeNullableFilter<"MachineOperation"> | Date | string | null
    createdAt?: DateTimeFilter<"MachineOperation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type MachineOperationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type MachineOperationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MachineOperationWhereInput | MachineOperationWhereInput[]
    OR?: MachineOperationWhereInput[]
    NOT?: MachineOperationWhereInput | MachineOperationWhereInput[]
    userId?: IntFilter<"MachineOperation"> | number
    machineId?: IntFilter<"MachineOperation"> | number
    status?: StringFilter<"MachineOperation"> | string
    startTime?: DateTimeFilter<"MachineOperation"> | Date | string
    endTime?: DateTimeNullableFilter<"MachineOperation"> | Date | string | null
    createdAt?: DateTimeFilter<"MachineOperation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id">

  export type MachineOperationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MachineOperationCountOrderByAggregateInput
    _avg?: MachineOperationAvgOrderByAggregateInput
    _max?: MachineOperationMaxOrderByAggregateInput
    _min?: MachineOperationMinOrderByAggregateInput
    _sum?: MachineOperationSumOrderByAggregateInput
  }

  export type MachineOperationScalarWhereWithAggregatesInput = {
    AND?: MachineOperationScalarWhereWithAggregatesInput | MachineOperationScalarWhereWithAggregatesInput[]
    OR?: MachineOperationScalarWhereWithAggregatesInput[]
    NOT?: MachineOperationScalarWhereWithAggregatesInput | MachineOperationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MachineOperation"> | number
    userId?: IntWithAggregatesFilter<"MachineOperation"> | number
    machineId?: IntWithAggregatesFilter<"MachineOperation"> | number
    status?: StringWithAggregatesFilter<"MachineOperation"> | string
    startTime?: DateTimeWithAggregatesFilter<"MachineOperation"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"MachineOperation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MachineOperation"> | Date | string
  }

  export type UserDeviceWhereInput = {
    AND?: UserDeviceWhereInput | UserDeviceWhereInput[]
    OR?: UserDeviceWhereInput[]
    NOT?: UserDeviceWhereInput | UserDeviceWhereInput[]
    id?: IntFilter<"UserDevice"> | number
    userId?: IntFilter<"UserDevice"> | number
    token?: StringFilter<"UserDevice"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserDeviceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserDeviceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserDeviceWhereInput | UserDeviceWhereInput[]
    OR?: UserDeviceWhereInput[]
    NOT?: UserDeviceWhereInput | UserDeviceWhereInput[]
    userId?: IntFilter<"UserDevice"> | number
    token?: StringFilter<"UserDevice"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserDeviceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    _count?: UserDeviceCountOrderByAggregateInput
    _avg?: UserDeviceAvgOrderByAggregateInput
    _max?: UserDeviceMaxOrderByAggregateInput
    _min?: UserDeviceMinOrderByAggregateInput
    _sum?: UserDeviceSumOrderByAggregateInput
  }

  export type UserDeviceScalarWhereWithAggregatesInput = {
    AND?: UserDeviceScalarWhereWithAggregatesInput | UserDeviceScalarWhereWithAggregatesInput[]
    OR?: UserDeviceScalarWhereWithAggregatesInput[]
    NOT?: UserDeviceScalarWhereWithAggregatesInput | UserDeviceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserDevice"> | number
    userId?: IntWithAggregatesFilter<"UserDevice"> | number
    token?: StringWithAggregatesFilter<"UserDevice"> | string
  }

  export type ShiftWhereInput = {
    AND?: ShiftWhereInput | ShiftWhereInput[]
    OR?: ShiftWhereInput[]
    NOT?: ShiftWhereInput | ShiftWhereInput[]
    id?: IntFilter<"Shift"> | number
    userId?: IntFilter<"Shift"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShiftOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ShiftWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShiftWhereInput | ShiftWhereInput[]
    OR?: ShiftWhereInput[]
    NOT?: ShiftWhereInput | ShiftWhereInput[]
    userId?: IntFilter<"Shift"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ShiftOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: ShiftCountOrderByAggregateInput
    _avg?: ShiftAvgOrderByAggregateInput
    _max?: ShiftMaxOrderByAggregateInput
    _min?: ShiftMinOrderByAggregateInput
    _sum?: ShiftSumOrderByAggregateInput
  }

  export type ShiftScalarWhereWithAggregatesInput = {
    AND?: ShiftScalarWhereWithAggregatesInput | ShiftScalarWhereWithAggregatesInput[]
    OR?: ShiftScalarWhereWithAggregatesInput[]
    NOT?: ShiftScalarWhereWithAggregatesInput | ShiftScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Shift"> | number
    userId?: IntWithAggregatesFilter<"Shift"> | number
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: IntFilter<"Report"> | number
    userId?: IntFilter<"Report"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    userId?: IntFilter<"Report"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Report"> | number
    userId?: IntWithAggregatesFilter<"Report"> | number
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    userId?: IntFilter<"UserPermission"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: IntFilter<"UserPermission"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _avg?: UserPermissionAvgOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
    _sum?: UserPermissionSumOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserPermission"> | number
    userId?: IntWithAggregatesFilter<"UserPermission"> | number
  }

  export type MachinePermissionWhereInput = {
    AND?: MachinePermissionWhereInput | MachinePermissionWhereInput[]
    OR?: MachinePermissionWhereInput[]
    NOT?: MachinePermissionWhereInput | MachinePermissionWhereInput[]
    id?: IntFilter<"MachinePermission"> | number
    userId?: IntFilter<"MachinePermission"> | number
    machineId?: IntFilter<"MachinePermission"> | number
    canView?: BoolFilter<"MachinePermission"> | boolean
    canOperate?: BoolFilter<"MachinePermission"> | boolean
    canEdit?: BoolFilter<"MachinePermission"> | boolean
    grantedBy?: IntNullableFilter<"MachinePermission"> | number | null
    createdAt?: DateTimeFilter<"MachinePermission"> | Date | string
    updatedAt?: DateTimeFilter<"MachinePermission"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type MachinePermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    canView?: SortOrder
    canOperate?: SortOrder
    canEdit?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type MachinePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_machineId?: MachinePermissionUserIdMachineIdCompoundUniqueInput
    AND?: MachinePermissionWhereInput | MachinePermissionWhereInput[]
    OR?: MachinePermissionWhereInput[]
    NOT?: MachinePermissionWhereInput | MachinePermissionWhereInput[]
    userId?: IntFilter<"MachinePermission"> | number
    machineId?: IntFilter<"MachinePermission"> | number
    canView?: BoolFilter<"MachinePermission"> | boolean
    canOperate?: BoolFilter<"MachinePermission"> | boolean
    canEdit?: BoolFilter<"MachinePermission"> | boolean
    grantedBy?: IntNullableFilter<"MachinePermission"> | number | null
    createdAt?: DateTimeFilter<"MachinePermission"> | Date | string
    updatedAt?: DateTimeFilter<"MachinePermission"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id" | "userId_machineId">

  export type MachinePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    canView?: SortOrder
    canOperate?: SortOrder
    canEdit?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MachinePermissionCountOrderByAggregateInput
    _avg?: MachinePermissionAvgOrderByAggregateInput
    _max?: MachinePermissionMaxOrderByAggregateInput
    _min?: MachinePermissionMinOrderByAggregateInput
    _sum?: MachinePermissionSumOrderByAggregateInput
  }

  export type MachinePermissionScalarWhereWithAggregatesInput = {
    AND?: MachinePermissionScalarWhereWithAggregatesInput | MachinePermissionScalarWhereWithAggregatesInput[]
    OR?: MachinePermissionScalarWhereWithAggregatesInput[]
    NOT?: MachinePermissionScalarWhereWithAggregatesInput | MachinePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MachinePermission"> | number
    userId?: IntWithAggregatesFilter<"MachinePermission"> | number
    machineId?: IntWithAggregatesFilter<"MachinePermission"> | number
    canView?: BoolWithAggregatesFilter<"MachinePermission"> | boolean
    canOperate?: BoolWithAggregatesFilter<"MachinePermission"> | boolean
    canEdit?: BoolWithAggregatesFilter<"MachinePermission"> | boolean
    grantedBy?: IntNullableWithAggregatesFilter<"MachinePermission"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"MachinePermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MachinePermission"> | Date | string
  }

  export type MachineStatusHistoryWhereInput = {
    AND?: MachineStatusHistoryWhereInput | MachineStatusHistoryWhereInput[]
    OR?: MachineStatusHistoryWhereInput[]
    NOT?: MachineStatusHistoryWhereInput | MachineStatusHistoryWhereInput[]
    id?: IntFilter<"MachineStatusHistory"> | number
    userId?: IntFilter<"MachineStatusHistory"> | number
    machineId?: IntFilter<"MachineStatusHistory"> | number
    status?: StringFilter<"MachineStatusHistory"> | string
    reason?: StringNullableFilter<"MachineStatusHistory"> | string | null
    notes?: StringNullableFilter<"MachineStatusHistory"> | string | null
    timestamp?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    createdAt?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type MachineStatusHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type MachineStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MachineStatusHistoryWhereInput | MachineStatusHistoryWhereInput[]
    OR?: MachineStatusHistoryWhereInput[]
    NOT?: MachineStatusHistoryWhereInput | MachineStatusHistoryWhereInput[]
    userId?: IntFilter<"MachineStatusHistory"> | number
    machineId?: IntFilter<"MachineStatusHistory"> | number
    status?: StringFilter<"MachineStatusHistory"> | string
    reason?: StringNullableFilter<"MachineStatusHistory"> | string | null
    notes?: StringNullableFilter<"MachineStatusHistory"> | string | null
    timestamp?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    createdAt?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id">

  export type MachineStatusHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MachineStatusHistoryCountOrderByAggregateInput
    _avg?: MachineStatusHistoryAvgOrderByAggregateInput
    _max?: MachineStatusHistoryMaxOrderByAggregateInput
    _min?: MachineStatusHistoryMinOrderByAggregateInput
    _sum?: MachineStatusHistorySumOrderByAggregateInput
  }

  export type MachineStatusHistoryScalarWhereWithAggregatesInput = {
    AND?: MachineStatusHistoryScalarWhereWithAggregatesInput | MachineStatusHistoryScalarWhereWithAggregatesInput[]
    OR?: MachineStatusHistoryScalarWhereWithAggregatesInput[]
    NOT?: MachineStatusHistoryScalarWhereWithAggregatesInput | MachineStatusHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MachineStatusHistory"> | number
    userId?: IntWithAggregatesFilter<"MachineStatusHistory"> | number
    machineId?: IntWithAggregatesFilter<"MachineStatusHistory"> | number
    status?: StringWithAggregatesFilter<"MachineStatusHistory"> | string
    reason?: StringNullableWithAggregatesFilter<"MachineStatusHistory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"MachineStatusHistory"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"MachineStatusHistory"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MachineStatusHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MachineStatusHistory"> | Date | string
  }

  export type ProductionDataWhereInput = {
    AND?: ProductionDataWhereInput | ProductionDataWhereInput[]
    OR?: ProductionDataWhereInput[]
    NOT?: ProductionDataWhereInput | ProductionDataWhereInput[]
    id?: IntFilter<"ProductionData"> | number
    userId?: IntFilter<"ProductionData"> | number
    machineId?: IntFilter<"ProductionData"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type ProductionDataOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type ProductionDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductionDataWhereInput | ProductionDataWhereInput[]
    OR?: ProductionDataWhereInput[]
    NOT?: ProductionDataWhereInput | ProductionDataWhereInput[]
    userId?: IntFilter<"ProductionData"> | number
    machineId?: IntFilter<"ProductionData"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id">

  export type ProductionDataOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    _count?: ProductionDataCountOrderByAggregateInput
    _avg?: ProductionDataAvgOrderByAggregateInput
    _max?: ProductionDataMaxOrderByAggregateInput
    _min?: ProductionDataMinOrderByAggregateInput
    _sum?: ProductionDataSumOrderByAggregateInput
  }

  export type ProductionDataScalarWhereWithAggregatesInput = {
    AND?: ProductionDataScalarWhereWithAggregatesInput | ProductionDataScalarWhereWithAggregatesInput[]
    OR?: ProductionDataScalarWhereWithAggregatesInput[]
    NOT?: ProductionDataScalarWhereWithAggregatesInput | ProductionDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductionData"> | number
    userId?: IntWithAggregatesFilter<"ProductionData"> | number
    machineId?: IntWithAggregatesFilter<"ProductionData"> | number
  }

  export type ArchiveDataWhereInput = {
    AND?: ArchiveDataWhereInput | ArchiveDataWhereInput[]
    OR?: ArchiveDataWhereInput[]
    NOT?: ArchiveDataWhereInput | ArchiveDataWhereInput[]
    id?: IntFilter<"ArchiveData"> | number
    userId?: IntFilter<"ArchiveData"> | number
    machineId?: IntFilter<"ArchiveData"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type ArchiveDataOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type ArchiveDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArchiveDataWhereInput | ArchiveDataWhereInput[]
    OR?: ArchiveDataWhereInput[]
    NOT?: ArchiveDataWhereInput | ArchiveDataWhereInput[]
    userId?: IntFilter<"ArchiveData"> | number
    machineId?: IntFilter<"ArchiveData"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }, "id">

  export type ArchiveDataOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    _count?: ArchiveDataCountOrderByAggregateInput
    _avg?: ArchiveDataAvgOrderByAggregateInput
    _max?: ArchiveDataMaxOrderByAggregateInput
    _min?: ArchiveDataMinOrderByAggregateInput
    _sum?: ArchiveDataSumOrderByAggregateInput
  }

  export type ArchiveDataScalarWhereWithAggregatesInput = {
    AND?: ArchiveDataScalarWhereWithAggregatesInput | ArchiveDataScalarWhereWithAggregatesInput[]
    OR?: ArchiveDataScalarWhereWithAggregatesInput[]
    NOT?: ArchiveDataScalarWhereWithAggregatesInput | ArchiveDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArchiveData"> | number
    userId?: IntWithAggregatesFilter<"ArchiveData"> | number
    machineId?: IntWithAggregatesFilter<"ArchiveData"> | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineCreateInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type MachineCreateManyInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualityTestCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutQualityTestsInput
    machine: MachineCreateNestedOneWithoutQualityTestsInput
  }

  export type QualityTestUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
    createdAt?: Date | string
  }

  export type QualityTestUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQualityTestsNestedInput
    machine?: MachineUpdateOneRequiredWithoutQualityTestsNestedInput
  }

  export type QualityTestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualityTestCreateManyInput = {
    id?: number
    userId: number
    machineId: number
    createdAt?: Date | string
  }

  export type QualityTestUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualityTestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTeflonChangesInput
    machine: MachineCreateNestedOneWithoutTeflonChangesInput
  }

  export type TeflonChangeUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
    createdAt?: Date | string
  }

  export type TeflonChangeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTeflonChangesNestedInput
    machine?: MachineUpdateOneRequiredWithoutTeflonChangesNestedInput
  }

  export type TeflonChangeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeCreateManyInput = {
    id?: number
    userId: number
    machineId: number
    createdAt?: Date | string
  }

  export type TeflonChangeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    message: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationCreateInput = {
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMachineOperationsInput
    machine: MachineCreateNestedOneWithoutOperationsInput
  }

  export type MachineOperationUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type MachineOperationUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMachineOperationsNestedInput
    machine?: MachineUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type MachineOperationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationCreateManyInput = {
    id?: number
    userId: number
    machineId: number
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type MachineOperationUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDeviceCreateInput = {
    token: string
    user: UserCreateNestedOneWithoutDevicesInput
  }

  export type UserDeviceUncheckedCreateInput = {
    id?: number
    userId: number
    token: string
  }

  export type UserDeviceUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type UserDeviceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceCreateManyInput = {
    id?: number
    userId: number
    token: string
  }

  export type UserDeviceUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftCreateInput = {
    user: UserCreateNestedOneWithoutShiftsInput
  }

  export type ShiftUncheckedCreateInput = {
    id?: number
    userId: number
  }

  export type ShiftUpdateInput = {
    user?: UserUpdateOneRequiredWithoutShiftsNestedInput
  }

  export type ShiftUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ShiftCreateManyInput = {
    id?: number
    userId: number
  }

  export type ShiftUpdateManyMutationInput = {

  }

  export type ShiftUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportCreateInput = {
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    userId: number
  }

  export type ReportUpdateInput = {
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportCreateManyInput = {
    id?: number
    userId: number
  }

  export type ReportUpdateManyMutationInput = {

  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionCreateInput = {
    user: UserCreateNestedOneWithoutPermissionsInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: number
    userId: number
  }

  export type UserPermissionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionCreateManyInput = {
    id?: number
    userId: number
  }

  export type UserPermissionUpdateManyMutationInput = {

  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MachinePermissionCreateInput = {
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMachinePermissionsInput
    machine: MachineCreateNestedOneWithoutPermissionsInput
  }

  export type MachinePermissionUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachinePermissionUpdateInput = {
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMachinePermissionsNestedInput
    machine?: MachineUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type MachinePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachinePermissionCreateManyInput = {
    id?: number
    userId: number
    machineId: number
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachinePermissionUpdateManyMutationInput = {
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachinePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryCreateInput = {
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStatusHistoryInput
    machine: MachineCreateNestedOneWithoutStatusHistoryInput
  }

  export type MachineStatusHistoryUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineStatusHistoryUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStatusHistoryNestedInput
    machine?: MachineUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type MachineStatusHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryCreateManyInput = {
    id?: number
    userId: number
    machineId: number
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineStatusHistoryUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductionDataCreateInput = {
    user: UserCreateNestedOneWithoutProductionDataInput
    machine: MachineCreateNestedOneWithoutProductionDataInput
  }

  export type ProductionDataUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
  }

  export type ProductionDataUpdateInput = {
    user?: UserUpdateOneRequiredWithoutProductionDataNestedInput
    machine?: MachineUpdateOneRequiredWithoutProductionDataNestedInput
  }

  export type ProductionDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductionDataCreateManyInput = {
    id?: number
    userId: number
    machineId: number
  }

  export type ProductionDataUpdateManyMutationInput = {

  }

  export type ProductionDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type ArchiveDataCreateInput = {
    user: UserCreateNestedOneWithoutArchiveDataInput
    machine: MachineCreateNestedOneWithoutArchiveDataInput
  }

  export type ArchiveDataUncheckedCreateInput = {
    id?: number
    userId: number
    machineId: number
  }

  export type ArchiveDataUpdateInput = {
    user?: UserUpdateOneRequiredWithoutArchiveDataNestedInput
    machine?: MachineUpdateOneRequiredWithoutArchiveDataNestedInput
  }

  export type ArchiveDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type ArchiveDataCreateManyInput = {
    id?: number
    userId: number
    machineId: number
  }

  export type ArchiveDataUpdateManyMutationInput = {

  }

  export type ArchiveDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type QualityTestListRelationFilter = {
    every?: QualityTestWhereInput
    some?: QualityTestWhereInput
    none?: QualityTestWhereInput
  }

  export type TeflonChangeListRelationFilter = {
    every?: TeflonChangeWhereInput
    some?: TeflonChangeWhereInput
    none?: TeflonChangeWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type MachineOperationListRelationFilter = {
    every?: MachineOperationWhereInput
    some?: MachineOperationWhereInput
    none?: MachineOperationWhereInput
  }

  export type UserDeviceListRelationFilter = {
    every?: UserDeviceWhereInput
    some?: UserDeviceWhereInput
    none?: UserDeviceWhereInput
  }

  export type ShiftListRelationFilter = {
    every?: ShiftWhereInput
    some?: ShiftWhereInput
    none?: ShiftWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type MachinePermissionListRelationFilter = {
    every?: MachinePermissionWhereInput
    some?: MachinePermissionWhereInput
    none?: MachinePermissionWhereInput
  }

  export type MachineStatusHistoryListRelationFilter = {
    every?: MachineStatusHistoryWhereInput
    some?: MachineStatusHistoryWhereInput
    none?: MachineStatusHistoryWhereInput
  }

  export type ProductionDataListRelationFilter = {
    every?: ProductionDataWhereInput
    some?: ProductionDataWhereInput
    none?: ProductionDataWhereInput
  }

  export type ArchiveDataListRelationFilter = {
    every?: ArchiveDataWhereInput
    some?: ArchiveDataWhereInput
    none?: ArchiveDataWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type QualityTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeflonChangeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MachineOperationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserDeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShiftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MachinePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MachineStatusHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductionDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArchiveDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    badgeNumber?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    badgeNumber?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    badgeNumber?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MachineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachineAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MachineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachineSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MachineRelationFilter = {
    is?: MachineWhereInput
    isNot?: MachineWhereInput
  }

  export type QualityTestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
  }

  export type QualityTestAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type QualityTestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
  }

  export type QualityTestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
  }

  export type QualityTestSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type TeflonChangeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeflonChangeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type TeflonChangeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeflonChangeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeflonChangeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MachineOperationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type MachineOperationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type MachineOperationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type MachineOperationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type MachineOperationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserDeviceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
  }

  export type UserDeviceAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserDeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
  }

  export type UserDeviceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
  }

  export type UserDeviceSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShiftCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShiftAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShiftMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShiftMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShiftSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserPermissionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MachinePermissionUserIdMachineIdCompoundUniqueInput = {
    userId: number
    machineId: number
  }

  export type MachinePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    canView?: SortOrder
    canOperate?: SortOrder
    canEdit?: SortOrder
    grantedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachinePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    grantedBy?: SortOrder
  }

  export type MachinePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    canView?: SortOrder
    canOperate?: SortOrder
    canEdit?: SortOrder
    grantedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachinePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    canView?: SortOrder
    canOperate?: SortOrder
    canEdit?: SortOrder
    grantedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachinePermissionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    grantedBy?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MachineStatusHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachineStatusHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type MachineStatusHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachineStatusHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MachineStatusHistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ProductionDataCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ProductionDataAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ProductionDataMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ProductionDataMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ProductionDataSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ArchiveDataCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ArchiveDataAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ArchiveDataMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ArchiveDataMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type ArchiveDataSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineId?: SortOrder
  }

  export type QualityTestCreateNestedManyWithoutUserInput = {
    create?: XOR<QualityTestCreateWithoutUserInput, QualityTestUncheckedCreateWithoutUserInput> | QualityTestCreateWithoutUserInput[] | QualityTestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutUserInput | QualityTestCreateOrConnectWithoutUserInput[]
    createMany?: QualityTestCreateManyUserInputEnvelope
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
  }

  export type TeflonChangeCreateNestedManyWithoutUserInput = {
    create?: XOR<TeflonChangeCreateWithoutUserInput, TeflonChangeUncheckedCreateWithoutUserInput> | TeflonChangeCreateWithoutUserInput[] | TeflonChangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutUserInput | TeflonChangeCreateOrConnectWithoutUserInput[]
    createMany?: TeflonChangeCreateManyUserInputEnvelope
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MachineOperationCreateNestedManyWithoutUserInput = {
    create?: XOR<MachineOperationCreateWithoutUserInput, MachineOperationUncheckedCreateWithoutUserInput> | MachineOperationCreateWithoutUserInput[] | MachineOperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutUserInput | MachineOperationCreateOrConnectWithoutUserInput[]
    createMany?: MachineOperationCreateManyUserInputEnvelope
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
  }

  export type UserDeviceCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDeviceCreateWithoutUserInput, UserDeviceUncheckedCreateWithoutUserInput> | UserDeviceCreateWithoutUserInput[] | UserDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDeviceCreateOrConnectWithoutUserInput | UserDeviceCreateOrConnectWithoutUserInput[]
    createMany?: UserDeviceCreateManyUserInputEnvelope
    connect?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
  }

  export type ShiftCreateNestedManyWithoutUserInput = {
    create?: XOR<ShiftCreateWithoutUserInput, ShiftUncheckedCreateWithoutUserInput> | ShiftCreateWithoutUserInput[] | ShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutUserInput | ShiftCreateOrConnectWithoutUserInput[]
    createMany?: ShiftCreateManyUserInputEnvelope
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type MachinePermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<MachinePermissionCreateWithoutUserInput, MachinePermissionUncheckedCreateWithoutUserInput> | MachinePermissionCreateWithoutUserInput[] | MachinePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutUserInput | MachinePermissionCreateOrConnectWithoutUserInput[]
    createMany?: MachinePermissionCreateManyUserInputEnvelope
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
  }

  export type MachineStatusHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutUserInput, MachineStatusHistoryUncheckedCreateWithoutUserInput> | MachineStatusHistoryCreateWithoutUserInput[] | MachineStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutUserInput | MachineStatusHistoryCreateOrConnectWithoutUserInput[]
    createMany?: MachineStatusHistoryCreateManyUserInputEnvelope
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
  }

  export type ProductionDataCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductionDataCreateWithoutUserInput, ProductionDataUncheckedCreateWithoutUserInput> | ProductionDataCreateWithoutUserInput[] | ProductionDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutUserInput | ProductionDataCreateOrConnectWithoutUserInput[]
    createMany?: ProductionDataCreateManyUserInputEnvelope
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
  }

  export type ArchiveDataCreateNestedManyWithoutUserInput = {
    create?: XOR<ArchiveDataCreateWithoutUserInput, ArchiveDataUncheckedCreateWithoutUserInput> | ArchiveDataCreateWithoutUserInput[] | ArchiveDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutUserInput | ArchiveDataCreateOrConnectWithoutUserInput[]
    createMany?: ArchiveDataCreateManyUserInputEnvelope
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
  }

  export type QualityTestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QualityTestCreateWithoutUserInput, QualityTestUncheckedCreateWithoutUserInput> | QualityTestCreateWithoutUserInput[] | QualityTestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutUserInput | QualityTestCreateOrConnectWithoutUserInput[]
    createMany?: QualityTestCreateManyUserInputEnvelope
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
  }

  export type TeflonChangeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeflonChangeCreateWithoutUserInput, TeflonChangeUncheckedCreateWithoutUserInput> | TeflonChangeCreateWithoutUserInput[] | TeflonChangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutUserInput | TeflonChangeCreateOrConnectWithoutUserInput[]
    createMany?: TeflonChangeCreateManyUserInputEnvelope
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MachineOperationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MachineOperationCreateWithoutUserInput, MachineOperationUncheckedCreateWithoutUserInput> | MachineOperationCreateWithoutUserInput[] | MachineOperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutUserInput | MachineOperationCreateOrConnectWithoutUserInput[]
    createMany?: MachineOperationCreateManyUserInputEnvelope
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
  }

  export type UserDeviceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDeviceCreateWithoutUserInput, UserDeviceUncheckedCreateWithoutUserInput> | UserDeviceCreateWithoutUserInput[] | UserDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDeviceCreateOrConnectWithoutUserInput | UserDeviceCreateOrConnectWithoutUserInput[]
    createMany?: UserDeviceCreateManyUserInputEnvelope
    connect?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
  }

  export type ShiftUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShiftCreateWithoutUserInput, ShiftUncheckedCreateWithoutUserInput> | ShiftCreateWithoutUserInput[] | ShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutUserInput | ShiftCreateOrConnectWithoutUserInput[]
    createMany?: ShiftCreateManyUserInputEnvelope
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type MachinePermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MachinePermissionCreateWithoutUserInput, MachinePermissionUncheckedCreateWithoutUserInput> | MachinePermissionCreateWithoutUserInput[] | MachinePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutUserInput | MachinePermissionCreateOrConnectWithoutUserInput[]
    createMany?: MachinePermissionCreateManyUserInputEnvelope
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
  }

  export type MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutUserInput, MachineStatusHistoryUncheckedCreateWithoutUserInput> | MachineStatusHistoryCreateWithoutUserInput[] | MachineStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutUserInput | MachineStatusHistoryCreateOrConnectWithoutUserInput[]
    createMany?: MachineStatusHistoryCreateManyUserInputEnvelope
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
  }

  export type ProductionDataUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductionDataCreateWithoutUserInput, ProductionDataUncheckedCreateWithoutUserInput> | ProductionDataCreateWithoutUserInput[] | ProductionDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutUserInput | ProductionDataCreateOrConnectWithoutUserInput[]
    createMany?: ProductionDataCreateManyUserInputEnvelope
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
  }

  export type ArchiveDataUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ArchiveDataCreateWithoutUserInput, ArchiveDataUncheckedCreateWithoutUserInput> | ArchiveDataCreateWithoutUserInput[] | ArchiveDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutUserInput | ArchiveDataCreateOrConnectWithoutUserInput[]
    createMany?: ArchiveDataCreateManyUserInputEnvelope
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type QualityTestUpdateManyWithoutUserNestedInput = {
    create?: XOR<QualityTestCreateWithoutUserInput, QualityTestUncheckedCreateWithoutUserInput> | QualityTestCreateWithoutUserInput[] | QualityTestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutUserInput | QualityTestCreateOrConnectWithoutUserInput[]
    upsert?: QualityTestUpsertWithWhereUniqueWithoutUserInput | QualityTestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QualityTestCreateManyUserInputEnvelope
    set?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    disconnect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    delete?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    update?: QualityTestUpdateWithWhereUniqueWithoutUserInput | QualityTestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QualityTestUpdateManyWithWhereWithoutUserInput | QualityTestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QualityTestScalarWhereInput | QualityTestScalarWhereInput[]
  }

  export type TeflonChangeUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeflonChangeCreateWithoutUserInput, TeflonChangeUncheckedCreateWithoutUserInput> | TeflonChangeCreateWithoutUserInput[] | TeflonChangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutUserInput | TeflonChangeCreateOrConnectWithoutUserInput[]
    upsert?: TeflonChangeUpsertWithWhereUniqueWithoutUserInput | TeflonChangeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeflonChangeCreateManyUserInputEnvelope
    set?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    disconnect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    delete?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    update?: TeflonChangeUpdateWithWhereUniqueWithoutUserInput | TeflonChangeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeflonChangeUpdateManyWithWhereWithoutUserInput | TeflonChangeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeflonChangeScalarWhereInput | TeflonChangeScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MachineOperationUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachineOperationCreateWithoutUserInput, MachineOperationUncheckedCreateWithoutUserInput> | MachineOperationCreateWithoutUserInput[] | MachineOperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutUserInput | MachineOperationCreateOrConnectWithoutUserInput[]
    upsert?: MachineOperationUpsertWithWhereUniqueWithoutUserInput | MachineOperationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachineOperationCreateManyUserInputEnvelope
    set?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    disconnect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    delete?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    update?: MachineOperationUpdateWithWhereUniqueWithoutUserInput | MachineOperationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachineOperationUpdateManyWithWhereWithoutUserInput | MachineOperationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachineOperationScalarWhereInput | MachineOperationScalarWhereInput[]
  }

  export type UserDeviceUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDeviceCreateWithoutUserInput, UserDeviceUncheckedCreateWithoutUserInput> | UserDeviceCreateWithoutUserInput[] | UserDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDeviceCreateOrConnectWithoutUserInput | UserDeviceCreateOrConnectWithoutUserInput[]
    upsert?: UserDeviceUpsertWithWhereUniqueWithoutUserInput | UserDeviceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDeviceCreateManyUserInputEnvelope
    set?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    disconnect?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    delete?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    connect?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    update?: UserDeviceUpdateWithWhereUniqueWithoutUserInput | UserDeviceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDeviceUpdateManyWithWhereWithoutUserInput | UserDeviceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDeviceScalarWhereInput | UserDeviceScalarWhereInput[]
  }

  export type ShiftUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShiftCreateWithoutUserInput, ShiftUncheckedCreateWithoutUserInput> | ShiftCreateWithoutUserInput[] | ShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutUserInput | ShiftCreateOrConnectWithoutUserInput[]
    upsert?: ShiftUpsertWithWhereUniqueWithoutUserInput | ShiftUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShiftCreateManyUserInputEnvelope
    set?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    disconnect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    delete?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    update?: ShiftUpdateWithWhereUniqueWithoutUserInput | ShiftUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShiftUpdateManyWithWhereWithoutUserInput | ShiftUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type MachinePermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachinePermissionCreateWithoutUserInput, MachinePermissionUncheckedCreateWithoutUserInput> | MachinePermissionCreateWithoutUserInput[] | MachinePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutUserInput | MachinePermissionCreateOrConnectWithoutUserInput[]
    upsert?: MachinePermissionUpsertWithWhereUniqueWithoutUserInput | MachinePermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachinePermissionCreateManyUserInputEnvelope
    set?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    disconnect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    delete?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    update?: MachinePermissionUpdateWithWhereUniqueWithoutUserInput | MachinePermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachinePermissionUpdateManyWithWhereWithoutUserInput | MachinePermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachinePermissionScalarWhereInput | MachinePermissionScalarWhereInput[]
  }

  export type MachineStatusHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutUserInput, MachineStatusHistoryUncheckedCreateWithoutUserInput> | MachineStatusHistoryCreateWithoutUserInput[] | MachineStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutUserInput | MachineStatusHistoryCreateOrConnectWithoutUserInput[]
    upsert?: MachineStatusHistoryUpsertWithWhereUniqueWithoutUserInput | MachineStatusHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachineStatusHistoryCreateManyUserInputEnvelope
    set?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    disconnect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    delete?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    update?: MachineStatusHistoryUpdateWithWhereUniqueWithoutUserInput | MachineStatusHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachineStatusHistoryUpdateManyWithWhereWithoutUserInput | MachineStatusHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachineStatusHistoryScalarWhereInput | MachineStatusHistoryScalarWhereInput[]
  }

  export type ProductionDataUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductionDataCreateWithoutUserInput, ProductionDataUncheckedCreateWithoutUserInput> | ProductionDataCreateWithoutUserInput[] | ProductionDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutUserInput | ProductionDataCreateOrConnectWithoutUserInput[]
    upsert?: ProductionDataUpsertWithWhereUniqueWithoutUserInput | ProductionDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductionDataCreateManyUserInputEnvelope
    set?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    disconnect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    delete?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    update?: ProductionDataUpdateWithWhereUniqueWithoutUserInput | ProductionDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductionDataUpdateManyWithWhereWithoutUserInput | ProductionDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductionDataScalarWhereInput | ProductionDataScalarWhereInput[]
  }

  export type ArchiveDataUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArchiveDataCreateWithoutUserInput, ArchiveDataUncheckedCreateWithoutUserInput> | ArchiveDataCreateWithoutUserInput[] | ArchiveDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutUserInput | ArchiveDataCreateOrConnectWithoutUserInput[]
    upsert?: ArchiveDataUpsertWithWhereUniqueWithoutUserInput | ArchiveDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArchiveDataCreateManyUserInputEnvelope
    set?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    disconnect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    delete?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    update?: ArchiveDataUpdateWithWhereUniqueWithoutUserInput | ArchiveDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArchiveDataUpdateManyWithWhereWithoutUserInput | ArchiveDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArchiveDataScalarWhereInput | ArchiveDataScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QualityTestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QualityTestCreateWithoutUserInput, QualityTestUncheckedCreateWithoutUserInput> | QualityTestCreateWithoutUserInput[] | QualityTestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutUserInput | QualityTestCreateOrConnectWithoutUserInput[]
    upsert?: QualityTestUpsertWithWhereUniqueWithoutUserInput | QualityTestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QualityTestCreateManyUserInputEnvelope
    set?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    disconnect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    delete?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    update?: QualityTestUpdateWithWhereUniqueWithoutUserInput | QualityTestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QualityTestUpdateManyWithWhereWithoutUserInput | QualityTestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QualityTestScalarWhereInput | QualityTestScalarWhereInput[]
  }

  export type TeflonChangeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeflonChangeCreateWithoutUserInput, TeflonChangeUncheckedCreateWithoutUserInput> | TeflonChangeCreateWithoutUserInput[] | TeflonChangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutUserInput | TeflonChangeCreateOrConnectWithoutUserInput[]
    upsert?: TeflonChangeUpsertWithWhereUniqueWithoutUserInput | TeflonChangeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeflonChangeCreateManyUserInputEnvelope
    set?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    disconnect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    delete?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    update?: TeflonChangeUpdateWithWhereUniqueWithoutUserInput | TeflonChangeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeflonChangeUpdateManyWithWhereWithoutUserInput | TeflonChangeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeflonChangeScalarWhereInput | TeflonChangeScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MachineOperationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachineOperationCreateWithoutUserInput, MachineOperationUncheckedCreateWithoutUserInput> | MachineOperationCreateWithoutUserInput[] | MachineOperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutUserInput | MachineOperationCreateOrConnectWithoutUserInput[]
    upsert?: MachineOperationUpsertWithWhereUniqueWithoutUserInput | MachineOperationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachineOperationCreateManyUserInputEnvelope
    set?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    disconnect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    delete?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    update?: MachineOperationUpdateWithWhereUniqueWithoutUserInput | MachineOperationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachineOperationUpdateManyWithWhereWithoutUserInput | MachineOperationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachineOperationScalarWhereInput | MachineOperationScalarWhereInput[]
  }

  export type UserDeviceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDeviceCreateWithoutUserInput, UserDeviceUncheckedCreateWithoutUserInput> | UserDeviceCreateWithoutUserInput[] | UserDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDeviceCreateOrConnectWithoutUserInput | UserDeviceCreateOrConnectWithoutUserInput[]
    upsert?: UserDeviceUpsertWithWhereUniqueWithoutUserInput | UserDeviceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDeviceCreateManyUserInputEnvelope
    set?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    disconnect?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    delete?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    connect?: UserDeviceWhereUniqueInput | UserDeviceWhereUniqueInput[]
    update?: UserDeviceUpdateWithWhereUniqueWithoutUserInput | UserDeviceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDeviceUpdateManyWithWhereWithoutUserInput | UserDeviceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDeviceScalarWhereInput | UserDeviceScalarWhereInput[]
  }

  export type ShiftUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShiftCreateWithoutUserInput, ShiftUncheckedCreateWithoutUserInput> | ShiftCreateWithoutUserInput[] | ShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutUserInput | ShiftCreateOrConnectWithoutUserInput[]
    upsert?: ShiftUpsertWithWhereUniqueWithoutUserInput | ShiftUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShiftCreateManyUserInputEnvelope
    set?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    disconnect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    delete?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    update?: ShiftUpdateWithWhereUniqueWithoutUserInput | ShiftUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShiftUpdateManyWithWhereWithoutUserInput | ShiftUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type MachinePermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachinePermissionCreateWithoutUserInput, MachinePermissionUncheckedCreateWithoutUserInput> | MachinePermissionCreateWithoutUserInput[] | MachinePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutUserInput | MachinePermissionCreateOrConnectWithoutUserInput[]
    upsert?: MachinePermissionUpsertWithWhereUniqueWithoutUserInput | MachinePermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachinePermissionCreateManyUserInputEnvelope
    set?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    disconnect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    delete?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    update?: MachinePermissionUpdateWithWhereUniqueWithoutUserInput | MachinePermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachinePermissionUpdateManyWithWhereWithoutUserInput | MachinePermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachinePermissionScalarWhereInput | MachinePermissionScalarWhereInput[]
  }

  export type MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutUserInput, MachineStatusHistoryUncheckedCreateWithoutUserInput> | MachineStatusHistoryCreateWithoutUserInput[] | MachineStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutUserInput | MachineStatusHistoryCreateOrConnectWithoutUserInput[]
    upsert?: MachineStatusHistoryUpsertWithWhereUniqueWithoutUserInput | MachineStatusHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachineStatusHistoryCreateManyUserInputEnvelope
    set?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    disconnect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    delete?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    update?: MachineStatusHistoryUpdateWithWhereUniqueWithoutUserInput | MachineStatusHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachineStatusHistoryUpdateManyWithWhereWithoutUserInput | MachineStatusHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachineStatusHistoryScalarWhereInput | MachineStatusHistoryScalarWhereInput[]
  }

  export type ProductionDataUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductionDataCreateWithoutUserInput, ProductionDataUncheckedCreateWithoutUserInput> | ProductionDataCreateWithoutUserInput[] | ProductionDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutUserInput | ProductionDataCreateOrConnectWithoutUserInput[]
    upsert?: ProductionDataUpsertWithWhereUniqueWithoutUserInput | ProductionDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductionDataCreateManyUserInputEnvelope
    set?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    disconnect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    delete?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    update?: ProductionDataUpdateWithWhereUniqueWithoutUserInput | ProductionDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductionDataUpdateManyWithWhereWithoutUserInput | ProductionDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductionDataScalarWhereInput | ProductionDataScalarWhereInput[]
  }

  export type ArchiveDataUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArchiveDataCreateWithoutUserInput, ArchiveDataUncheckedCreateWithoutUserInput> | ArchiveDataCreateWithoutUserInput[] | ArchiveDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutUserInput | ArchiveDataCreateOrConnectWithoutUserInput[]
    upsert?: ArchiveDataUpsertWithWhereUniqueWithoutUserInput | ArchiveDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArchiveDataCreateManyUserInputEnvelope
    set?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    disconnect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    delete?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    update?: ArchiveDataUpdateWithWhereUniqueWithoutUserInput | ArchiveDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArchiveDataUpdateManyWithWhereWithoutUserInput | ArchiveDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArchiveDataScalarWhereInput | ArchiveDataScalarWhereInput[]
  }

  export type QualityTestCreateNestedManyWithoutMachineInput = {
    create?: XOR<QualityTestCreateWithoutMachineInput, QualityTestUncheckedCreateWithoutMachineInput> | QualityTestCreateWithoutMachineInput[] | QualityTestUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutMachineInput | QualityTestCreateOrConnectWithoutMachineInput[]
    createMany?: QualityTestCreateManyMachineInputEnvelope
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
  }

  export type TeflonChangeCreateNestedManyWithoutMachineInput = {
    create?: XOR<TeflonChangeCreateWithoutMachineInput, TeflonChangeUncheckedCreateWithoutMachineInput> | TeflonChangeCreateWithoutMachineInput[] | TeflonChangeUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutMachineInput | TeflonChangeCreateOrConnectWithoutMachineInput[]
    createMany?: TeflonChangeCreateManyMachineInputEnvelope
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
  }

  export type MachineOperationCreateNestedManyWithoutMachineInput = {
    create?: XOR<MachineOperationCreateWithoutMachineInput, MachineOperationUncheckedCreateWithoutMachineInput> | MachineOperationCreateWithoutMachineInput[] | MachineOperationUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutMachineInput | MachineOperationCreateOrConnectWithoutMachineInput[]
    createMany?: MachineOperationCreateManyMachineInputEnvelope
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
  }

  export type MachinePermissionCreateNestedManyWithoutMachineInput = {
    create?: XOR<MachinePermissionCreateWithoutMachineInput, MachinePermissionUncheckedCreateWithoutMachineInput> | MachinePermissionCreateWithoutMachineInput[] | MachinePermissionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutMachineInput | MachinePermissionCreateOrConnectWithoutMachineInput[]
    createMany?: MachinePermissionCreateManyMachineInputEnvelope
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
  }

  export type MachineStatusHistoryCreateNestedManyWithoutMachineInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutMachineInput, MachineStatusHistoryUncheckedCreateWithoutMachineInput> | MachineStatusHistoryCreateWithoutMachineInput[] | MachineStatusHistoryUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutMachineInput | MachineStatusHistoryCreateOrConnectWithoutMachineInput[]
    createMany?: MachineStatusHistoryCreateManyMachineInputEnvelope
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
  }

  export type ProductionDataCreateNestedManyWithoutMachineInput = {
    create?: XOR<ProductionDataCreateWithoutMachineInput, ProductionDataUncheckedCreateWithoutMachineInput> | ProductionDataCreateWithoutMachineInput[] | ProductionDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutMachineInput | ProductionDataCreateOrConnectWithoutMachineInput[]
    createMany?: ProductionDataCreateManyMachineInputEnvelope
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
  }

  export type ArchiveDataCreateNestedManyWithoutMachineInput = {
    create?: XOR<ArchiveDataCreateWithoutMachineInput, ArchiveDataUncheckedCreateWithoutMachineInput> | ArchiveDataCreateWithoutMachineInput[] | ArchiveDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutMachineInput | ArchiveDataCreateOrConnectWithoutMachineInput[]
    createMany?: ArchiveDataCreateManyMachineInputEnvelope
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
  }

  export type QualityTestUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<QualityTestCreateWithoutMachineInput, QualityTestUncheckedCreateWithoutMachineInput> | QualityTestCreateWithoutMachineInput[] | QualityTestUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutMachineInput | QualityTestCreateOrConnectWithoutMachineInput[]
    createMany?: QualityTestCreateManyMachineInputEnvelope
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
  }

  export type TeflonChangeUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<TeflonChangeCreateWithoutMachineInput, TeflonChangeUncheckedCreateWithoutMachineInput> | TeflonChangeCreateWithoutMachineInput[] | TeflonChangeUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutMachineInput | TeflonChangeCreateOrConnectWithoutMachineInput[]
    createMany?: TeflonChangeCreateManyMachineInputEnvelope
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
  }

  export type MachineOperationUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<MachineOperationCreateWithoutMachineInput, MachineOperationUncheckedCreateWithoutMachineInput> | MachineOperationCreateWithoutMachineInput[] | MachineOperationUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutMachineInput | MachineOperationCreateOrConnectWithoutMachineInput[]
    createMany?: MachineOperationCreateManyMachineInputEnvelope
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
  }

  export type MachinePermissionUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<MachinePermissionCreateWithoutMachineInput, MachinePermissionUncheckedCreateWithoutMachineInput> | MachinePermissionCreateWithoutMachineInput[] | MachinePermissionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutMachineInput | MachinePermissionCreateOrConnectWithoutMachineInput[]
    createMany?: MachinePermissionCreateManyMachineInputEnvelope
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
  }

  export type MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutMachineInput, MachineStatusHistoryUncheckedCreateWithoutMachineInput> | MachineStatusHistoryCreateWithoutMachineInput[] | MachineStatusHistoryUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutMachineInput | MachineStatusHistoryCreateOrConnectWithoutMachineInput[]
    createMany?: MachineStatusHistoryCreateManyMachineInputEnvelope
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
  }

  export type ProductionDataUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<ProductionDataCreateWithoutMachineInput, ProductionDataUncheckedCreateWithoutMachineInput> | ProductionDataCreateWithoutMachineInput[] | ProductionDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutMachineInput | ProductionDataCreateOrConnectWithoutMachineInput[]
    createMany?: ProductionDataCreateManyMachineInputEnvelope
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
  }

  export type ArchiveDataUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<ArchiveDataCreateWithoutMachineInput, ArchiveDataUncheckedCreateWithoutMachineInput> | ArchiveDataCreateWithoutMachineInput[] | ArchiveDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutMachineInput | ArchiveDataCreateOrConnectWithoutMachineInput[]
    createMany?: ArchiveDataCreateManyMachineInputEnvelope
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
  }

  export type QualityTestUpdateManyWithoutMachineNestedInput = {
    create?: XOR<QualityTestCreateWithoutMachineInput, QualityTestUncheckedCreateWithoutMachineInput> | QualityTestCreateWithoutMachineInput[] | QualityTestUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutMachineInput | QualityTestCreateOrConnectWithoutMachineInput[]
    upsert?: QualityTestUpsertWithWhereUniqueWithoutMachineInput | QualityTestUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: QualityTestCreateManyMachineInputEnvelope
    set?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    disconnect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    delete?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    update?: QualityTestUpdateWithWhereUniqueWithoutMachineInput | QualityTestUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: QualityTestUpdateManyWithWhereWithoutMachineInput | QualityTestUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: QualityTestScalarWhereInput | QualityTestScalarWhereInput[]
  }

  export type TeflonChangeUpdateManyWithoutMachineNestedInput = {
    create?: XOR<TeflonChangeCreateWithoutMachineInput, TeflonChangeUncheckedCreateWithoutMachineInput> | TeflonChangeCreateWithoutMachineInput[] | TeflonChangeUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutMachineInput | TeflonChangeCreateOrConnectWithoutMachineInput[]
    upsert?: TeflonChangeUpsertWithWhereUniqueWithoutMachineInput | TeflonChangeUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: TeflonChangeCreateManyMachineInputEnvelope
    set?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    disconnect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    delete?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    update?: TeflonChangeUpdateWithWhereUniqueWithoutMachineInput | TeflonChangeUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: TeflonChangeUpdateManyWithWhereWithoutMachineInput | TeflonChangeUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: TeflonChangeScalarWhereInput | TeflonChangeScalarWhereInput[]
  }

  export type MachineOperationUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MachineOperationCreateWithoutMachineInput, MachineOperationUncheckedCreateWithoutMachineInput> | MachineOperationCreateWithoutMachineInput[] | MachineOperationUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutMachineInput | MachineOperationCreateOrConnectWithoutMachineInput[]
    upsert?: MachineOperationUpsertWithWhereUniqueWithoutMachineInput | MachineOperationUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MachineOperationCreateManyMachineInputEnvelope
    set?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    disconnect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    delete?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    update?: MachineOperationUpdateWithWhereUniqueWithoutMachineInput | MachineOperationUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MachineOperationUpdateManyWithWhereWithoutMachineInput | MachineOperationUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MachineOperationScalarWhereInput | MachineOperationScalarWhereInput[]
  }

  export type MachinePermissionUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MachinePermissionCreateWithoutMachineInput, MachinePermissionUncheckedCreateWithoutMachineInput> | MachinePermissionCreateWithoutMachineInput[] | MachinePermissionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutMachineInput | MachinePermissionCreateOrConnectWithoutMachineInput[]
    upsert?: MachinePermissionUpsertWithWhereUniqueWithoutMachineInput | MachinePermissionUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MachinePermissionCreateManyMachineInputEnvelope
    set?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    disconnect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    delete?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    update?: MachinePermissionUpdateWithWhereUniqueWithoutMachineInput | MachinePermissionUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MachinePermissionUpdateManyWithWhereWithoutMachineInput | MachinePermissionUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MachinePermissionScalarWhereInput | MachinePermissionScalarWhereInput[]
  }

  export type MachineStatusHistoryUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutMachineInput, MachineStatusHistoryUncheckedCreateWithoutMachineInput> | MachineStatusHistoryCreateWithoutMachineInput[] | MachineStatusHistoryUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutMachineInput | MachineStatusHistoryCreateOrConnectWithoutMachineInput[]
    upsert?: MachineStatusHistoryUpsertWithWhereUniqueWithoutMachineInput | MachineStatusHistoryUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MachineStatusHistoryCreateManyMachineInputEnvelope
    set?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    disconnect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    delete?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    update?: MachineStatusHistoryUpdateWithWhereUniqueWithoutMachineInput | MachineStatusHistoryUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MachineStatusHistoryUpdateManyWithWhereWithoutMachineInput | MachineStatusHistoryUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MachineStatusHistoryScalarWhereInput | MachineStatusHistoryScalarWhereInput[]
  }

  export type ProductionDataUpdateManyWithoutMachineNestedInput = {
    create?: XOR<ProductionDataCreateWithoutMachineInput, ProductionDataUncheckedCreateWithoutMachineInput> | ProductionDataCreateWithoutMachineInput[] | ProductionDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutMachineInput | ProductionDataCreateOrConnectWithoutMachineInput[]
    upsert?: ProductionDataUpsertWithWhereUniqueWithoutMachineInput | ProductionDataUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: ProductionDataCreateManyMachineInputEnvelope
    set?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    disconnect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    delete?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    update?: ProductionDataUpdateWithWhereUniqueWithoutMachineInput | ProductionDataUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: ProductionDataUpdateManyWithWhereWithoutMachineInput | ProductionDataUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: ProductionDataScalarWhereInput | ProductionDataScalarWhereInput[]
  }

  export type ArchiveDataUpdateManyWithoutMachineNestedInput = {
    create?: XOR<ArchiveDataCreateWithoutMachineInput, ArchiveDataUncheckedCreateWithoutMachineInput> | ArchiveDataCreateWithoutMachineInput[] | ArchiveDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutMachineInput | ArchiveDataCreateOrConnectWithoutMachineInput[]
    upsert?: ArchiveDataUpsertWithWhereUniqueWithoutMachineInput | ArchiveDataUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: ArchiveDataCreateManyMachineInputEnvelope
    set?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    disconnect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    delete?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    update?: ArchiveDataUpdateWithWhereUniqueWithoutMachineInput | ArchiveDataUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: ArchiveDataUpdateManyWithWhereWithoutMachineInput | ArchiveDataUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: ArchiveDataScalarWhereInput | ArchiveDataScalarWhereInput[]
  }

  export type QualityTestUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<QualityTestCreateWithoutMachineInput, QualityTestUncheckedCreateWithoutMachineInput> | QualityTestCreateWithoutMachineInput[] | QualityTestUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: QualityTestCreateOrConnectWithoutMachineInput | QualityTestCreateOrConnectWithoutMachineInput[]
    upsert?: QualityTestUpsertWithWhereUniqueWithoutMachineInput | QualityTestUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: QualityTestCreateManyMachineInputEnvelope
    set?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    disconnect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    delete?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    connect?: QualityTestWhereUniqueInput | QualityTestWhereUniqueInput[]
    update?: QualityTestUpdateWithWhereUniqueWithoutMachineInput | QualityTestUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: QualityTestUpdateManyWithWhereWithoutMachineInput | QualityTestUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: QualityTestScalarWhereInput | QualityTestScalarWhereInput[]
  }

  export type TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<TeflonChangeCreateWithoutMachineInput, TeflonChangeUncheckedCreateWithoutMachineInput> | TeflonChangeCreateWithoutMachineInput[] | TeflonChangeUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: TeflonChangeCreateOrConnectWithoutMachineInput | TeflonChangeCreateOrConnectWithoutMachineInput[]
    upsert?: TeflonChangeUpsertWithWhereUniqueWithoutMachineInput | TeflonChangeUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: TeflonChangeCreateManyMachineInputEnvelope
    set?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    disconnect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    delete?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    connect?: TeflonChangeWhereUniqueInput | TeflonChangeWhereUniqueInput[]
    update?: TeflonChangeUpdateWithWhereUniqueWithoutMachineInput | TeflonChangeUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: TeflonChangeUpdateManyWithWhereWithoutMachineInput | TeflonChangeUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: TeflonChangeScalarWhereInput | TeflonChangeScalarWhereInput[]
  }

  export type MachineOperationUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MachineOperationCreateWithoutMachineInput, MachineOperationUncheckedCreateWithoutMachineInput> | MachineOperationCreateWithoutMachineInput[] | MachineOperationUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineOperationCreateOrConnectWithoutMachineInput | MachineOperationCreateOrConnectWithoutMachineInput[]
    upsert?: MachineOperationUpsertWithWhereUniqueWithoutMachineInput | MachineOperationUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MachineOperationCreateManyMachineInputEnvelope
    set?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    disconnect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    delete?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    connect?: MachineOperationWhereUniqueInput | MachineOperationWhereUniqueInput[]
    update?: MachineOperationUpdateWithWhereUniqueWithoutMachineInput | MachineOperationUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MachineOperationUpdateManyWithWhereWithoutMachineInput | MachineOperationUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MachineOperationScalarWhereInput | MachineOperationScalarWhereInput[]
  }

  export type MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MachinePermissionCreateWithoutMachineInput, MachinePermissionUncheckedCreateWithoutMachineInput> | MachinePermissionCreateWithoutMachineInput[] | MachinePermissionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachinePermissionCreateOrConnectWithoutMachineInput | MachinePermissionCreateOrConnectWithoutMachineInput[]
    upsert?: MachinePermissionUpsertWithWhereUniqueWithoutMachineInput | MachinePermissionUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MachinePermissionCreateManyMachineInputEnvelope
    set?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    disconnect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    delete?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    connect?: MachinePermissionWhereUniqueInput | MachinePermissionWhereUniqueInput[]
    update?: MachinePermissionUpdateWithWhereUniqueWithoutMachineInput | MachinePermissionUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MachinePermissionUpdateManyWithWhereWithoutMachineInput | MachinePermissionUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MachinePermissionScalarWhereInput | MachinePermissionScalarWhereInput[]
  }

  export type MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MachineStatusHistoryCreateWithoutMachineInput, MachineStatusHistoryUncheckedCreateWithoutMachineInput> | MachineStatusHistoryCreateWithoutMachineInput[] | MachineStatusHistoryUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MachineStatusHistoryCreateOrConnectWithoutMachineInput | MachineStatusHistoryCreateOrConnectWithoutMachineInput[]
    upsert?: MachineStatusHistoryUpsertWithWhereUniqueWithoutMachineInput | MachineStatusHistoryUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MachineStatusHistoryCreateManyMachineInputEnvelope
    set?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    disconnect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    delete?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    connect?: MachineStatusHistoryWhereUniqueInput | MachineStatusHistoryWhereUniqueInput[]
    update?: MachineStatusHistoryUpdateWithWhereUniqueWithoutMachineInput | MachineStatusHistoryUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MachineStatusHistoryUpdateManyWithWhereWithoutMachineInput | MachineStatusHistoryUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MachineStatusHistoryScalarWhereInput | MachineStatusHistoryScalarWhereInput[]
  }

  export type ProductionDataUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<ProductionDataCreateWithoutMachineInput, ProductionDataUncheckedCreateWithoutMachineInput> | ProductionDataCreateWithoutMachineInput[] | ProductionDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProductionDataCreateOrConnectWithoutMachineInput | ProductionDataCreateOrConnectWithoutMachineInput[]
    upsert?: ProductionDataUpsertWithWhereUniqueWithoutMachineInput | ProductionDataUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: ProductionDataCreateManyMachineInputEnvelope
    set?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    disconnect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    delete?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    connect?: ProductionDataWhereUniqueInput | ProductionDataWhereUniqueInput[]
    update?: ProductionDataUpdateWithWhereUniqueWithoutMachineInput | ProductionDataUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: ProductionDataUpdateManyWithWhereWithoutMachineInput | ProductionDataUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: ProductionDataScalarWhereInput | ProductionDataScalarWhereInput[]
  }

  export type ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<ArchiveDataCreateWithoutMachineInput, ArchiveDataUncheckedCreateWithoutMachineInput> | ArchiveDataCreateWithoutMachineInput[] | ArchiveDataUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ArchiveDataCreateOrConnectWithoutMachineInput | ArchiveDataCreateOrConnectWithoutMachineInput[]
    upsert?: ArchiveDataUpsertWithWhereUniqueWithoutMachineInput | ArchiveDataUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: ArchiveDataCreateManyMachineInputEnvelope
    set?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    disconnect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    delete?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    connect?: ArchiveDataWhereUniqueInput | ArchiveDataWhereUniqueInput[]
    update?: ArchiveDataUpdateWithWhereUniqueWithoutMachineInput | ArchiveDataUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: ArchiveDataUpdateManyWithWhereWithoutMachineInput | ArchiveDataUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: ArchiveDataScalarWhereInput | ArchiveDataScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutQualityTestsInput = {
    create?: XOR<UserCreateWithoutQualityTestsInput, UserUncheckedCreateWithoutQualityTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQualityTestsInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutQualityTestsInput = {
    create?: XOR<MachineCreateWithoutQualityTestsInput, MachineUncheckedCreateWithoutQualityTestsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutQualityTestsInput
    connect?: MachineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutQualityTestsNestedInput = {
    create?: XOR<UserCreateWithoutQualityTestsInput, UserUncheckedCreateWithoutQualityTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQualityTestsInput
    upsert?: UserUpsertWithoutQualityTestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQualityTestsInput, UserUpdateWithoutQualityTestsInput>, UserUncheckedUpdateWithoutQualityTestsInput>
  }

  export type MachineUpdateOneRequiredWithoutQualityTestsNestedInput = {
    create?: XOR<MachineCreateWithoutQualityTestsInput, MachineUncheckedCreateWithoutQualityTestsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutQualityTestsInput
    upsert?: MachineUpsertWithoutQualityTestsInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutQualityTestsInput, MachineUpdateWithoutQualityTestsInput>, MachineUncheckedUpdateWithoutQualityTestsInput>
  }

  export type UserCreateNestedOneWithoutTeflonChangesInput = {
    create?: XOR<UserCreateWithoutTeflonChangesInput, UserUncheckedCreateWithoutTeflonChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeflonChangesInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutTeflonChangesInput = {
    create?: XOR<MachineCreateWithoutTeflonChangesInput, MachineUncheckedCreateWithoutTeflonChangesInput>
    connectOrCreate?: MachineCreateOrConnectWithoutTeflonChangesInput
    connect?: MachineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTeflonChangesNestedInput = {
    create?: XOR<UserCreateWithoutTeflonChangesInput, UserUncheckedCreateWithoutTeflonChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeflonChangesInput
    upsert?: UserUpsertWithoutTeflonChangesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeflonChangesInput, UserUpdateWithoutTeflonChangesInput>, UserUncheckedUpdateWithoutTeflonChangesInput>
  }

  export type MachineUpdateOneRequiredWithoutTeflonChangesNestedInput = {
    create?: XOR<MachineCreateWithoutTeflonChangesInput, MachineUncheckedCreateWithoutTeflonChangesInput>
    connectOrCreate?: MachineCreateOrConnectWithoutTeflonChangesInput
    upsert?: MachineUpsertWithoutTeflonChangesInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutTeflonChangesInput, MachineUpdateWithoutTeflonChangesInput>, MachineUncheckedUpdateWithoutTeflonChangesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutMachineOperationsInput = {
    create?: XOR<UserCreateWithoutMachineOperationsInput, UserUncheckedCreateWithoutMachineOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMachineOperationsInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutOperationsInput = {
    create?: XOR<MachineCreateWithoutOperationsInput, MachineUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutOperationsInput
    connect?: MachineWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutMachineOperationsNestedInput = {
    create?: XOR<UserCreateWithoutMachineOperationsInput, UserUncheckedCreateWithoutMachineOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMachineOperationsInput
    upsert?: UserUpsertWithoutMachineOperationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMachineOperationsInput, UserUpdateWithoutMachineOperationsInput>, UserUncheckedUpdateWithoutMachineOperationsInput>
  }

  export type MachineUpdateOneRequiredWithoutOperationsNestedInput = {
    create?: XOR<MachineCreateWithoutOperationsInput, MachineUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutOperationsInput
    upsert?: MachineUpsertWithoutOperationsInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutOperationsInput, MachineUpdateWithoutOperationsInput>, MachineUncheckedUpdateWithoutOperationsInput>
  }

  export type UserCreateNestedOneWithoutDevicesInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    upsert?: UserUpsertWithoutDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDevicesInput, UserUpdateWithoutDevicesInput>, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type UserCreateNestedOneWithoutShiftsInput = {
    create?: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShiftsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShiftsNestedInput = {
    create?: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShiftsInput
    upsert?: UserUpsertWithoutShiftsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShiftsInput, UserUpdateWithoutShiftsInput>, UserUncheckedUpdateWithoutShiftsInput>
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserCreateNestedOneWithoutMachinePermissionsInput = {
    create?: XOR<UserCreateWithoutMachinePermissionsInput, UserUncheckedCreateWithoutMachinePermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMachinePermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<MachineCreateWithoutPermissionsInput, MachineUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutPermissionsInput
    connect?: MachineWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutMachinePermissionsNestedInput = {
    create?: XOR<UserCreateWithoutMachinePermissionsInput, UserUncheckedCreateWithoutMachinePermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMachinePermissionsInput
    upsert?: UserUpsertWithoutMachinePermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMachinePermissionsInput, UserUpdateWithoutMachinePermissionsInput>, UserUncheckedUpdateWithoutMachinePermissionsInput>
  }

  export type MachineUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<MachineCreateWithoutPermissionsInput, MachineUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutPermissionsInput
    upsert?: MachineUpsertWithoutPermissionsInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutPermissionsInput, MachineUpdateWithoutPermissionsInput>, MachineUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserCreateNestedOneWithoutStatusHistoryInput = {
    create?: XOR<UserCreateWithoutStatusHistoryInput, UserUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutStatusHistoryInput = {
    create?: XOR<MachineCreateWithoutStatusHistoryInput, MachineUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: MachineCreateOrConnectWithoutStatusHistoryInput
    connect?: MachineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStatusHistoryNestedInput = {
    create?: XOR<UserCreateWithoutStatusHistoryInput, UserUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusHistoryInput
    upsert?: UserUpsertWithoutStatusHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusHistoryInput, UserUpdateWithoutStatusHistoryInput>, UserUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type MachineUpdateOneRequiredWithoutStatusHistoryNestedInput = {
    create?: XOR<MachineCreateWithoutStatusHistoryInput, MachineUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: MachineCreateOrConnectWithoutStatusHistoryInput
    upsert?: MachineUpsertWithoutStatusHistoryInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutStatusHistoryInput, MachineUpdateWithoutStatusHistoryInput>, MachineUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type UserCreateNestedOneWithoutProductionDataInput = {
    create?: XOR<UserCreateWithoutProductionDataInput, UserUncheckedCreateWithoutProductionDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductionDataInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutProductionDataInput = {
    create?: XOR<MachineCreateWithoutProductionDataInput, MachineUncheckedCreateWithoutProductionDataInput>
    connectOrCreate?: MachineCreateOrConnectWithoutProductionDataInput
    connect?: MachineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProductionDataNestedInput = {
    create?: XOR<UserCreateWithoutProductionDataInput, UserUncheckedCreateWithoutProductionDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductionDataInput
    upsert?: UserUpsertWithoutProductionDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProductionDataInput, UserUpdateWithoutProductionDataInput>, UserUncheckedUpdateWithoutProductionDataInput>
  }

  export type MachineUpdateOneRequiredWithoutProductionDataNestedInput = {
    create?: XOR<MachineCreateWithoutProductionDataInput, MachineUncheckedCreateWithoutProductionDataInput>
    connectOrCreate?: MachineCreateOrConnectWithoutProductionDataInput
    upsert?: MachineUpsertWithoutProductionDataInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutProductionDataInput, MachineUpdateWithoutProductionDataInput>, MachineUncheckedUpdateWithoutProductionDataInput>
  }

  export type UserCreateNestedOneWithoutArchiveDataInput = {
    create?: XOR<UserCreateWithoutArchiveDataInput, UserUncheckedCreateWithoutArchiveDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutArchiveDataInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutArchiveDataInput = {
    create?: XOR<MachineCreateWithoutArchiveDataInput, MachineUncheckedCreateWithoutArchiveDataInput>
    connectOrCreate?: MachineCreateOrConnectWithoutArchiveDataInput
    connect?: MachineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutArchiveDataNestedInput = {
    create?: XOR<UserCreateWithoutArchiveDataInput, UserUncheckedCreateWithoutArchiveDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutArchiveDataInput
    upsert?: UserUpsertWithoutArchiveDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutArchiveDataInput, UserUpdateWithoutArchiveDataInput>, UserUncheckedUpdateWithoutArchiveDataInput>
  }

  export type MachineUpdateOneRequiredWithoutArchiveDataNestedInput = {
    create?: XOR<MachineCreateWithoutArchiveDataInput, MachineUncheckedCreateWithoutArchiveDataInput>
    connectOrCreate?: MachineCreateOrConnectWithoutArchiveDataInput
    upsert?: MachineUpsertWithoutArchiveDataInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutArchiveDataInput, MachineUpdateWithoutArchiveDataInput>, MachineUncheckedUpdateWithoutArchiveDataInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type QualityTestCreateWithoutUserInput = {
    createdAt?: Date | string
    machine: MachineCreateNestedOneWithoutQualityTestsInput
  }

  export type QualityTestUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
    createdAt?: Date | string
  }

  export type QualityTestCreateOrConnectWithoutUserInput = {
    where: QualityTestWhereUniqueInput
    create: XOR<QualityTestCreateWithoutUserInput, QualityTestUncheckedCreateWithoutUserInput>
  }

  export type QualityTestCreateManyUserInputEnvelope = {
    data: QualityTestCreateManyUserInput | QualityTestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeflonChangeCreateWithoutUserInput = {
    createdAt?: Date | string
    machine: MachineCreateNestedOneWithoutTeflonChangesInput
  }

  export type TeflonChangeUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
    createdAt?: Date | string
  }

  export type TeflonChangeCreateOrConnectWithoutUserInput = {
    where: TeflonChangeWhereUniqueInput
    create: XOR<TeflonChangeCreateWithoutUserInput, TeflonChangeUncheckedCreateWithoutUserInput>
  }

  export type TeflonChangeCreateManyUserInputEnvelope = {
    data: TeflonChangeCreateManyUserInput | TeflonChangeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    message: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MachineOperationCreateWithoutUserInput = {
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    machine: MachineCreateNestedOneWithoutOperationsInput
  }

  export type MachineOperationUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type MachineOperationCreateOrConnectWithoutUserInput = {
    where: MachineOperationWhereUniqueInput
    create: XOR<MachineOperationCreateWithoutUserInput, MachineOperationUncheckedCreateWithoutUserInput>
  }

  export type MachineOperationCreateManyUserInputEnvelope = {
    data: MachineOperationCreateManyUserInput | MachineOperationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserDeviceCreateWithoutUserInput = {
    token: string
  }

  export type UserDeviceUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
  }

  export type UserDeviceCreateOrConnectWithoutUserInput = {
    where: UserDeviceWhereUniqueInput
    create: XOR<UserDeviceCreateWithoutUserInput, UserDeviceUncheckedCreateWithoutUserInput>
  }

  export type UserDeviceCreateManyUserInputEnvelope = {
    data: UserDeviceCreateManyUserInput | UserDeviceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShiftCreateWithoutUserInput = {

  }

  export type ShiftUncheckedCreateWithoutUserInput = {
    id?: number
  }

  export type ShiftCreateOrConnectWithoutUserInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutUserInput, ShiftUncheckedCreateWithoutUserInput>
  }

  export type ShiftCreateManyUserInputEnvelope = {
    data: ShiftCreateManyUserInput | ShiftCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutUserInput = {

  }

  export type ReportUncheckedCreateWithoutUserInput = {
    id?: number
  }

  export type ReportCreateOrConnectWithoutUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportCreateManyUserInputEnvelope = {
    data: ReportCreateManyUserInput | ReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {

  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: number
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MachinePermissionCreateWithoutUserInput = {
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    machine: MachineCreateNestedOneWithoutPermissionsInput
  }

  export type MachinePermissionUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachinePermissionCreateOrConnectWithoutUserInput = {
    where: MachinePermissionWhereUniqueInput
    create: XOR<MachinePermissionCreateWithoutUserInput, MachinePermissionUncheckedCreateWithoutUserInput>
  }

  export type MachinePermissionCreateManyUserInputEnvelope = {
    data: MachinePermissionCreateManyUserInput | MachinePermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MachineStatusHistoryCreateWithoutUserInput = {
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    machine: MachineCreateNestedOneWithoutStatusHistoryInput
  }

  export type MachineStatusHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineStatusHistoryCreateOrConnectWithoutUserInput = {
    where: MachineStatusHistoryWhereUniqueInput
    create: XOR<MachineStatusHistoryCreateWithoutUserInput, MachineStatusHistoryUncheckedCreateWithoutUserInput>
  }

  export type MachineStatusHistoryCreateManyUserInputEnvelope = {
    data: MachineStatusHistoryCreateManyUserInput | MachineStatusHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProductionDataCreateWithoutUserInput = {
    machine: MachineCreateNestedOneWithoutProductionDataInput
  }

  export type ProductionDataUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
  }

  export type ProductionDataCreateOrConnectWithoutUserInput = {
    where: ProductionDataWhereUniqueInput
    create: XOR<ProductionDataCreateWithoutUserInput, ProductionDataUncheckedCreateWithoutUserInput>
  }

  export type ProductionDataCreateManyUserInputEnvelope = {
    data: ProductionDataCreateManyUserInput | ProductionDataCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ArchiveDataCreateWithoutUserInput = {
    machine: MachineCreateNestedOneWithoutArchiveDataInput
  }

  export type ArchiveDataUncheckedCreateWithoutUserInput = {
    id?: number
    machineId: number
  }

  export type ArchiveDataCreateOrConnectWithoutUserInput = {
    where: ArchiveDataWhereUniqueInput
    create: XOR<ArchiveDataCreateWithoutUserInput, ArchiveDataUncheckedCreateWithoutUserInput>
  }

  export type ArchiveDataCreateManyUserInputEnvelope = {
    data: ArchiveDataCreateManyUserInput | ArchiveDataCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QualityTestUpsertWithWhereUniqueWithoutUserInput = {
    where: QualityTestWhereUniqueInput
    update: XOR<QualityTestUpdateWithoutUserInput, QualityTestUncheckedUpdateWithoutUserInput>
    create: XOR<QualityTestCreateWithoutUserInput, QualityTestUncheckedCreateWithoutUserInput>
  }

  export type QualityTestUpdateWithWhereUniqueWithoutUserInput = {
    where: QualityTestWhereUniqueInput
    data: XOR<QualityTestUpdateWithoutUserInput, QualityTestUncheckedUpdateWithoutUserInput>
  }

  export type QualityTestUpdateManyWithWhereWithoutUserInput = {
    where: QualityTestScalarWhereInput
    data: XOR<QualityTestUpdateManyMutationInput, QualityTestUncheckedUpdateManyWithoutUserInput>
  }

  export type QualityTestScalarWhereInput = {
    AND?: QualityTestScalarWhereInput | QualityTestScalarWhereInput[]
    OR?: QualityTestScalarWhereInput[]
    NOT?: QualityTestScalarWhereInput | QualityTestScalarWhereInput[]
    id?: IntFilter<"QualityTest"> | number
    userId?: IntFilter<"QualityTest"> | number
    machineId?: IntFilter<"QualityTest"> | number
    createdAt?: DateTimeFilter<"QualityTest"> | Date | string
  }

  export type TeflonChangeUpsertWithWhereUniqueWithoutUserInput = {
    where: TeflonChangeWhereUniqueInput
    update: XOR<TeflonChangeUpdateWithoutUserInput, TeflonChangeUncheckedUpdateWithoutUserInput>
    create: XOR<TeflonChangeCreateWithoutUserInput, TeflonChangeUncheckedCreateWithoutUserInput>
  }

  export type TeflonChangeUpdateWithWhereUniqueWithoutUserInput = {
    where: TeflonChangeWhereUniqueInput
    data: XOR<TeflonChangeUpdateWithoutUserInput, TeflonChangeUncheckedUpdateWithoutUserInput>
  }

  export type TeflonChangeUpdateManyWithWhereWithoutUserInput = {
    where: TeflonChangeScalarWhereInput
    data: XOR<TeflonChangeUpdateManyMutationInput, TeflonChangeUncheckedUpdateManyWithoutUserInput>
  }

  export type TeflonChangeScalarWhereInput = {
    AND?: TeflonChangeScalarWhereInput | TeflonChangeScalarWhereInput[]
    OR?: TeflonChangeScalarWhereInput[]
    NOT?: TeflonChangeScalarWhereInput | TeflonChangeScalarWhereInput[]
    id?: IntFilter<"TeflonChange"> | number
    userId?: IntFilter<"TeflonChange"> | number
    machineId?: IntFilter<"TeflonChange"> | number
    createdAt?: DateTimeFilter<"TeflonChange"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type MachineOperationUpsertWithWhereUniqueWithoutUserInput = {
    where: MachineOperationWhereUniqueInput
    update: XOR<MachineOperationUpdateWithoutUserInput, MachineOperationUncheckedUpdateWithoutUserInput>
    create: XOR<MachineOperationCreateWithoutUserInput, MachineOperationUncheckedCreateWithoutUserInput>
  }

  export type MachineOperationUpdateWithWhereUniqueWithoutUserInput = {
    where: MachineOperationWhereUniqueInput
    data: XOR<MachineOperationUpdateWithoutUserInput, MachineOperationUncheckedUpdateWithoutUserInput>
  }

  export type MachineOperationUpdateManyWithWhereWithoutUserInput = {
    where: MachineOperationScalarWhereInput
    data: XOR<MachineOperationUpdateManyMutationInput, MachineOperationUncheckedUpdateManyWithoutUserInput>
  }

  export type MachineOperationScalarWhereInput = {
    AND?: MachineOperationScalarWhereInput | MachineOperationScalarWhereInput[]
    OR?: MachineOperationScalarWhereInput[]
    NOT?: MachineOperationScalarWhereInput | MachineOperationScalarWhereInput[]
    id?: IntFilter<"MachineOperation"> | number
    userId?: IntFilter<"MachineOperation"> | number
    machineId?: IntFilter<"MachineOperation"> | number
    status?: StringFilter<"MachineOperation"> | string
    startTime?: DateTimeFilter<"MachineOperation"> | Date | string
    endTime?: DateTimeNullableFilter<"MachineOperation"> | Date | string | null
    createdAt?: DateTimeFilter<"MachineOperation"> | Date | string
  }

  export type UserDeviceUpsertWithWhereUniqueWithoutUserInput = {
    where: UserDeviceWhereUniqueInput
    update: XOR<UserDeviceUpdateWithoutUserInput, UserDeviceUncheckedUpdateWithoutUserInput>
    create: XOR<UserDeviceCreateWithoutUserInput, UserDeviceUncheckedCreateWithoutUserInput>
  }

  export type UserDeviceUpdateWithWhereUniqueWithoutUserInput = {
    where: UserDeviceWhereUniqueInput
    data: XOR<UserDeviceUpdateWithoutUserInput, UserDeviceUncheckedUpdateWithoutUserInput>
  }

  export type UserDeviceUpdateManyWithWhereWithoutUserInput = {
    where: UserDeviceScalarWhereInput
    data: XOR<UserDeviceUpdateManyMutationInput, UserDeviceUncheckedUpdateManyWithoutUserInput>
  }

  export type UserDeviceScalarWhereInput = {
    AND?: UserDeviceScalarWhereInput | UserDeviceScalarWhereInput[]
    OR?: UserDeviceScalarWhereInput[]
    NOT?: UserDeviceScalarWhereInput | UserDeviceScalarWhereInput[]
    id?: IntFilter<"UserDevice"> | number
    userId?: IntFilter<"UserDevice"> | number
    token?: StringFilter<"UserDevice"> | string
  }

  export type ShiftUpsertWithWhereUniqueWithoutUserInput = {
    where: ShiftWhereUniqueInput
    update: XOR<ShiftUpdateWithoutUserInput, ShiftUncheckedUpdateWithoutUserInput>
    create: XOR<ShiftCreateWithoutUserInput, ShiftUncheckedCreateWithoutUserInput>
  }

  export type ShiftUpdateWithWhereUniqueWithoutUserInput = {
    where: ShiftWhereUniqueInput
    data: XOR<ShiftUpdateWithoutUserInput, ShiftUncheckedUpdateWithoutUserInput>
  }

  export type ShiftUpdateManyWithWhereWithoutUserInput = {
    where: ShiftScalarWhereInput
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyWithoutUserInput>
  }

  export type ShiftScalarWhereInput = {
    AND?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
    OR?: ShiftScalarWhereInput[]
    NOT?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
    id?: IntFilter<"Shift"> | number
    userId?: IntFilter<"Shift"> | number
  }

  export type ReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: IntFilter<"Report"> | number
    userId?: IntFilter<"Report"> | number
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    userId?: IntFilter<"UserPermission"> | number
  }

  export type MachinePermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: MachinePermissionWhereUniqueInput
    update: XOR<MachinePermissionUpdateWithoutUserInput, MachinePermissionUncheckedUpdateWithoutUserInput>
    create: XOR<MachinePermissionCreateWithoutUserInput, MachinePermissionUncheckedCreateWithoutUserInput>
  }

  export type MachinePermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: MachinePermissionWhereUniqueInput
    data: XOR<MachinePermissionUpdateWithoutUserInput, MachinePermissionUncheckedUpdateWithoutUserInput>
  }

  export type MachinePermissionUpdateManyWithWhereWithoutUserInput = {
    where: MachinePermissionScalarWhereInput
    data: XOR<MachinePermissionUpdateManyMutationInput, MachinePermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type MachinePermissionScalarWhereInput = {
    AND?: MachinePermissionScalarWhereInput | MachinePermissionScalarWhereInput[]
    OR?: MachinePermissionScalarWhereInput[]
    NOT?: MachinePermissionScalarWhereInput | MachinePermissionScalarWhereInput[]
    id?: IntFilter<"MachinePermission"> | number
    userId?: IntFilter<"MachinePermission"> | number
    machineId?: IntFilter<"MachinePermission"> | number
    canView?: BoolFilter<"MachinePermission"> | boolean
    canOperate?: BoolFilter<"MachinePermission"> | boolean
    canEdit?: BoolFilter<"MachinePermission"> | boolean
    grantedBy?: IntNullableFilter<"MachinePermission"> | number | null
    createdAt?: DateTimeFilter<"MachinePermission"> | Date | string
    updatedAt?: DateTimeFilter<"MachinePermission"> | Date | string
  }

  export type MachineStatusHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: MachineStatusHistoryWhereUniqueInput
    update: XOR<MachineStatusHistoryUpdateWithoutUserInput, MachineStatusHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<MachineStatusHistoryCreateWithoutUserInput, MachineStatusHistoryUncheckedCreateWithoutUserInput>
  }

  export type MachineStatusHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: MachineStatusHistoryWhereUniqueInput
    data: XOR<MachineStatusHistoryUpdateWithoutUserInput, MachineStatusHistoryUncheckedUpdateWithoutUserInput>
  }

  export type MachineStatusHistoryUpdateManyWithWhereWithoutUserInput = {
    where: MachineStatusHistoryScalarWhereInput
    data: XOR<MachineStatusHistoryUpdateManyMutationInput, MachineStatusHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type MachineStatusHistoryScalarWhereInput = {
    AND?: MachineStatusHistoryScalarWhereInput | MachineStatusHistoryScalarWhereInput[]
    OR?: MachineStatusHistoryScalarWhereInput[]
    NOT?: MachineStatusHistoryScalarWhereInput | MachineStatusHistoryScalarWhereInput[]
    id?: IntFilter<"MachineStatusHistory"> | number
    userId?: IntFilter<"MachineStatusHistory"> | number
    machineId?: IntFilter<"MachineStatusHistory"> | number
    status?: StringFilter<"MachineStatusHistory"> | string
    reason?: StringNullableFilter<"MachineStatusHistory"> | string | null
    notes?: StringNullableFilter<"MachineStatusHistory"> | string | null
    timestamp?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    createdAt?: DateTimeFilter<"MachineStatusHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MachineStatusHistory"> | Date | string
  }

  export type ProductionDataUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductionDataWhereUniqueInput
    update: XOR<ProductionDataUpdateWithoutUserInput, ProductionDataUncheckedUpdateWithoutUserInput>
    create: XOR<ProductionDataCreateWithoutUserInput, ProductionDataUncheckedCreateWithoutUserInput>
  }

  export type ProductionDataUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductionDataWhereUniqueInput
    data: XOR<ProductionDataUpdateWithoutUserInput, ProductionDataUncheckedUpdateWithoutUserInput>
  }

  export type ProductionDataUpdateManyWithWhereWithoutUserInput = {
    where: ProductionDataScalarWhereInput
    data: XOR<ProductionDataUpdateManyMutationInput, ProductionDataUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductionDataScalarWhereInput = {
    AND?: ProductionDataScalarWhereInput | ProductionDataScalarWhereInput[]
    OR?: ProductionDataScalarWhereInput[]
    NOT?: ProductionDataScalarWhereInput | ProductionDataScalarWhereInput[]
    id?: IntFilter<"ProductionData"> | number
    userId?: IntFilter<"ProductionData"> | number
    machineId?: IntFilter<"ProductionData"> | number
  }

  export type ArchiveDataUpsertWithWhereUniqueWithoutUserInput = {
    where: ArchiveDataWhereUniqueInput
    update: XOR<ArchiveDataUpdateWithoutUserInput, ArchiveDataUncheckedUpdateWithoutUserInput>
    create: XOR<ArchiveDataCreateWithoutUserInput, ArchiveDataUncheckedCreateWithoutUserInput>
  }

  export type ArchiveDataUpdateWithWhereUniqueWithoutUserInput = {
    where: ArchiveDataWhereUniqueInput
    data: XOR<ArchiveDataUpdateWithoutUserInput, ArchiveDataUncheckedUpdateWithoutUserInput>
  }

  export type ArchiveDataUpdateManyWithWhereWithoutUserInput = {
    where: ArchiveDataScalarWhereInput
    data: XOR<ArchiveDataUpdateManyMutationInput, ArchiveDataUncheckedUpdateManyWithoutUserInput>
  }

  export type ArchiveDataScalarWhereInput = {
    AND?: ArchiveDataScalarWhereInput | ArchiveDataScalarWhereInput[]
    OR?: ArchiveDataScalarWhereInput[]
    NOT?: ArchiveDataScalarWhereInput | ArchiveDataScalarWhereInput[]
    id?: IntFilter<"ArchiveData"> | number
    userId?: IntFilter<"ArchiveData"> | number
    machineId?: IntFilter<"ArchiveData"> | number
  }

  export type QualityTestCreateWithoutMachineInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutQualityTestsInput
  }

  export type QualityTestUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type QualityTestCreateOrConnectWithoutMachineInput = {
    where: QualityTestWhereUniqueInput
    create: XOR<QualityTestCreateWithoutMachineInput, QualityTestUncheckedCreateWithoutMachineInput>
  }

  export type QualityTestCreateManyMachineInputEnvelope = {
    data: QualityTestCreateManyMachineInput | QualityTestCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type TeflonChangeCreateWithoutMachineInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTeflonChangesInput
  }

  export type TeflonChangeUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type TeflonChangeCreateOrConnectWithoutMachineInput = {
    where: TeflonChangeWhereUniqueInput
    create: XOR<TeflonChangeCreateWithoutMachineInput, TeflonChangeUncheckedCreateWithoutMachineInput>
  }

  export type TeflonChangeCreateManyMachineInputEnvelope = {
    data: TeflonChangeCreateManyMachineInput | TeflonChangeCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type MachineOperationCreateWithoutMachineInput = {
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMachineOperationsInput
  }

  export type MachineOperationUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type MachineOperationCreateOrConnectWithoutMachineInput = {
    where: MachineOperationWhereUniqueInput
    create: XOR<MachineOperationCreateWithoutMachineInput, MachineOperationUncheckedCreateWithoutMachineInput>
  }

  export type MachineOperationCreateManyMachineInputEnvelope = {
    data: MachineOperationCreateManyMachineInput | MachineOperationCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type MachinePermissionCreateWithoutMachineInput = {
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMachinePermissionsInput
  }

  export type MachinePermissionUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachinePermissionCreateOrConnectWithoutMachineInput = {
    where: MachinePermissionWhereUniqueInput
    create: XOR<MachinePermissionCreateWithoutMachineInput, MachinePermissionUncheckedCreateWithoutMachineInput>
  }

  export type MachinePermissionCreateManyMachineInputEnvelope = {
    data: MachinePermissionCreateManyMachineInput | MachinePermissionCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type MachineStatusHistoryCreateWithoutMachineInput = {
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStatusHistoryInput
  }

  export type MachineStatusHistoryUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineStatusHistoryCreateOrConnectWithoutMachineInput = {
    where: MachineStatusHistoryWhereUniqueInput
    create: XOR<MachineStatusHistoryCreateWithoutMachineInput, MachineStatusHistoryUncheckedCreateWithoutMachineInput>
  }

  export type MachineStatusHistoryCreateManyMachineInputEnvelope = {
    data: MachineStatusHistoryCreateManyMachineInput | MachineStatusHistoryCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type ProductionDataCreateWithoutMachineInput = {
    user: UserCreateNestedOneWithoutProductionDataInput
  }

  export type ProductionDataUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
  }

  export type ProductionDataCreateOrConnectWithoutMachineInput = {
    where: ProductionDataWhereUniqueInput
    create: XOR<ProductionDataCreateWithoutMachineInput, ProductionDataUncheckedCreateWithoutMachineInput>
  }

  export type ProductionDataCreateManyMachineInputEnvelope = {
    data: ProductionDataCreateManyMachineInput | ProductionDataCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type ArchiveDataCreateWithoutMachineInput = {
    user: UserCreateNestedOneWithoutArchiveDataInput
  }

  export type ArchiveDataUncheckedCreateWithoutMachineInput = {
    id?: number
    userId: number
  }

  export type ArchiveDataCreateOrConnectWithoutMachineInput = {
    where: ArchiveDataWhereUniqueInput
    create: XOR<ArchiveDataCreateWithoutMachineInput, ArchiveDataUncheckedCreateWithoutMachineInput>
  }

  export type ArchiveDataCreateManyMachineInputEnvelope = {
    data: ArchiveDataCreateManyMachineInput | ArchiveDataCreateManyMachineInput[]
    skipDuplicates?: boolean
  }

  export type QualityTestUpsertWithWhereUniqueWithoutMachineInput = {
    where: QualityTestWhereUniqueInput
    update: XOR<QualityTestUpdateWithoutMachineInput, QualityTestUncheckedUpdateWithoutMachineInput>
    create: XOR<QualityTestCreateWithoutMachineInput, QualityTestUncheckedCreateWithoutMachineInput>
  }

  export type QualityTestUpdateWithWhereUniqueWithoutMachineInput = {
    where: QualityTestWhereUniqueInput
    data: XOR<QualityTestUpdateWithoutMachineInput, QualityTestUncheckedUpdateWithoutMachineInput>
  }

  export type QualityTestUpdateManyWithWhereWithoutMachineInput = {
    where: QualityTestScalarWhereInput
    data: XOR<QualityTestUpdateManyMutationInput, QualityTestUncheckedUpdateManyWithoutMachineInput>
  }

  export type TeflonChangeUpsertWithWhereUniqueWithoutMachineInput = {
    where: TeflonChangeWhereUniqueInput
    update: XOR<TeflonChangeUpdateWithoutMachineInput, TeflonChangeUncheckedUpdateWithoutMachineInput>
    create: XOR<TeflonChangeCreateWithoutMachineInput, TeflonChangeUncheckedCreateWithoutMachineInput>
  }

  export type TeflonChangeUpdateWithWhereUniqueWithoutMachineInput = {
    where: TeflonChangeWhereUniqueInput
    data: XOR<TeflonChangeUpdateWithoutMachineInput, TeflonChangeUncheckedUpdateWithoutMachineInput>
  }

  export type TeflonChangeUpdateManyWithWhereWithoutMachineInput = {
    where: TeflonChangeScalarWhereInput
    data: XOR<TeflonChangeUpdateManyMutationInput, TeflonChangeUncheckedUpdateManyWithoutMachineInput>
  }

  export type MachineOperationUpsertWithWhereUniqueWithoutMachineInput = {
    where: MachineOperationWhereUniqueInput
    update: XOR<MachineOperationUpdateWithoutMachineInput, MachineOperationUncheckedUpdateWithoutMachineInput>
    create: XOR<MachineOperationCreateWithoutMachineInput, MachineOperationUncheckedCreateWithoutMachineInput>
  }

  export type MachineOperationUpdateWithWhereUniqueWithoutMachineInput = {
    where: MachineOperationWhereUniqueInput
    data: XOR<MachineOperationUpdateWithoutMachineInput, MachineOperationUncheckedUpdateWithoutMachineInput>
  }

  export type MachineOperationUpdateManyWithWhereWithoutMachineInput = {
    where: MachineOperationScalarWhereInput
    data: XOR<MachineOperationUpdateManyMutationInput, MachineOperationUncheckedUpdateManyWithoutMachineInput>
  }

  export type MachinePermissionUpsertWithWhereUniqueWithoutMachineInput = {
    where: MachinePermissionWhereUniqueInput
    update: XOR<MachinePermissionUpdateWithoutMachineInput, MachinePermissionUncheckedUpdateWithoutMachineInput>
    create: XOR<MachinePermissionCreateWithoutMachineInput, MachinePermissionUncheckedCreateWithoutMachineInput>
  }

  export type MachinePermissionUpdateWithWhereUniqueWithoutMachineInput = {
    where: MachinePermissionWhereUniqueInput
    data: XOR<MachinePermissionUpdateWithoutMachineInput, MachinePermissionUncheckedUpdateWithoutMachineInput>
  }

  export type MachinePermissionUpdateManyWithWhereWithoutMachineInput = {
    where: MachinePermissionScalarWhereInput
    data: XOR<MachinePermissionUpdateManyMutationInput, MachinePermissionUncheckedUpdateManyWithoutMachineInput>
  }

  export type MachineStatusHistoryUpsertWithWhereUniqueWithoutMachineInput = {
    where: MachineStatusHistoryWhereUniqueInput
    update: XOR<MachineStatusHistoryUpdateWithoutMachineInput, MachineStatusHistoryUncheckedUpdateWithoutMachineInput>
    create: XOR<MachineStatusHistoryCreateWithoutMachineInput, MachineStatusHistoryUncheckedCreateWithoutMachineInput>
  }

  export type MachineStatusHistoryUpdateWithWhereUniqueWithoutMachineInput = {
    where: MachineStatusHistoryWhereUniqueInput
    data: XOR<MachineStatusHistoryUpdateWithoutMachineInput, MachineStatusHistoryUncheckedUpdateWithoutMachineInput>
  }

  export type MachineStatusHistoryUpdateManyWithWhereWithoutMachineInput = {
    where: MachineStatusHistoryScalarWhereInput
    data: XOR<MachineStatusHistoryUpdateManyMutationInput, MachineStatusHistoryUncheckedUpdateManyWithoutMachineInput>
  }

  export type ProductionDataUpsertWithWhereUniqueWithoutMachineInput = {
    where: ProductionDataWhereUniqueInput
    update: XOR<ProductionDataUpdateWithoutMachineInput, ProductionDataUncheckedUpdateWithoutMachineInput>
    create: XOR<ProductionDataCreateWithoutMachineInput, ProductionDataUncheckedCreateWithoutMachineInput>
  }

  export type ProductionDataUpdateWithWhereUniqueWithoutMachineInput = {
    where: ProductionDataWhereUniqueInput
    data: XOR<ProductionDataUpdateWithoutMachineInput, ProductionDataUncheckedUpdateWithoutMachineInput>
  }

  export type ProductionDataUpdateManyWithWhereWithoutMachineInput = {
    where: ProductionDataScalarWhereInput
    data: XOR<ProductionDataUpdateManyMutationInput, ProductionDataUncheckedUpdateManyWithoutMachineInput>
  }

  export type ArchiveDataUpsertWithWhereUniqueWithoutMachineInput = {
    where: ArchiveDataWhereUniqueInput
    update: XOR<ArchiveDataUpdateWithoutMachineInput, ArchiveDataUncheckedUpdateWithoutMachineInput>
    create: XOR<ArchiveDataCreateWithoutMachineInput, ArchiveDataUncheckedCreateWithoutMachineInput>
  }

  export type ArchiveDataUpdateWithWhereUniqueWithoutMachineInput = {
    where: ArchiveDataWhereUniqueInput
    data: XOR<ArchiveDataUpdateWithoutMachineInput, ArchiveDataUncheckedUpdateWithoutMachineInput>
  }

  export type ArchiveDataUpdateManyWithWhereWithoutMachineInput = {
    where: ArchiveDataScalarWhereInput
    data: XOR<ArchiveDataUpdateManyMutationInput, ArchiveDataUncheckedUpdateManyWithoutMachineInput>
  }

  export type UserCreateWithoutQualityTestsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQualityTestsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQualityTestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQualityTestsInput, UserUncheckedCreateWithoutQualityTestsInput>
  }

  export type MachineCreateWithoutQualityTestsInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutQualityTestsInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutQualityTestsInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutQualityTestsInput, MachineUncheckedCreateWithoutQualityTestsInput>
  }

  export type UserUpsertWithoutQualityTestsInput = {
    update: XOR<UserUpdateWithoutQualityTestsInput, UserUncheckedUpdateWithoutQualityTestsInput>
    create: XOR<UserCreateWithoutQualityTestsInput, UserUncheckedCreateWithoutQualityTestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQualityTestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQualityTestsInput, UserUncheckedUpdateWithoutQualityTestsInput>
  }

  export type UserUpdateWithoutQualityTestsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQualityTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutQualityTestsInput = {
    update: XOR<MachineUpdateWithoutQualityTestsInput, MachineUncheckedUpdateWithoutQualityTestsInput>
    create: XOR<MachineCreateWithoutQualityTestsInput, MachineUncheckedCreateWithoutQualityTestsInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutQualityTestsInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutQualityTestsInput, MachineUncheckedUpdateWithoutQualityTestsInput>
  }

  export type MachineUpdateWithoutQualityTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutQualityTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type UserCreateWithoutTeflonChangesInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeflonChangesInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeflonChangesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeflonChangesInput, UserUncheckedCreateWithoutTeflonChangesInput>
  }

  export type MachineCreateWithoutTeflonChangesInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutTeflonChangesInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutTeflonChangesInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutTeflonChangesInput, MachineUncheckedCreateWithoutTeflonChangesInput>
  }

  export type UserUpsertWithoutTeflonChangesInput = {
    update: XOR<UserUpdateWithoutTeflonChangesInput, UserUncheckedUpdateWithoutTeflonChangesInput>
    create: XOR<UserCreateWithoutTeflonChangesInput, UserUncheckedCreateWithoutTeflonChangesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeflonChangesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeflonChangesInput, UserUncheckedUpdateWithoutTeflonChangesInput>
  }

  export type UserUpdateWithoutTeflonChangesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeflonChangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutTeflonChangesInput = {
    update: XOR<MachineUpdateWithoutTeflonChangesInput, MachineUncheckedUpdateWithoutTeflonChangesInput>
    create: XOR<MachineCreateWithoutTeflonChangesInput, MachineUncheckedCreateWithoutTeflonChangesInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutTeflonChangesInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutTeflonChangesInput, MachineUncheckedUpdateWithoutTeflonChangesInput>
  }

  export type MachineUpdateWithoutTeflonChangesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutTeflonChangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMachineOperationsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMachineOperationsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMachineOperationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMachineOperationsInput, UserUncheckedCreateWithoutMachineOperationsInput>
  }

  export type MachineCreateWithoutOperationsInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutOperationsInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutOperationsInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutOperationsInput, MachineUncheckedCreateWithoutOperationsInput>
  }

  export type UserUpsertWithoutMachineOperationsInput = {
    update: XOR<UserUpdateWithoutMachineOperationsInput, UserUncheckedUpdateWithoutMachineOperationsInput>
    create: XOR<UserCreateWithoutMachineOperationsInput, UserUncheckedCreateWithoutMachineOperationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMachineOperationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMachineOperationsInput, UserUncheckedUpdateWithoutMachineOperationsInput>
  }

  export type UserUpdateWithoutMachineOperationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMachineOperationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutOperationsInput = {
    update: XOR<MachineUpdateWithoutOperationsInput, MachineUncheckedUpdateWithoutOperationsInput>
    create: XOR<MachineCreateWithoutOperationsInput, MachineUncheckedCreateWithoutOperationsInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutOperationsInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutOperationsInput, MachineUncheckedUpdateWithoutOperationsInput>
  }

  export type MachineUpdateWithoutOperationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutOperationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type UserCreateWithoutDevicesInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDevicesInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type UserUpsertWithoutDevicesInput = {
    update: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDevicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type UserUpdateWithoutDevicesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutShiftsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShiftsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShiftsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
  }

  export type UserUpsertWithoutShiftsInput = {
    update: XOR<UserUpdateWithoutShiftsInput, UserUncheckedUpdateWithoutShiftsInput>
    create: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShiftsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShiftsInput, UserUncheckedUpdateWithoutShiftsInput>
  }

  export type UserUpdateWithoutShiftsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShiftsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutReportsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPermissionsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMachinePermissionsInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMachinePermissionsInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMachinePermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMachinePermissionsInput, UserUncheckedCreateWithoutMachinePermissionsInput>
  }

  export type MachineCreateWithoutPermissionsInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutPermissionsInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutPermissionsInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutPermissionsInput, MachineUncheckedCreateWithoutPermissionsInput>
  }

  export type UserUpsertWithoutMachinePermissionsInput = {
    update: XOR<UserUpdateWithoutMachinePermissionsInput, UserUncheckedUpdateWithoutMachinePermissionsInput>
    create: XOR<UserCreateWithoutMachinePermissionsInput, UserUncheckedCreateWithoutMachinePermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMachinePermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMachinePermissionsInput, UserUncheckedUpdateWithoutMachinePermissionsInput>
  }

  export type UserUpdateWithoutMachinePermissionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMachinePermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutPermissionsInput = {
    update: XOR<MachineUpdateWithoutPermissionsInput, MachineUncheckedUpdateWithoutPermissionsInput>
    create: XOR<MachineCreateWithoutPermissionsInput, MachineUncheckedCreateWithoutPermissionsInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutPermissionsInput, MachineUncheckedUpdateWithoutPermissionsInput>
  }

  export type MachineUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type UserCreateWithoutStatusHistoryInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatusHistoryInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatusHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusHistoryInput, UserUncheckedCreateWithoutStatusHistoryInput>
  }

  export type MachineCreateWithoutStatusHistoryInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutStatusHistoryInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutStatusHistoryInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutStatusHistoryInput, MachineUncheckedCreateWithoutStatusHistoryInput>
  }

  export type UserUpsertWithoutStatusHistoryInput = {
    update: XOR<UserUpdateWithoutStatusHistoryInput, UserUncheckedUpdateWithoutStatusHistoryInput>
    create: XOR<UserCreateWithoutStatusHistoryInput, UserUncheckedCreateWithoutStatusHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusHistoryInput, UserUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type UserUpdateWithoutStatusHistoryInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutStatusHistoryInput = {
    update: XOR<MachineUpdateWithoutStatusHistoryInput, MachineUncheckedUpdateWithoutStatusHistoryInput>
    create: XOR<MachineCreateWithoutStatusHistoryInput, MachineUncheckedCreateWithoutStatusHistoryInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutStatusHistoryInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutStatusHistoryInput, MachineUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type MachineUpdateWithoutStatusHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutStatusHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type UserCreateWithoutProductionDataInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductionDataInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductionDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductionDataInput, UserUncheckedCreateWithoutProductionDataInput>
  }

  export type MachineCreateWithoutProductionDataInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutProductionDataInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    archiveData?: ArchiveDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutProductionDataInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutProductionDataInput, MachineUncheckedCreateWithoutProductionDataInput>
  }

  export type UserUpsertWithoutProductionDataInput = {
    update: XOR<UserUpdateWithoutProductionDataInput, UserUncheckedUpdateWithoutProductionDataInput>
    create: XOR<UserCreateWithoutProductionDataInput, UserUncheckedCreateWithoutProductionDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProductionDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProductionDataInput, UserUncheckedUpdateWithoutProductionDataInput>
  }

  export type UserUpdateWithoutProductionDataInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductionDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutProductionDataInput = {
    update: XOR<MachineUpdateWithoutProductionDataInput, MachineUncheckedUpdateWithoutProductionDataInput>
    create: XOR<MachineCreateWithoutProductionDataInput, MachineUncheckedCreateWithoutProductionDataInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutProductionDataInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutProductionDataInput, MachineUncheckedUpdateWithoutProductionDataInput>
  }

  export type MachineUpdateWithoutProductionDataInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutProductionDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    archiveData?: ArchiveDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type UserCreateWithoutArchiveDataInput = {
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationCreateNestedManyWithoutUserInput
    devices?: UserDeviceCreateNestedManyWithoutUserInput
    shifts?: ShiftCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutUserInput
    productionData?: ProductionDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutArchiveDataInput = {
    id?: number
    email: string
    password: string
    name: string
    avatar?: string | null
    badgeNumber?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutUserInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    machineOperations?: MachineOperationUncheckedCreateNestedManyWithoutUserInput
    devices?: UserDeviceUncheckedCreateNestedManyWithoutUserInput
    shifts?: ShiftUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    machinePermissions?: MachinePermissionUncheckedCreateNestedManyWithoutUserInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutArchiveDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutArchiveDataInput, UserUncheckedCreateWithoutArchiveDataInput>
  }

  export type MachineCreateWithoutArchiveDataInput = {
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeCreateNestedManyWithoutMachineInput
    operations?: MachineOperationCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutArchiveDataInput = {
    id?: number
    name: string
    type: string
    location?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityTests?: QualityTestUncheckedCreateNestedManyWithoutMachineInput
    teflonChanges?: TeflonChangeUncheckedCreateNestedManyWithoutMachineInput
    operations?: MachineOperationUncheckedCreateNestedManyWithoutMachineInput
    permissions?: MachinePermissionUncheckedCreateNestedManyWithoutMachineInput
    statusHistory?: MachineStatusHistoryUncheckedCreateNestedManyWithoutMachineInput
    productionData?: ProductionDataUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutArchiveDataInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutArchiveDataInput, MachineUncheckedCreateWithoutArchiveDataInput>
  }

  export type UserUpsertWithoutArchiveDataInput = {
    update: XOR<UserUpdateWithoutArchiveDataInput, UserUncheckedUpdateWithoutArchiveDataInput>
    create: XOR<UserCreateWithoutArchiveDataInput, UserUncheckedCreateWithoutArchiveDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutArchiveDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutArchiveDataInput, UserUncheckedUpdateWithoutArchiveDataInput>
  }

  export type UserUpdateWithoutArchiveDataInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUpdateManyWithoutUserNestedInput
    shifts?: ShiftUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutArchiveDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    badgeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutUserNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    machineOperations?: MachineOperationUncheckedUpdateManyWithoutUserNestedInput
    devices?: UserDeviceUncheckedUpdateManyWithoutUserNestedInput
    shifts?: ShiftUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    machinePermissions?: MachinePermissionUncheckedUpdateManyWithoutUserNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutArchiveDataInput = {
    update: XOR<MachineUpdateWithoutArchiveDataInput, MachineUncheckedUpdateWithoutArchiveDataInput>
    create: XOR<MachineCreateWithoutArchiveDataInput, MachineUncheckedCreateWithoutArchiveDataInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutArchiveDataInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutArchiveDataInput, MachineUncheckedUpdateWithoutArchiveDataInput>
  }

  export type MachineUpdateWithoutArchiveDataInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutArchiveDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityTests?: QualityTestUncheckedUpdateManyWithoutMachineNestedInput
    teflonChanges?: TeflonChangeUncheckedUpdateManyWithoutMachineNestedInput
    operations?: MachineOperationUncheckedUpdateManyWithoutMachineNestedInput
    permissions?: MachinePermissionUncheckedUpdateManyWithoutMachineNestedInput
    statusHistory?: MachineStatusHistoryUncheckedUpdateManyWithoutMachineNestedInput
    productionData?: ProductionDataUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type QualityTestCreateManyUserInput = {
    id?: number
    machineId: number
    createdAt?: Date | string
  }

  export type TeflonChangeCreateManyUserInput = {
    id?: number
    machineId: number
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
  }

  export type MachineOperationCreateManyUserInput = {
    id?: number
    machineId: number
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type UserDeviceCreateManyUserInput = {
    id?: number
    token: string
  }

  export type ShiftCreateManyUserInput = {
    id?: number
  }

  export type ReportCreateManyUserInput = {
    id?: number
  }

  export type UserPermissionCreateManyUserInput = {
    id?: number
  }

  export type MachinePermissionCreateManyUserInput = {
    id?: number
    machineId: number
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineStatusHistoryCreateManyUserInput = {
    id?: number
    machineId: number
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductionDataCreateManyUserInput = {
    id?: number
    machineId: number
  }

  export type ArchiveDataCreateManyUserInput = {
    id?: number
    machineId: number
  }

  export type QualityTestUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    machine?: MachineUpdateOneRequiredWithoutQualityTestsNestedInput
  }

  export type QualityTestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualityTestUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    machine?: MachineUpdateOneRequiredWithoutTeflonChangesNestedInput
  }

  export type TeflonChangeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    machine?: MachineUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type MachineOperationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDeviceUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftUpdateWithoutUserInput = {

  }

  export type ShiftUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ShiftUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUpdateWithoutUserInput = {

  }

  export type ReportUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionUpdateWithoutUserInput = {

  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type MachinePermissionUpdateWithoutUserInput = {
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    machine?: MachineUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type MachinePermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachinePermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    machine?: MachineUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type MachineStatusHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductionDataUpdateWithoutUserInput = {
    machine?: MachineUpdateOneRequiredWithoutProductionDataNestedInput
  }

  export type ProductionDataUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductionDataUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type ArchiveDataUpdateWithoutUserInput = {
    machine?: MachineUpdateOneRequiredWithoutArchiveDataNestedInput
  }

  export type ArchiveDataUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type ArchiveDataUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
  }

  export type QualityTestCreateManyMachineInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type TeflonChangeCreateManyMachineInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type MachineOperationCreateManyMachineInput = {
    id?: number
    userId: number
    status?: string
    startTime?: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type MachinePermissionCreateManyMachineInput = {
    id?: number
    userId: number
    canView?: boolean
    canOperate?: boolean
    canEdit?: boolean
    grantedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MachineStatusHistoryCreateManyMachineInput = {
    id?: number
    userId: number
    status: string
    reason?: string | null
    notes?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductionDataCreateManyMachineInput = {
    id?: number
    userId: number
  }

  export type ArchiveDataCreateManyMachineInput = {
    id?: number
    userId: number
  }

  export type QualityTestUpdateWithoutMachineInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQualityTestsNestedInput
  }

  export type QualityTestUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualityTestUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeUpdateWithoutMachineInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTeflonChangesNestedInput
  }

  export type TeflonChangeUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeflonChangeUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationUpdateWithoutMachineInput = {
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMachineOperationsNestedInput
  }

  export type MachineOperationUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineOperationUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachinePermissionUpdateWithoutMachineInput = {
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMachinePermissionsNestedInput
  }

  export type MachinePermissionUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachinePermissionUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    canView?: BoolFieldUpdateOperationsInput | boolean
    canOperate?: BoolFieldUpdateOperationsInput | boolean
    canEdit?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryUpdateWithoutMachineInput = {
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type MachineStatusHistoryUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineStatusHistoryUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductionDataUpdateWithoutMachineInput = {
    user?: UserUpdateOneRequiredWithoutProductionDataNestedInput
  }

  export type ProductionDataUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductionDataUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ArchiveDataUpdateWithoutMachineInput = {
    user?: UserUpdateOneRequiredWithoutArchiveDataNestedInput
  }

  export type ArchiveDataUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ArchiveDataUncheckedUpdateManyWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MachineCountOutputTypeDefaultArgs instead
     */
    export type MachineCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MachineCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MachineDefaultArgs instead
     */
    export type MachineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MachineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QualityTestDefaultArgs instead
     */
    export type QualityTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QualityTestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeflonChangeDefaultArgs instead
     */
    export type TeflonChangeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeflonChangeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MachineOperationDefaultArgs instead
     */
    export type MachineOperationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MachineOperationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDeviceDefaultArgs instead
     */
    export type UserDeviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDeviceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftDefaultArgs instead
     */
    export type ShiftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPermissionDefaultArgs instead
     */
    export type UserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MachinePermissionDefaultArgs instead
     */
    export type MachinePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MachinePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MachineStatusHistoryDefaultArgs instead
     */
    export type MachineStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MachineStatusHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductionDataDefaultArgs instead
     */
    export type ProductionDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductionDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchiveDataDefaultArgs instead
     */
    export type ArchiveDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchiveDataDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}