const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testProductionUpdate() {
  try {
    console.log('üîç Testando atualiza√ß√£o de produ√ß√£o...');
    
    // 1. Verificar m√°quinas com status FUNCIONANDO
    const runningMachines = await prisma.machine.findMany({
      where: {
        status: 'FUNCIONANDO'
      }
    });
    
    // 2. Buscar opera√ß√µes ativas para essas m√°quinas
    const activeOperations = await prisma.machineOperation.findMany({
      where: {
        status: 'ACTIVE',
        endTime: null
      },
      include: {
        user: true,
        machine: true
      }
    });
    
    console.log(`\nüìä M√°quinas com status FUNCIONANDO: ${runningMachines.length}`);
    
    for (const machine of runningMachines) {
      console.log(`\nüè≠ M√°quina: ${machine.name} (ID: ${machine.id})`);
      console.log(`   Status: ${machine.status}`);
      console.log(`   Velocidade: ${machine.productionSpeed} pcs/min`);
      
      const activeOperation = activeOperations.find(op => op.machineId === machine.id);
      
      if (activeOperation) {
        const operationDuration = Math.floor((new Date() - new Date(activeOperation.startTime)) / (1000 * 60));
        const expectedProduction = Math.floor(operationDuration * (machine.productionSpeed || 0));
        
        console.log(`   Opera√ß√£o ativa: ${activeOperation.id}`);
        console.log(`   Operador: ${activeOperation.user.name}`);
        console.log(`   Dura√ß√£o: ${operationDuration} minutos`);
        console.log(`   Produ√ß√£o esperada: ${expectedProduction} pe√ßas`);
        
        // Verificar se a produ√ß√£o est√° sendo calculada
        if (operationDuration > 0 && machine.productionSpeed > 0) {
          console.log(`   ‚úÖ Opera√ß√£o ativa e m√°quina configurada`);
        } else {
          console.log(`   ‚ö†Ô∏è  Problema: Dura√ß√£o=${operationDuration}min, Velocidade=${machine.productionSpeed}pcs/min`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è  M√°quina FUNCIONANDO mas sem opera√ß√£o ativa`);
      }
    }
    
    // 3. Verificar dados de produ√ß√£o do turno atual
    const today = new Date();
    const todayShiftData = await prisma.shiftData.findMany({
      where: {
        shiftDate: {
          gte: new Date(today.setHours(0, 0, 0, 0)),
          lt: new Date(today.setHours(23, 59, 59, 999))
        }
      },
      include: {
        machine: true,
        operator: true
      }
    });
    
    if (todayShiftData.length > 0) {
      console.log(`\nüìÖ Dados de turno de hoje: ${todayShiftData.length} registros`);
      
      for (const shiftData of todayShiftData) {
        console.log(`   - ${shiftData.machine.name}: ${shiftData.totalProduction} pe√ßas (${shiftData.operator.name})`);
      }
    } else {
      console.log(`\n‚ö†Ô∏è  Nenhum dado de turno encontrado para hoje`);
    }
    
    console.log('\n‚úÖ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testProductionUpdate();