{"version":3,"mappings":"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","names":["VideoCameraIcon","title","titleId","props","svgRef","React.createElement","ForwardRef","React.forwardRef","MediaUpload","media","onMediaAdd","onMediaRemove","maxFiles","acceptedTypes","maxFileSize","className","fileInputRef","useRef","dragActive","setDragActive","useState","handleDrag","e","handleDrop","handleFiles","handleChange","files","file","toast","type","reader","mediaItem","formatFileSize","bytes","k","sizes","i","openFileDialog","_a","jsxs","jsx","PhotoIcon","item","XMarkIcon","QualityTestForm","user","useAuth","navigate","useNavigate","machines","setMachines","loading","setLoading","error","setError","success","setSuccess","mediaFiles","setMediaFiles","formData","setFormData","useEffect","loadMachines","response","api","machinesData","handleInputChange","name","value","checked","prev","handleSubmit","emptyFields","field","testData","__vitePreload","__vite_default__","handleBack","Fragment","Helmet","ArrowLeftIcon","ExclamationTriangleIcon","CheckCircleIcon","machine","mediaId"],"ignoreList":[0],"sources":["../../node_modules/@heroicons/react/24/outline/esm/VideoCameraIcon.js","../../src/components/ui/MediaUpload.jsx","../../src/pages/QualityTestForm.jsx"],"sourcesContent":["import * as React from \"react\";\nfunction VideoCameraIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m15.75 10.5 4.72-4.72a.75.75 0 0 1 1.28.53v11.38a.75.75 0 0 1-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25h-9A2.25 2.25 0 0 0 2.25 7.5v9a2.25 2.25 0 0 0 2.25 2.25Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(VideoCameraIcon);\nexport default ForwardRef;","import React, { useRef, useState } from 'react';\nimport { PhotoIcon, VideoCameraIcon, TrashIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { toast } from 'react-hot-toast';\n\nconst MediaUpload = ({ \n  media = [], \n  onMediaAdd, \n  onMediaRemove, \n  maxFiles = 10,\n  acceptedTypes = ['image/*', 'video/*'],\n  maxFileSize = 10 * 1024 * 1024,\n  className = ''\n}) => {\n  const fileInputRef = useRef(null);\n  const [dragActive, setDragActive] = useState(false);\n\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFiles(e.dataTransfer.files);\n    }\n  };\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    if (e.target.files && e.target.files[0]) {\n      handleFiles(e.target.files);\n    }\n  };\n\n  const handleFiles = (files) => {\n    const fileArray = Array.from(files);\n    \n    fileArray.forEach((file) => {\n      if (media.length >= maxFiles) {\n        toast.error(`Máximo de ${maxFiles} arquivos permitidos`);\n        return;\n      }\n\n      if (file.size > maxFileSize) {\n        toast.error(`Arquivo muito grande. Máximo ${maxFileSize / (1024 * 1024)}MB`);\n        return;\n      }\n\n      const isValidType = acceptedTypes.some(type => {\n        if (type === 'image/*') return file.type.startsWith('image/');\n        if (type === 'video/*') return file.type.startsWith('video/');\n        return file.type === type;\n      });\n\n      if (!isValidType) {\n        toast.error('Tipo de arquivo não suportado');\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const mediaItem = {\n          id: Date.now() + Math.random(),\n          name: file.name,\n          size: file.size,\n          type: file.type.startsWith('image/') ? 'image' : 'video',\n          file: file,\n          preview: e.target.result\n        };\n        onMediaAdd(mediaItem);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Upload Area */}\n      <div\n        className={`relative border-2 border-dashed rounded-lg p-6 transition-colors ${\n          dragActive\n            ? 'border-blue-400 bg-blue-50 dark:bg-blue-900/20'\n            : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept={acceptedTypes.join(',')}\n          onChange={handleChange}\n          className=\"hidden\"\n        />\n        \n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <PhotoIcon className=\"h-12 w-12 text-gray-400\" />\n          </div>\n          <div className=\"flex text-sm text-gray-600 dark:text-gray-400\">\n            <button\n              type=\"button\"\n              onClick={openFileDialog}\n              className=\"relative cursor-pointer bg-white dark:bg-gray-800 rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500\"\n            >\n              <span>Clique para fazer upload</span>\n            </button>\n            <p className=\"pl-1\">ou arraste e solte</p>\n          </div>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n            PNG, JPG, MP4 até {maxFileSize / (1024 * 1024)}MB\n          </p>\n        </div>\n      </div>\n\n      {/* Media Preview */}\n      {media.length > 0 && (\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n          {media.map((item) => (\n            <div key={item.id} className=\"relative group\">\n              <div className=\"aspect-square rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\">\n                {item.type === 'image' ? (\n                  <img\n                    src={item.preview}\n                    alt={item.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <VideoCameraIcon className=\"h-12 w-12 text-gray-400\" />\n                  </div>\n                )}\n              </div>\n              \n              {/* Remove Button */}\n              <button\n                type=\"button\"\n                onClick={() => onMediaRemove(item.id)}\n                className=\"absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600\"\n              >\n                <XMarkIcon className=\"h-4 w-4\" />\n              </button>\n              \n              {/* File Info */}\n              <div className=\"mt-2\">\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                  {item.name}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {formatFileSize(item.size)}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {/* File Count */}\n      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n        {media.length} de {maxFiles} arquivos\n      </div>\n    </div>\n  );\n};\n\nexport default MediaUpload;","import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Helmet } from 'react-helmet-async';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeftIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  PhotoIcon\n} from '@heroicons/react/24/outline';\nimport { useAuth } from '../hooks/useAuth';\nimport api, { machineService } from '../services/api';\nimport MediaUpload from '../components/ui/MediaUpload';\n\nconst QualityTestForm = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  \n  const [machines, setMachines] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [mediaFiles, setMediaFiles] = useState([]);\n  \n  const [formData, setFormData] = useState({\n    machineId: '',\n    product: '',\n    lot: '',\n    boxNumber: '',\n    packageSize: '',\n    packageWidth: '',\n    bottomSize: '',\n    sideSize: '',\n    zipperDistance: '',\n    facilitatorDistance: '',\n    rulerTestDone: false,\n    hermeticityTestDone: false,\n    observations: '',\n    // Novos campos de inspeção de qualidade\n    visualInspection: null,\n    dimensionalCheck: null,\n    colorConsistency: null,\n    surfaceQuality: null,\n    adhesionTest: null\n  });\n\n  useEffect(() => {\n    loadMachines();\n  }, []);\n\n  const loadMachines = async () => {\n    try {\n      const response = await api.get('/machines');\n      const machinesData = response.data.data || response.data;\n      setMachines(Array.isArray(machinesData) ? machinesData : []);\n    } catch (error) {\n      console.error('Erro ao carregar máquinas:', error);\n      setError('Erro ao carregar máquinas');\n      setMachines([]);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log('=== INÍCIO DO HANDLESUBMIT ==>');\n    console.log('FormData completo:', formData);\n    \n    // Verificar campos obrigatórios\n    const requiredFields = ['machineId', 'product', 'lot', 'quantity'];\n    const emptyFields = requiredFields.filter(field => !formData[field]);\n    console.log('Campos obrigatórios vazios:', emptyFields);\n    \n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      // Debug: verificar se machineId está definido\n      console.log('FormData machineId:', formData.machineId);\n      console.log('Tipo do machineId:', typeof formData.machineId);\n      console.log('MachineId é truthy?', !!formData.machineId);\n      \n      const testData = {\n        ...formData,\n        media: mediaFiles\n      };\n\n      const qualityTestsService = (await import('../services/qualityTests')).default;\n      await qualityTestsService.createTest(testData);\n      setSuccess('Teste de qualidade criado com sucesso!');\n      \n      setTimeout(() => {\n        navigate('/quality-tests');\n      }, 2000);\n    } catch (error) {\n      setError(error.response?.data?.message || 'Erro ao criar teste de qualidade');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    navigate('/quality-tests');\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Novo Teste de Qualidade - Zara Operação</title>\n        <meta name=\"description\" content=\"Criar novo teste de qualidade\" />\n      </Helmet>\n\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={handleBack}\n              className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              <ArrowLeftIcon className=\"-ml-0.5 mr-2 h-4 w-4\" />\n              Voltar\n            </button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Novo Teste de Qualidade</h1>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Registre um novo teste de qualidade no sistema\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n            <div className=\"flex\">\n              <ExclamationTriangleIcon className=\"h-5 w-5 text-red-400\" />\n              <div className=\"ml-3\">\n                <p className=\"text-sm text-red-800\">{error}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Success Message */}\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n            <div className=\"flex\">\n              <CheckCircleIcon className=\"h-5 w-5 text-green-400\" />\n              <div className=\"ml-3\">\n                <p className=\"text-sm text-green-800\">{success}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Card de Informações Básicas */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Informações Básicas</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label htmlFor=\"machineId\" className=\"block text-sm font-medium text-gray-700\">\n                  Máquina *\n                </label>\n                <select\n                  id=\"machineId\"\n                  name=\"machineId\"\n                  value={formData.machineId}\n                  onChange={handleInputChange}\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                >\n                  <option value=\"\">Selecione a máquina</option>\n                  {machines.map(machine => (\n                    <option key={machine.id} value={machine.id}>\n                      {machine.name} - {machine.code}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label htmlFor=\"product\" className=\"block text-sm font-medium text-gray-700\">\n                  Produto *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"product\"\n                  name=\"product\"\n                  value={formData.product}\n                  onChange={handleInputChange}\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"Ex: Embalagem 500g\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"lot\" className=\"block text-sm font-medium text-gray-700\">\n                  Lote *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"lot\"\n                  name=\"lot\"\n                  value={formData.lot}\n                  onChange={handleInputChange}\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"Ex: L2024001\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"boxNumber\" className=\"block text-sm font-medium text-gray-700\">\n                  Número da Caixa *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"boxNumber\"\n                  name=\"boxNumber\"\n                  value={formData.boxNumber}\n                  onChange={handleInputChange}\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"Ex: BOX-001\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Card de Parâmetros Técnicos */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Parâmetros Técnicos</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label htmlFor=\"packageSize\" className=\"block text-sm font-medium text-gray-700\">\n                  Tamanho da Embalagem (mm) *\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"packageSize\"\n                  name=\"packageSize\"\n                  value={formData.packageSize}\n                  onChange={handleInputChange}\n                  required\n                  min=\"1\"\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"Ex: 250\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"packageWidth\" className=\"block text-sm font-medium text-gray-700\">\n                  Largura da Embalagem (mm) *\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"packageWidth\"\n                  name=\"packageWidth\"\n                  value={formData.packageWidth}\n                  onChange={handleInputChange}\n                  step=\"0.01\"\n                  min=\"0\"\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"0.25\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"bottomSize\" className=\"block text-sm font-medium text-gray-700\">\n                  Tamanho do Fundo (mm) *\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"bottomSize\"\n                  name=\"bottomSize\"\n                  value={formData.bottomSize}\n                  onChange={handleInputChange}\n                  step=\"0.1\"\n                  min=\"0\"\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"10.0\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"sideSize\" className=\"block text-sm font-medium text-gray-700\">\n                  Tamanho da Lateral (mm) *\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"sideSize\"\n                  name=\"sideSize\"\n                  value={formData.sideSize}\n                  onChange={handleInputChange}\n                  step=\"0.1\"\n                  min=\"0\"\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"15.0\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"zipperDistance\" className=\"block text-sm font-medium text-gray-700\">\n                  Distância do Zíper (mm) *\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"zipperDistance\"\n                  name=\"zipperDistance\"\n                  value={formData.zipperDistance}\n                  onChange={handleInputChange}\n                  step=\"0.1\"\n                  min=\"0\"\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"2.0\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"facilitatorDistance\" className=\"block text-sm font-medium text-gray-700\">\n                  Distância do Facilitador (mm) *\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"facilitatorDistance\"\n                  name=\"facilitatorDistance\"\n                  value={formData.facilitatorDistance}\n                  onChange={handleInputChange}\n                  step=\"0.1\"\n                  min=\"0\"\n                  required\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"1.5\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Card de Inspeção de Qualidade */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-6\">Inspeção de Qualidade</h3>\n            \n            {/* Itens de Inspeção */}\n             <div>\n               <h4 className=\"text-md font-medium text-gray-800 mb-4\">Itens de Inspeção</h4>\n               <div className=\"space-y-6\">\n                 {/* Inspeção Visual */}\n                 <div className=\"p-4 rounded-lg border border-gray-200 bg-gray-50\">\n                   <h5 className=\"text-sm font-medium text-gray-900 mb-3\">Inspeção Visual</h5>\n                   <p className=\"text-xs text-gray-500 mb-3\">Verificação visual da qualidade</p>\n                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.visualInspection === true \n                           ? 'border-green-500 bg-green-50' \n                           : 'border-gray-200 bg-white hover:border-green-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, visualInspection: true }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <CheckCircleIcon className={`h-5 w-5 mr-2 ${\n                           formData.visualInspection === true ? 'text-green-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.visualInspection === true ? 'text-green-800' : 'text-gray-600'\n                         }`}>\n                           Aprovado\n                         </span>\n                       </div>\n                     </div>\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.visualInspection === false \n                           ? 'border-red-500 bg-red-50' \n                           : 'border-gray-200 bg-white hover:border-red-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, visualInspection: false }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <ExclamationTriangleIcon className={`h-5 w-5 mr-2 ${\n                           formData.visualInspection === false ? 'text-red-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.visualInspection === false ? 'text-red-800' : 'text-gray-600'\n                         }`}>\n                           Não Aprovado\n                         </span>\n                       </div>\n                     </div>\n                   </div>\n                 </div>\n \n                 {/* Verificação Dimensional */}\n                 <div className=\"p-4 rounded-lg border border-gray-200 bg-gray-50\">\n                   <h5 className=\"text-sm font-medium text-gray-900 mb-3\">Verificação Dimensional</h5>\n                   <p className=\"text-xs text-gray-500 mb-3\">Medição de dimensões críticas</p>\n                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.dimensionalCheck === true \n                           ? 'border-green-500 bg-green-50' \n                           : 'border-gray-200 bg-white hover:border-green-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, dimensionalCheck: true }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <CheckCircleIcon className={`h-5 w-5 mr-2 ${\n                           formData.dimensionalCheck === true ? 'text-green-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.dimensionalCheck === true ? 'text-green-800' : 'text-gray-600'\n                         }`}>\n                           Aprovado\n                         </span>\n                       </div>\n                     </div>\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.dimensionalCheck === false \n                           ? 'border-red-500 bg-red-50' \n                           : 'border-gray-200 bg-white hover:border-red-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, dimensionalCheck: false }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <ExclamationTriangleIcon className={`h-5 w-5 mr-2 ${\n                           formData.dimensionalCheck === false ? 'text-red-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.dimensionalCheck === false ? 'text-red-800' : 'text-gray-600'\n                         }`}>\n                           Não Aprovado\n                         </span>\n                       </div>\n                     </div>\n                   </div>\n                 </div>\n \n                 {/* Consistência de Cor */}\n                 <div className=\"p-4 rounded-lg border border-gray-200 bg-gray-50\">\n                   <h5 className=\"text-sm font-medium text-gray-900 mb-3\">Consistência de Cor</h5>\n                   <p className=\"text-xs text-gray-500 mb-3\">Verificação da uniformidade da cor</p>\n                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.colorConsistency === true \n                           ? 'border-green-500 bg-green-50' \n                           : 'border-gray-200 bg-white hover:border-green-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, colorConsistency: true }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <CheckCircleIcon className={`h-5 w-5 mr-2 ${\n                           formData.colorConsistency === true ? 'text-green-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.colorConsistency === true ? 'text-green-800' : 'text-gray-600'\n                         }`}>\n                           Aprovado\n                         </span>\n                       </div>\n                     </div>\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.colorConsistency === false \n                           ? 'border-red-500 bg-red-50' \n                           : 'border-gray-200 bg-white hover:border-red-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, colorConsistency: false }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <ExclamationTriangleIcon className={`h-5 w-5 mr-2 ${\n                           formData.colorConsistency === false ? 'text-red-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.colorConsistency === false ? 'text-red-800' : 'text-gray-600'\n                         }`}>\n                           Não Aprovado\n                         </span>\n                       </div>\n                     </div>\n                   </div>\n                 </div>\n \n                 {/* Qualidade da Superfície */}\n                 <div className=\"p-4 rounded-lg border border-gray-200 bg-gray-50\">\n                   <h5 className=\"text-sm font-medium text-gray-900 mb-3\">Qualidade da Superfície</h5>\n                   <p className=\"text-xs text-gray-500 mb-3\">Análise da textura e acabamento</p>\n                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.surfaceQuality === true \n                           ? 'border-green-500 bg-green-50' \n                           : 'border-gray-200 bg-white hover:border-green-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, surfaceQuality: true }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <CheckCircleIcon className={`h-5 w-5 mr-2 ${\n                           formData.surfaceQuality === true ? 'text-green-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.surfaceQuality === true ? 'text-green-800' : 'text-gray-600'\n                         }`}>\n                           Aprovado\n                         </span>\n                       </div>\n                     </div>\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.surfaceQuality === false \n                           ? 'border-red-500 bg-red-50' \n                           : 'border-gray-200 bg-white hover:border-red-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, surfaceQuality: false }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <ExclamationTriangleIcon className={`h-5 w-5 mr-2 ${\n                           formData.surfaceQuality === false ? 'text-red-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.surfaceQuality === false ? 'text-red-800' : 'text-gray-600'\n                         }`}>\n                           Não Aprovado\n                         </span>\n                       </div>\n                     </div>\n                   </div>\n                 </div>\n \n                 {/* Teste de Aderência */}\n                 <div className=\"p-4 rounded-lg border border-gray-200 bg-gray-50\">\n                   <h5 className=\"text-sm font-medium text-gray-900 mb-3\">Teste de Aderência</h5>\n                   <p className=\"text-xs text-gray-500 mb-3\">Verificação da aderência dos materiais</p>\n                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.adhesionTest === true \n                           ? 'border-green-500 bg-green-50' \n                           : 'border-gray-200 bg-white hover:border-green-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, adhesionTest: true }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <CheckCircleIcon className={`h-5 w-5 mr-2 ${\n                           formData.adhesionTest === true ? 'text-green-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.adhesionTest === true ? 'text-green-800' : 'text-gray-600'\n                         }`}>\n                           Aprovado\n                         </span>\n                       </div>\n                     </div>\n                     <div \n                       className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                         formData.adhesionTest === false \n                           ? 'border-red-500 bg-red-50' \n                           : 'border-gray-200 bg-white hover:border-red-300'\n                       }`}\n                       onClick={() => setFormData(prev => ({ ...prev, adhesionTest: false }))}\n                     >\n                       <div className=\"flex items-center justify-center\">\n                         <ExclamationTriangleIcon className={`h-5 w-5 mr-2 ${\n                           formData.adhesionTest === false ? 'text-red-600' : 'text-gray-400'\n                         }`} />\n                         <span className={`text-sm font-medium ${\n                           formData.adhesionTest === false ? 'text-red-800' : 'text-gray-600'\n                         }`}>\n                           Não Aprovado\n                         </span>\n                       </div>\n                     </div>\n                   </div>\n                 </div>\n               </div>\n             </div>\n          </div>\n\n          {/* Card de Testes Realizados */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-6\">Testes Realizados</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Teste da Régua */}\n              <div className={`p-4 rounded-lg border-2 transition-all ${\n                formData.rulerTestDone \n                  ? 'border-blue-500 bg-blue-50' \n                  : 'border-gray-200 bg-gray-50'\n              }`}>\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"rulerTestDone\"\n                    name=\"rulerTestDone\"\n                    checked={formData.rulerTestDone}\n                    onChange={handleInputChange}\n                    className=\"h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"rulerTestDone\" className=\"ml-3 block text-sm font-medium text-gray-900\">\n                    Teste da Régua\n                  </label>\n                </div>\n                <p className=\"mt-2 text-xs text-gray-500 ml-8\">\n                  Verificação das dimensões da embalagem\n                </p>\n              </div>\n\n              {/* Teste de Hermeticidade */}\n              <div className={`p-4 rounded-lg border-2 transition-all ${\n                formData.hermeticityTestDone \n                  ? 'border-blue-500 bg-blue-50' \n                  : 'border-gray-200 bg-gray-50'\n              }`}>\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"hermeticityTestDone\"\n                    name=\"hermeticityTestDone\"\n                    checked={formData.hermeticityTestDone}\n                    onChange={handleInputChange}\n                    className=\"h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"hermeticityTestDone\" className=\"ml-3 block text-sm font-medium text-gray-900\">\n                    Teste de Hermeticidade\n                  </label>\n                </div>\n                <p className=\"mt-2 text-xs text-gray-500 ml-8\">\n                  Verificação da vedação da embalagem\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Card de Mídia */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Anexos</h3>\n            <MediaUpload\n              media={mediaFiles}\n              onMediaAdd={(mediaItem) => setMediaFiles(prev => [...prev, mediaItem])}\n              onMediaRemove={(mediaId) => setMediaFiles(prev => prev.filter(item => item.id !== mediaId))}\n              maxFiles={5}\n              acceptedTypes={['image/*', 'video/*']}\n            />\n          </div>\n\n          {/* Card de Observações */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Observações</h3>\n            \n            <div>\n              <label htmlFor=\"observations\" className=\"block text-sm font-medium text-gray-700\">\n                Observações\n              </label>\n              <textarea\n                id=\"observations\"\n                name=\"observations\"\n                value={formData.observations}\n                onChange={handleInputChange}\n                rows={4}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                placeholder=\"Descreva observações adicionais sobre o teste...\"\n              />\n            </div>\n          </div>\n\n          {/* Cards de Resultado do Teste */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Card Aprovado */}\n            <div \n              className={`bg-white shadow rounded-lg p-6 border-2 cursor-pointer transition-all ${\n                formData.approved === true \n                  ? 'border-green-500 bg-green-50' \n                  : 'border-gray-200 hover:border-green-300'\n              }`}\n              onClick={() => setFormData(prev => ({ ...prev, approved: true }))}\n            >\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                  formData.approved === true ? 'bg-green-500' : 'bg-gray-300'\n                }`}>\n                  <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n              </div>\n              <h4 className={`text-center font-medium ${\n                formData.approved === true ? 'text-green-700' : 'text-gray-700'\n              }`}>\n                APROVADO\n              </h4>\n              <p className=\"text-center text-sm text-gray-500 mt-2\">\n                Teste passou em todos os critérios\n              </p>\n            </div>\n\n            {/* Card Reprovado */}\n            <div \n              className={`bg-white shadow rounded-lg p-6 border-2 cursor-pointer transition-all ${\n                formData.approved === false \n                  ? 'border-red-500 bg-red-50' \n                  : 'border-gray-200 hover:border-red-300'\n              }`}\n              onClick={() => setFormData(prev => ({ ...prev, approved: false }))}\n            >\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                  formData.approved === false ? 'bg-red-500' : 'bg-gray-300'\n                }`}>\n                  <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </div>\n              </div>\n              <h4 className={`text-center font-medium ${\n                formData.approved === false ? 'text-red-700' : 'text-gray-700'\n              }`}>\n                REPROVADO\n              </h4>\n              <p className=\"text-center text-sm text-gray-500 mt-2\">\n                Teste não atendeu aos critérios\n              </p>\n            </div>\n          </div>\n\n          {/* Botões de Ação */}\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={handleBack}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md\"\n            >\n              Cancelar\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              onClick={() => console.log('Botão submit clicado!')}\n              className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded-md\"\n            >\n              {loading ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Criando...\n                </>\n              ) : (\n                <>\n                  <CheckCircleIcon className=\"-ml-1 mr-2 h-4 w-4\" />\n                  Criar Teste\n                </>\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default QualityTestForm;"],"file":"assets/QualityTestForm-CW4Y08l0.js"}