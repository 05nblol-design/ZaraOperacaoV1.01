{"version":3,"file":"Notifications-C9UUXM61.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/ChevronUpIcon.js","../../src/pages/Notifications.jsx"],"sourcesContent":["import * as React from \"react\";\nfunction ChevronUpIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m4.5 15.75 7.5-7.5 7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronUpIcon);\nexport default ForwardRef;","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { motion } from 'framer-motion';\nimport {\n  BellIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  TrashIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  FunnelIcon,\n  MagnifyingGlassIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\n\n// Hooks\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Componentes\nimport LoadingSpinner from '@/components/ui/LoadingSpinner';\nimport { cn } from '@/lib/utils';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\nconst Notifications = () => {\n  const { user } = useAuth();\n  const {\n    notifications,\n    loading,\n    error,\n    unreadCount,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    clearAllNotifications,\n    getNotificationsByType,\n    getNotificationsByPriority,\n    getUnreadNotifications,\n    refreshNotifications\n  } = useNotifications();\n\n  const [selectedNotifications, setSelectedNotifications] = useState([]);\n  const [filterType, setFilterType] = useState('all');\n  const [filterPriority, setFilterPriority] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortBy, setSortBy] = useState('date');\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  useEffect(() => {\n    refreshNotifications();\n  }, []);\n\n  const getNotificationIcon = (type) => {\n    const icons = {\n      QUALITY_TEST: CheckCircleIcon,\n      MACHINE_STATUS: ExclamationTriangleIcon,\n      PRODUCTION: InformationCircleIcon,\n      MAINTENANCE: ClockIcon,\n      ALERT: ExclamationTriangleIcon,\n      INFO: InformationCircleIcon,\n      SUCCESS: CheckCircleIcon,\n      WARNING: ExclamationTriangleIcon,\n      ERROR: ExclamationTriangleIcon\n    };\n    return icons[type] || BellIcon;\n  };\n\n  const getNotificationColor = (type, priority) => {\n    if (priority === 'URGENT') return 'text-red-600 dark:text-red-400';\n    if (priority === 'HIGH') return 'text-orange-600 dark:text-orange-400';\n    \n    const colors = {\n      QUALITY_TEST: 'text-blue-600 dark:text-blue-400',\n      MACHINE_STATUS: 'text-yellow-600 dark:text-yellow-400',\n      PRODUCTION: 'text-green-600 dark:text-green-400',\n      MAINTENANCE: 'text-purple-600 dark:text-purple-400',\n      ALERT: 'text-red-600 dark:text-red-400',\n      INFO: 'text-blue-600 dark:text-blue-400',\n      SUCCESS: 'text-green-600 dark:text-green-400',\n      WARNING: 'text-yellow-600 dark:text-yellow-400',\n      ERROR: 'text-red-600 dark:text-red-400'\n    };\n    return colors[type] || 'text-gray-600 dark:text-gray-400';\n  };\n\n  const getPriorityBadge = (priority) => {\n    const badges = {\n      URGENT: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n      HIGH: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400',\n      MEDIUM: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400',\n      LOW: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n    };\n    return badges[priority] || badges.LOW;\n  };\n\n  const getTypeLabel = (type) => {\n    const labels = {\n      QUALITY_TEST: 'Teste de Qualidade',\n      MACHINE_STATUS: 'Status da Máquina',\n      PRODUCTION: 'Produção',\n      MAINTENANCE: 'Manutenção',\n      ALERT: 'Alerta',\n      INFO: 'Informação',\n      SUCCESS: 'Sucesso',\n      WARNING: 'Aviso',\n      ERROR: 'Erro'\n    };\n    return labels[type] || type;\n  };\n\n  const filteredNotifications = notifications\n    .filter(notification => {\n      // Filtro por tipo\n      if (filterType !== 'all') {\n        if (filterType === 'unread' && notification.read) return false;\n        if (filterType === 'read' && !notification.read) return false;\n        if (filterType !== 'unread' && filterType !== 'read' && notification.type !== filterType) return false;\n      }\n      \n      // Filtro por prioridade\n      if (filterPriority !== 'all' && notification.priority !== filterPriority) return false;\n      \n      // Filtro por busca\n      if (searchTerm) {\n        const searchLower = searchTerm.toLowerCase();\n        return (\n          notification.title?.toLowerCase().includes(searchLower) ||\n          notification.message?.toLowerCase().includes(searchLower) ||\n          notification.machineId?.toLowerCase().includes(searchLower)\n        );\n      }\n      \n      return true;\n    })\n    .sort((a, b) => {\n      let aValue, bValue;\n      \n      switch (sortBy) {\n        case 'priority':\n          const priorityOrder = { URGENT: 4, HIGH: 3, MEDIUM: 2, LOW: 1 };\n          aValue = priorityOrder[a.priority] || 0;\n          bValue = priorityOrder[b.priority] || 0;\n          break;\n        case 'type':\n          aValue = a.type;\n          bValue = b.type;\n          break;\n        case 'read':\n          aValue = a.read ? 1 : 0;\n          bValue = b.read ? 1 : 0;\n          break;\n        default: // date\n          aValue = new Date(a.createdAt);\n          bValue = new Date(b.createdAt);\n      }\n      \n      if (sortOrder === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n\n  const handleSelectAll = () => {\n    if (selectedNotifications.length === filteredNotifications.length) {\n      setSelectedNotifications([]);\n    } else {\n      setSelectedNotifications(filteredNotifications.map(n => n.id));\n    }\n  };\n\n  const handleSelectNotification = (notificationId) => {\n    setSelectedNotifications(prev => \n      prev.includes(notificationId)\n        ? prev.filter(id => id !== notificationId)\n        : [...prev, notificationId]\n    );\n  };\n\n  const handleBulkMarkAsRead = async () => {\n    const unreadSelected = selectedNotifications.filter(id => {\n      const notification = notifications.find(n => n.id === id);\n      return notification && !notification.read;\n    });\n    \n    for (const id of unreadSelected) {\n      await markAsRead(id);\n    }\n    \n    setSelectedNotifications([]);\n  };\n\n  const handleBulkDelete = async () => {\n    for (const id of selectedNotifications) {\n      await deleteNotification(id);\n    }\n    \n    setSelectedNotifications([]);\n  };\n\n  const handleNotificationClick = async (notification) => {\n    if (!notification.read) {\n      await markAsRead(notification.id);\n    }\n    \n    // Navegar para a página relacionada se houver\n    if (notification.actionUrl) {\n      window.location.href = notification.actionUrl;\n    }\n  };\n\n  if (loading && notifications.length === 0) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Notificações - Sistema ZARA</title>\n        <meta name=\"description\" content=\"Central de notificações do sistema ZARA\" />\n      </Helmet>\n\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              Notificações\n            </h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n              {unreadCount > 0 ? `${unreadCount} não lida${unreadCount > 1 ? 's' : ''}` : 'Todas as notificações lidas'}\n            </p>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            {unreadCount > 0 && (\n              <button\n                onClick={markAllAsRead}\n                className=\"inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n              >\n                <EyeIcon className=\"h-4 w-4 mr-2\" />\n                Marcar todas como lidas\n              </button>\n            )}\n            \n            <button\n              onClick={refreshNotifications}\n              disabled={loading}\n              className=\"inline-flex items-center px-3 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n            >\n              {loading ? (\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n              ) : (\n                <BellIcon className=\"h-4 w-4 mr-2\" />\n              )}\n              Atualizar\n            </button>\n          </div>\n        </div>\n\n        {/* Filtros e Busca */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n            {/* Busca */}\n            <div className=\"relative flex-1 max-w-md\">\n              <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Buscar notificações...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Controles */}\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={() => setShowFilters(!showFilters)}\n                className={cn(\n                  'inline-flex items-center px-3 py-2 border rounded-md text-sm font-medium transition-colors',\n                  showFilters\n                    ? 'border-blue-300 text-blue-700 bg-blue-50 dark:border-blue-600 dark:text-blue-400 dark:bg-blue-900/20'\n                    : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50 dark:border-gray-600 dark:text-gray-300 dark:bg-gray-800 dark:hover:bg-gray-700'\n                )}\n              >\n                <FunnelIcon className=\"h-4 w-4 mr-2\" />\n                Filtros\n                {showFilters ? (\n                  <ChevronUpIcon className=\"h-4 w-4 ml-2\" />\n                ) : (\n                  <ChevronDownIcon className=\"h-4 w-4 ml-2\" />\n                )}\n              </button>\n\n              {/* Ordenação */}\n              <select\n                value={`${sortBy}-${sortOrder}`}\n                onChange={(e) => {\n                  const [by, order] = e.target.value.split('-');\n                  setSortBy(by);\n                  setSortOrder(order);\n                }}\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"date-desc\">Mais recentes</option>\n                <option value=\"date-asc\">Mais antigas</option>\n                <option value=\"priority-desc\">Maior prioridade</option>\n                <option value=\"priority-asc\">Menor prioridade</option>\n                <option value=\"type-asc\">Tipo (A-Z)</option>\n                <option value=\"read-asc\">Não lidas primeiro</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Filtros expandidos */}\n          {showFilters && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Filtro por tipo */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Tipo\n                  </label>\n                  <select\n                    value={filterType}\n                    onChange={(e) => setFilterType(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"all\">Todos os tipos</option>\n                    <option value=\"unread\">Não lidas</option>\n                    <option value=\"read\">Lidas</option>\n                    <option value=\"QUALITY_TEST\">Teste de Qualidade</option>\n                    <option value=\"MACHINE_STATUS\">Status da Máquina</option>\n                    <option value=\"PRODUCTION\">Produção</option>\n                    <option value=\"MAINTENANCE\">Manutenção</option>\n                    <option value=\"ALERT\">Alerta</option>\n                  </select>\n                </div>\n\n                {/* Filtro por prioridade */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Prioridade\n                  </label>\n                  <select\n                    value={filterPriority}\n                    onChange={(e) => setFilterPriority(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"all\">Todas as prioridades</option>\n                    <option value=\"URGENT\">Urgente</option>\n                    <option value=\"HIGH\">Alta</option>\n                    <option value=\"MEDIUM\">Média</option>\n                    <option value=\"LOW\">Baixa</option>\n                  </select>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </div>\n\n        {/* Ações em lote */}\n        {selectedNotifications.length > 0 && (\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-blue-700 dark:text-blue-300\">\n                {selectedNotifications.length} notificação{selectedNotifications.length > 1 ? 'ões' : ''} selecionada{selectedNotifications.length > 1 ? 's' : ''}\n              </span>\n              \n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={handleBulkMarkAsRead}\n                  className=\"inline-flex items-center px-3 py-1 text-sm font-medium text-blue-700 dark:text-blue-300 hover:text-blue-800 dark:hover:text-blue-200 transition-colors\"\n                >\n                  <EyeIcon className=\"h-4 w-4 mr-1\" />\n                  Marcar como lidas\n                </button>\n                \n                <button\n                  onClick={handleBulkDelete}\n                  className=\"inline-flex items-center px-3 py-1 text-sm font-medium text-red-700 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors\"\n                >\n                  <TrashIcon className=\"h-4 w-4 mr-1\" />\n                  Excluir\n                </button>\n                \n                <button\n                  onClick={() => setSelectedNotifications([])}\n                  className=\"inline-flex items-center px-3 py-1 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-200 transition-colors\"\n                >\n                  <XMarkIcon className=\"h-4 w-4 mr-1\" />\n                  Cancelar\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Lista de notificações */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n          {/* Header da tabela */}\n          <div className=\"px-6 py-3 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={selectedNotifications.length === filteredNotifications.length && filteredNotifications.length > 0}\n                onChange={handleSelectAll}\n                className=\"h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500\"\n              />\n              <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Selecionar todas ({filteredNotifications.length})\n              </span>\n            </div>\n          </div>\n\n          {/* Conteúdo */}\n          <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n            {error && (\n              <div className=\"p-6 text-center\">\n                <ExclamationTriangleIcon className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n                <p className=\"text-red-600 dark:text-red-400\">{error}</p>\n                <button\n                  onClick={refreshNotifications}\n                  className=\"mt-2 text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\"\n                >\n                  Tentar novamente\n                </button>\n              </div>\n            )}\n\n            {!error && filteredNotifications.length === 0 && (\n              <div className=\"p-6 text-center\">\n                <BellIcon className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  {searchTerm || filterType !== 'all' || filterPriority !== 'all'\n                    ? 'Nenhuma notificação encontrada com os filtros aplicados'\n                    : 'Nenhuma notificação encontrada'\n                  }\n                </p>\n              </div>\n            )}\n\n            {filteredNotifications.map((notification) => {\n              const Icon = getNotificationIcon(notification.type);\n              const isSelected = selectedNotifications.includes(notification.id);\n              \n              return (\n                <div\n                  key={notification.id}\n                  className={cn(\n                    'p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors',\n                    !notification.read && 'bg-blue-50/50 dark:bg-blue-900/10',\n                    isSelected && 'bg-blue-100 dark:bg-blue-900/20'\n                  )}\n                >\n                  <div className=\"flex items-start space-x-4\">\n                    {/* Checkbox */}\n                    <input\n                      type=\"checkbox\"\n                      checked={isSelected}\n                      onChange={() => handleSelectNotification(notification.id)}\n                      className=\"mt-1 h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500\"\n                    />\n\n                    {/* Ícone */}\n                    <div className={cn(\n                      'flex-shrink-0 mt-0.5',\n                      getNotificationColor(notification.type, notification.priority)\n                    )}>\n                      <Icon className=\"h-5 w-5\" />\n                    </div>\n\n                    {/* Conteúdo */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <h3 className={cn(\n                              'text-sm font-medium',\n                              notification.read \n                                ? 'text-gray-700 dark:text-gray-300'\n                                : 'text-gray-900 dark:text-white'\n                            )}>\n                              {notification.title}\n                            </h3>\n                            \n                            {/* Badge de prioridade */}\n                            <span className={cn(\n                              'inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium',\n                              getPriorityBadge(notification.priority)\n                            )}>\n                              {notification.priority === 'URGENT' ? 'Urgente' :\n                               notification.priority === 'HIGH' ? 'Alta' :\n                               notification.priority === 'MEDIUM' ? 'Média' : 'Baixa'}\n                            </span>\n                            \n                            {/* Badge de tipo */}\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n                              {getTypeLabel(notification.type)}\n                            </span>\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                            {notification.message}\n                          </p>\n                          \n                          {/* Metadados */}\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400\">\n                            <div className=\"flex items-center space-x-1\">\n                              <ClockIcon className=\"h-3 w-3\" />\n                              <span>\n                                {formatDistanceToNow(new Date(notification.createdAt), {\n                                  addSuffix: true,\n                                  locale: ptBR\n                                })}\n                              </span>\n                            </div>\n                            \n                            {notification.machineId && (\n                              <span>Máquina: {notification.machineId}</span>\n                            )}\n                            \n                            {notification.userId && notification.userId !== user?.id && (\n                              <span>De: {notification.userName || 'Sistema'}</span>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Ações */}\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          {!notification.read && (\n                            <button\n                              onClick={() => markAsRead(notification.id)}\n                              className=\"p-1 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\n                              title=\"Marcar como lida\"\n                            >\n                              <EyeIcon className=\"h-4 w-4\" />\n                            </button>\n                          )}\n                          \n                          <button\n                            onClick={() => deleteNotification(notification.id)}\n                            className=\"p-1 text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors\"\n                            title=\"Excluir notificação\"\n                          >\n                            <TrashIcon className=\"h-4 w-4\" />\n                          </button>\n                          \n                          {notification.actionUrl && (\n                            <button\n                              onClick={() => handleNotificationClick(notification)}\n                              className=\"text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n                            >\n                              Ver detalhes\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Ações de limpeza */}\n        {notifications.length > 0 && (\n          <div className=\"flex justify-center\">\n            <button\n              onClick={clearAllNotifications}\n              className=\"inline-flex items-center px-4 py-2 border border-red-300 dark:border-red-600 rounded-md text-sm font-medium text-red-700 dark:text-red-400 bg-white dark:bg-gray-800 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors\"\n            >\n              <TrashIcon className=\"h-4 w-4 mr-2\" />\n              Limpar todas as notificações\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Notifications;"],"names":["ChevronUpIcon","title","titleId","props","svgRef","React.createElement","ForwardRef","React.forwardRef","Notifications","user","useAuth","notifications","loading","error","unreadCount","markAsRead","markAllAsRead","deleteNotification","clearAllNotifications","getNotificationsByType","getNotificationsByPriority","getUnreadNotifications","refreshNotifications","useNotifications","selectedNotifications","setSelectedNotifications","useState","filterType","setFilterType","filterPriority","setFilterPriority","searchTerm","setSearchTerm","showFilters","setShowFilters","sortBy","setSortBy","sortOrder","setSortOrder","useEffect","getNotificationIcon","type","CheckCircleIcon","ExclamationTriangleIcon","InformationCircleIcon","ClockIcon","BellIcon","getNotificationColor","priority","getPriorityBadge","badges","getTypeLabel","filteredNotifications","notification","searchLower","_a","_b","_c","a","b","aValue","bValue","priorityOrder","handleSelectAll","n","handleSelectNotification","notificationId","prev","id","handleBulkMarkAsRead","unreadSelected","handleBulkDelete","handleNotificationClick","jsx","LoadingSpinner","jsxs","Fragment","Helmet","EyeIcon","MagnifyingGlassIcon","e","cn","FunnelIcon","ChevronDownIcon","by","order","motion","TrashIcon","XMarkIcon","Icon","isSelected","formatDistanceToNow","ptBR"],"mappings":"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","x_google_ignoreList":[0]}