{"version":3,"file":"qualityTests-DrYlWTji.js","sources":["../../src/services/qualityTests.js"],"sourcesContent":["import api from './api';\n\nexport const qualityTestsService = {\n  // Obter todos os testes de qualidade\n  async getTests(params = {}) {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) searchParams.append('page', params.page);\n    if (params.limit) searchParams.append('limit', params.limit);\n    if (params.machineId) searchParams.append('machineId', params.machineId);\n    if (params.approved !== undefined) searchParams.append('approved', params.approved);\n    if (params.startDate) searchParams.append('startDate', params.startDate);\n    if (params.endDate) searchParams.append('endDate', params.endDate);\n    if (params.search) searchParams.append('search', params.search);\n    \n    const queryString = searchParams.toString();\n    const url = queryString ? `/quality-tests?${queryString}` : '/quality-tests';\n    \n    const response = await api.get(url);\n    return response.data;\n  },\n\n  // Obter teste específico por ID\n  async getTest(id) {\n    const response = await api.get(`/quality-tests/${id}`);\n    return response.data;\n  },\n\n  // Criar novo teste de qualidade\n  async createTest(testData) {\n    console.log('=== Frontend - Dados originais do formulário ===');\n    console.log('testData:', JSON.stringify(testData, null, 2));\n    \n    // Mapear os dados do formulário para o formato esperado pela API\n    const apiData = {\n      machineId: parseInt(testData.machineId),\n      product: testData.product || 'Produto Padrão',\n      lot: testData.lot || `LOT-${Date.now()}`,\n      boxNumber: testData.boxNumber || `BOX-${Date.now()}`,\n      packageSize: testData.packageSize || 'Médio',\n      packageWidth: parseFloat(testData.packageWidth) || 0.25,\n      bottomSize: parseFloat(testData.bottomSize) || 10.0,\n      sideSize: parseFloat(testData.sideSize) || 15.0,\n      zipperDistance: parseFloat(testData.zipperDistance) || 2.0,\n      facilitatorDistance: parseFloat(testData.facilitatorDistance) || 1.5,\n      rulerTestDone: Boolean(testData.rulerTestDone),\n      hermeticityTestDone: Boolean(testData.hermeticityTestDone),\n      // Novos campos de inspeção de qualidade\n      visualInspection: testData.visualInspection,\n      dimensionalCheck: testData.dimensionalCheck,\n      colorConsistency: testData.colorConsistency,\n      surfaceQuality: testData.surfaceQuality,\n      adhesionTest: testData.adhesionTest,\n      approved: testData.approved !== null ? Boolean(testData.approved) : true,\n      observations: testData.observations || '',\n      images: testData.media && testData.media.length > 0 ? testData.media.filter(m => m.type === 'image').map(m => m.name || 'image.jpg') : ['placeholder-image.jpg'],\n      videos: testData.media && testData.media.length > 0 ? testData.media.filter(m => m.type === 'video').map(m => m.name || 'video.mp4') : []\n    };\n\n    console.log('=== Frontend - Dados enviados para API ===');\n    console.log('apiData:', JSON.stringify(apiData, null, 2));\n\n    const response = await api.post('/quality-tests', apiData);\n    return response.data;\n  },\n\n  // Atualizar teste existente\n  async updateTest(id, testData) {\n    const response = await api.put(`/quality-tests/${id}`, testData);\n    return response.data;\n  },\n\n  // Deletar teste\n  async deleteTest(id) {\n    const response = await api.delete(`/quality-tests/${id}`);\n    return response.data;\n  },\n\n  // Obter estatísticas dos testes\n  async getStats(params = {}) {\n    const searchParams = new URLSearchParams();\n    \n    if (params.startDate) searchParams.append('startDate', params.startDate);\n    if (params.endDate) searchParams.append('endDate', params.endDate);\n    if (params.machineId) searchParams.append('machineId', params.machineId);\n    \n    const queryString = searchParams.toString();\n    const url = queryString ? `/quality-tests/stats/summary?${queryString}` : '/quality-tests/stats/summary';\n    \n    const response = await api.get(url);\n    return response.data;\n  },\n\n  // Upload de imagens para teste\n  async uploadImages(testId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    formData.append('testId', testId);\n    \n    const response = await api.post('/quality-tests/upload-images', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n\n  // Upload de vídeos para teste\n  async uploadVideos(testId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('videos', file);\n    });\n    formData.append('testId', testId);\n    \n    const response = await api.post('/quality-tests/upload-videos', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\n\nexport default qualityTestsService;"],"names":["qualityTestsService","params","searchParams","queryString","url","api","id","testData","apiData","m","testId","files","formData","file"],"mappings":"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"}