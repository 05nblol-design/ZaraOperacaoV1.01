const fs = require('fs');
const path = require('path');

console.log('üåê CORRE√á√ÉO FRONTEND - Erros de Conex√£o com API');
console.log('=' .repeat(60));

// URLs corretas
const RAILWAY_BACKEND_URL = 'https://sistema-zara-backend-production.up.railway.app';
const VERCEL_FRONTEND_URL = 'https://sistema-zara-frontend.vercel.app';

// Verificar arquivos de configura√ß√£o do frontend
const frontendFiles = [
  { path: './package.json', name: 'package.json' },
  { path: './vercel.json', name: 'vercel.json' },
  { path: './src/services/api.js', name: 'api.js' },
  { path: './vite.config.js', name: 'vite.config.js' },
  { path: './.env.example', name: '.env.example' }
];

console.log('\nüìÅ VERIFICANDO ARQUIVOS DO FRONTEND:');
frontendFiles.forEach(file => {
  if (fs.existsSync(file.path)) {
    console.log(`‚úÖ ${file.name}`);
  } else {
    console.log(`‚ùå ${file.name} - FALTANDO!`);
  }
});

// Verificar configura√ß√£o da API
console.log('\nüîå VERIFICANDO CONFIGURA√á√ÉO DA API:');
try {
  const apiContent = fs.readFileSync('./src/services/api.js', 'utf8');
  
  if (apiContent.includes('localhost')) {
    console.log('‚ö†Ô∏è  Detectado localhost na configura√ß√£o da API');
  }
  
  if (apiContent.includes('railway.app')) {
    console.log('‚úÖ URL do Railway encontrada na configura√ß√£o');
  } else {
    console.log('‚ùå URL do Railway n√£o encontrada!');
  }
  
  if (apiContent.includes('VITE_API_URL')) {
    console.log('‚úÖ Vari√°vel VITE_API_URL configurada');
  } else {
    console.log('‚ùå Vari√°vel VITE_API_URL n√£o encontrada!');
  }
  
} catch (error) {
  console.log(`‚ùå Erro ao ler api.js: ${error.message}`);
}

// Verificar vercel.json
console.log('\nüöÄ VERIFICANDO VERCEL.JSON:');
try {
  const vercelConfig = JSON.parse(fs.readFileSync('./vercel.json', 'utf8'));
  
  if (vercelConfig.env) {
    console.log('‚úÖ Vari√°veis de ambiente configuradas no Vercel');
    Object.keys(vercelConfig.env).forEach(key => {
      console.log(`   - ${key}: ${vercelConfig.env[key]}`);
    });
  } else {
    console.log('‚ùå Vari√°veis de ambiente n√£o configuradas no Vercel!');
  }
  
  if (vercelConfig.headers) {
    console.log('‚úÖ Headers configurados (incluindo CSP)');
  }
  
} catch (error) {
  console.log(`‚ùå Erro ao ler vercel.json: ${error.message}`);
}

// Criar configura√ß√£o corrigida para o Vercel
const vercelConfigFixed = {
  "$schema": "https://openapi.vercel.sh/vercel.json",
  "framework": "vite",
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "installCommand": "npm install",
  "env": {
    "VITE_API_URL": RAILWAY_BACKEND_URL,
    "VITE_SOCKET_URL": RAILWAY_BACKEND_URL,
    "VITE_BACKEND_URL": RAILWAY_BACKEND_URL,
    "VITE_APP_NAME": "Sistema ZARA",
    "VITE_APP_VERSION": "1.0.1"
  },
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/index.html"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Content-Security-Policy",
          "value": `default-src 'self'; connect-src 'self' ${RAILWAY_BACKEND_URL} ${RAILWAY_BACKEND_URL}/api wss://*.railway.app ws://*.railway.app; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;`
        }
      ]
    },
    {
      "source": "/assets/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ]
    }
  ]
};

// Salvar configura√ß√£o corrigida
fs.writeFileSync('./vercel.json.fixed', JSON.stringify(vercelConfigFixed, null, 2));
console.log('\nüìù Arquivo vercel.json.fixed criado com configura√ß√µes corretas!');

// Criar arquivo .env.production
const envProduction = `# VARI√ÅVEIS DE AMBIENTE PARA PRODU√á√ÉO (VERCEL)
# Estas vari√°veis devem ser configuradas no Vercel Dashboard

# URLs da API
VITE_API_URL=${RAILWAY_BACKEND_URL}
VITE_SOCKET_URL=${RAILWAY_BACKEND_URL}
VITE_BACKEND_URL=${RAILWAY_BACKEND_URL}

# Informa√ß√µes da Aplica√ß√£o
VITE_APP_NAME=Sistema ZARA
VITE_APP_VERSION=1.0.1

# Configura√ß√µes de Desenvolvimento (apenas para refer√™ncia)
# VITE_API_URL=http://localhost:5000
# VITE_SOCKET_URL=http://localhost:5000
`;

fs.writeFileSync('./.env.production', envProduction);
console.log('üìù Arquivo .env.production criado!');

// Verificar se precisa atualizar api.js
console.log('\nüîß SOLU√á√ïES PARA CORRIGIR OS ERROS:');
console.log('=' .repeat(50));

console.log('\n1. üåê ATUALIZAR VERCEL.JSON:');
console.log('   - Substitua o vercel.json atual pelo vercel.json.fixed');
console.log('   - Ou copie as configura√ß√µes do arquivo .fixed');
console.log('');

console.log('2. üîß CONFIGURAR VARI√ÅVEIS NO VERCEL:');
console.log('   Acesse Vercel Dashboard ‚Üí Settings ‚Üí Environment Variables:');
console.log(`   - VITE_API_URL = ${RAILWAY_BACKEND_URL}`);
console.log(`   - VITE_SOCKET_URL = ${RAILWAY_BACKEND_URL}`);
console.log(`   - VITE_BACKEND_URL = ${RAILWAY_BACKEND_URL}`);
console.log('');

console.log('3. üöÇ VERIFICAR RAILWAY BACKEND:');
console.log('   - Certifique-se que o Railway est√° online');
console.log('   - Configure CORS_ORIGINS no Railway:');
console.log(`     CORS_ORIGINS=${VERCEL_FRONTEND_URL}`);
console.log(`     CLIENT_URL=${VERCEL_FRONTEND_URL}`);
console.log('');

console.log('4. üîÑ REDEPLOYAR AMBOS:');
console.log('   - Fa√ßa commit das altera√ß√µes');
console.log('   - Push para o reposit√≥rio');
console.log('   - Aguarde redeploy autom√°tico no Vercel');
console.log('   - Redeploy manual no Railway se necess√°rio');
console.log('');

console.log('5. üß™ TESTAR CONEX√ÉO:');
console.log('   Ap√≥s os deploys, teste:');
console.log(`   - Frontend: ${VERCEL_FRONTEND_URL}`);
console.log(`   - Backend Health: ${RAILWAY_BACKEND_URL}/api/health`);
console.log(`   - API Quality: ${RAILWAY_BACKEND_URL}/api/quality-tests`);
console.log('');

// Comandos para execu√ß√£o
console.log('üìã COMANDOS PARA EXECU√á√ÉO:');
console.log('=' .repeat(30));
console.log('');
console.log('# 1. Atualizar configura√ß√£o do Vercel');
console.log('cp vercel.json.fixed vercel.json');
console.log('');
console.log('# 2. Fazer commit das altera√ß√µes');
console.log('git add .');
console.log('git commit -m "fix: update frontend configuration for Railway backend"');
console.log('git push origin main');
console.log('');
console.log('# 3. Aguardar redeploy autom√°tico');
console.log('# Vercel: autom√°tico via GitHub');
console.log('# Railway: autom√°tico via GitHub');
console.log('');

console.log('‚úÖ CORRE√á√ÉO DO FRONTEND CONCLU√çDA!');
console.log('');
console.log('üéØ PR√ìXIMOS PASSOS:');
console.log('1. Substitua vercel.json pelo vercel.json.fixed');
console.log('2. Configure as vari√°veis de ambiente no Vercel Dashboard');
console.log('3. Configure CORS no Railway Dashboard');
console.log('4. Fa√ßa commit e push das altera√ß√µes');
console.log('5. Aguarde os redeploys autom√°ticos');
console.log('6. Teste a aplica√ß√£o em produ√ß√£o');

console.log('\nüîó LINKS √öTEIS:');
console.log('- Vercel Dashboard: https://vercel.com/dashboard');
console.log('- Railway Dashboard: https://railway.app/dashboard');
console.log(`- Frontend: ${VERCEL_FRONTEND_URL}`);
console.log(`- Backend: ${RAILWAY_BACKEND_URL}`);