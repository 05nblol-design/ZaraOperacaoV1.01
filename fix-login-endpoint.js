#!/usr/bin/env node

/**
 * CORRE√á√ÉO DO ENDPOINT DE LOGIN
 * 
 * Problema identificado:
 * - O endpoint correto √© /api/auth/login (n√£o /auth/login)
 * - Backend Railway est√° funcionando corretamente
 * - Frontend precisa usar a URL correta
 */

const axios = require('axios');
const fs = require('fs');

// URLs do sistema
const BACKEND_URL = 'https://zara-backend-production-aab3.up.railway.app';
const FRONTEND_URL = 'https://sistema-zara-frontend.vercel.app';

// Credenciais de teste
const TEST_CREDENTIALS = {
  email: 'admin@zara.com',
  password: 'admin123'
};

console.log('üîß CORRE√á√ÉO DO ENDPOINT DE LOGIN');
console.log('=' .repeat(50));
console.log(`Backend: ${BACKEND_URL}`);
console.log(`Frontend: ${FRONTEND_URL}`);
console.log('');

async function testLoginEndpoint() {
  console.log('1Ô∏è‚É£ Testando endpoint de login correto...');
  
  try {
    const response = await axios.post(`${BACKEND_URL}/api/auth/login`, TEST_CREDENTIALS, {
      headers: {
        'Content-Type': 'application/json',
        'Origin': FRONTEND_URL
      },
      timeout: 10000
    });
    
    console.log(`   ‚úÖ Status: ${response.status}`);
    console.log(`   ‚úÖ Success: ${response.data.success}`);
    
    if (response.data.data && response.data.data.token) {
      console.log(`   üîë Token recebido: ${response.data.data.token.substring(0, 20)}...`);
      console.log(`   üë§ Usu√°rio: ${response.data.data.user.name} (${response.data.data.user.role})`);
      return response.data.data.token;
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.response?.status || 'TIMEOUT'} - ${error.message}`);
    if (error.response?.data) {
      console.log(`   üìÑ Resposta: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    return null;
  }
}

async function testOtherEndpoints(token) {
  if (!token) {
    console.log('\n‚ùå Sem token v√°lido, pulando testes de endpoints...');
    return;
  }
  
  console.log('\n2Ô∏è‚É£ Testando endpoints com token v√°lido...');
  
  const endpoints = [
    '/api/health',
    '/api/users',
    '/api/machines',
    '/api/reports/leader-dashboard'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await axios.get(`${BACKEND_URL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      console.log(`   ‚úÖ ${endpoint}: ${response.status}`);
      
    } catch (error) {
      console.log(`   ‚ùå ${endpoint}: ${error.response?.status || 'TIMEOUT'} - ${error.message}`);
    }
  }
}

function generateFrontendFix(token) {
  console.log('\n3Ô∏è‚É£ Gerando script de corre√ß√£o para o frontend...');
  
  const fixScript = `
// SCRIPT DE CORRE√á√ÉO PARA O FRONTEND VERCEL
// Execute este c√≥digo no console do navegador em: ${FRONTEND_URL}

console.log('üîß Aplicando corre√ß√£o de autentica√ß√£o...');

// 1. Limpar dados antigos
localStorage.clear();
sessionStorage.clear();

// 2. Configurar token v√°lido
const validToken = '${token}';
const userData = {
  id: 1,
  name: 'Admin',
  email: 'admin@zara.com',
  role: 'ADMIN',
  isActive: true
};

// 3. Salvar no localStorage
localStorage.setItem('token', validToken);
localStorage.setItem('user', JSON.stringify(userData));

// 4. Verificar se foi salvo
console.log('Token salvo:', localStorage.getItem('token') ? '‚úÖ' : '‚ùå');
console.log('Usu√°rio salvo:', localStorage.getItem('user') ? '‚úÖ' : '‚ùå');

// 5. Recarregar p√°gina
console.log('üîÑ Recarregando p√°gina...');
window.location.reload();
`;
  
  fs.writeFileSync('frontend-login-fix.js', fixScript);
  console.log('   ‚úÖ Script salvo em: frontend-login-fix.js');
  
  return fixScript;
}

function generateInstructions() {
  console.log('\nüìã INSTRU√á√ïES DE CORRE√á√ÉO:');
  console.log('=' .repeat(50));
  console.log('');
  console.log('1. üåê Abra o frontend no navegador:');
  console.log(`   ${FRONTEND_URL}`);
  console.log('');
  console.log('2. üîß Abra o Console do Desenvolvedor:');
  console.log('   - Chrome/Edge: F12 ‚Üí Console');
  console.log('   - Firefox: F12 ‚Üí Console');
  console.log('   - Safari: Cmd+Opt+C');
  console.log('');
  console.log('3. üìã Cole e execute o c√≥digo do arquivo:');
  console.log('   frontend-login-fix.js');
  console.log('');
  console.log('4. ‚úÖ Resultado esperado:');
  console.log('   - Token e usu√°rio salvos no localStorage');
  console.log('   - P√°gina recarregada automaticamente');
  console.log('   - Login autom√°tico realizado');
  console.log('   - Dashboard carregado sem erros');
  console.log('');
  console.log('5. üß™ Teste o Leader Dashboard:');
  console.log(`   ${FRONTEND_URL}/leader-dashboard`);
  console.log('');
}

async function main() {
  try {
    // Testar login
    const token = await testLoginEndpoint();
    
    if (token) {
      // Testar outros endpoints
      await testOtherEndpoints(token);
      
      // Gerar corre√ß√£o
      generateFrontendFix(token);
      
      // Mostrar instru√ß√µes
      generateInstructions();
      
      console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!');
      console.log('\n‚è≠Ô∏è Pr√≥ximos passos:');
      console.log('   1. Execute o script frontend-login-fix.js no console');
      console.log('   2. Teste o sistema completo');
      console.log('   3. Verifique se todos os erros foram resolvidos');
      
    } else {
      console.log('\n‚ùå FALHA NA CORRE√á√ÉO');
      console.log('\nüîç Poss√≠veis causas:');
      console.log('   1. Backend Railway n√£o est√° respondendo');
      console.log('   2. Credenciais de admin n√£o existem no banco');
      console.log('   3. Problema de CORS ainda n√£o resolvido');
      console.log('');
      console.log('üîß Solu√ß√µes:');
      console.log('   1. Verificar status do Railway');
      console.log('   2. Criar usu√°rio admin no banco');
      console.log('   3. Configurar CORS_ORIGIN no Railway');
    }
    
  } catch (error) {
    console.error('\nüí• Erro durante a corre√ß√£o:', error.message);
  }
}

// Executar corre√ß√£o
main();