#!/usr/bin/env node

/**
 * DIAGN√ìSTICO COMPLETO DOS ERROS DE PRODU√á√ÉO
 * Sistema: Frontend Vercel + Backend Railway + PostgreSQL
 * 
 * Erros identificados:
 * - SyntaxError: Failed to execute 'json' on 'Response': Unexpected token '<'
 * - Frontend recebendo HTML em vez de JSON
 * - M√∫ltiplos componentes afetados: Dashboard, QualityTests, Reports
 */

const axios = require('axios');
const fs = require('fs');

// URLs do sistema em produ√ß√£o
const PRODUCTION_URLS = {
  frontend: 'https://sistema-zara-frontend.vercel.app',
  backend: 'https://zara-backend-production-aab3.up.railway.app',
  api: 'https://zara-backend-production-aab3.up.railway.app/api'
};

// Endpoints cr√≠ticos que est√£o falhando
const CRITICAL_ENDPOINTS = [
  '/api/reports/manager-dashboard',
  '/api/reports/leader-dashboard', 
  '/api/reports/quality-metrics',
  '/api/reports/production-data',
  '/api/machines',
  '/api/users',
  '/api/auth/login',
  '/api/health'
];

// Componentes afetados pelos erros
const AFFECTED_COMPONENTS = [
  'ManagerDashboard',
  'QualityTests', 
  'Reports',
  'ProductionData'
];

console.log('üîç DIAGN√ìSTICO COMPLETO - ERROS DE PRODU√á√ÉO');
console.log('=' .repeat(60));
console.log(`Frontend: ${PRODUCTION_URLS.frontend}`);
console.log(`Backend:  ${PRODUCTION_URLS.backend}`);
console.log(`API:      ${PRODUCTION_URLS.api}`);
console.log('');

// 1. Testar conectividade b√°sica
async function testBasicConnectivity() {
  console.log('\nüåê TESTE 1: CONECTIVIDADE B√ÅSICA');
  console.log('-'.repeat(40));
  
  const tests = [
    { name: 'Frontend Vercel', url: PRODUCTION_URLS.frontend },
    { name: 'Backend Railway', url: PRODUCTION_URLS.backend },
    { name: 'API Health Check', url: `${PRODUCTION_URLS.api}/health` }
  ];
  
  for (const test of tests) {
    try {
      const response = await axios.get(test.url, { timeout: 10000 });
      console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);
      
      // Verificar se est√° retornando HTML em vez de JSON
      const contentType = response.headers['content-type'] || '';
      if (test.url.includes('/api/') && contentType.includes('text/html')) {
        console.log(`‚ö†Ô∏è  ${test.name}: RETORNANDO HTML EM VEZ DE JSON!`);
      }
    } catch (error) {
      console.log(`‚ùå ${test.name}: ${error.message}`);
      if (error.response) {
        console.log(`   Status: ${error.response.status}`);
        console.log(`   Headers: ${JSON.stringify(error.response.headers, null, 2)}`);
      }
    }
  }
}

// 2. Testar endpoints espec√≠ficos que est√£o falhando
async function testCriticalEndpoints() {
  console.log('\nüéØ TESTE 2: ENDPOINTS CR√çTICOS');
  console.log('-'.repeat(40));
  
  for (const endpoint of CRITICAL_ENDPOINTS) {
    const url = `${PRODUCTION_URLS.backend}${endpoint}`;
    
    try {
      const response = await axios.get(url, {
        timeout: 15000,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      const contentType = response.headers['content-type'] || '';
      const isJson = contentType.includes('application/json');
      const isHtml = contentType.includes('text/html');
      
      console.log(`‚úÖ ${endpoint}: ${response.status}`);
      console.log(`   Content-Type: ${contentType}`);
      
      if (isHtml && endpoint.includes('/api/')) {
        console.log(`   üö® PROBLEMA: API retornando HTML!`);
        console.log(`   Resposta: ${response.data.substring(0, 100)}...`);
      } else if (isJson) {
        console.log(`   ‚úÖ JSON v√°lido retornado`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${endpoint}: ${error.message}`);
      
      if (error.response) {
        const contentType = error.response.headers['content-type'] || '';
        console.log(`   Status: ${error.response.status}`);
        console.log(`   Content-Type: ${contentType}`);
        
        if (contentType.includes('text/html')) {
          console.log(`   üö® ERRO: Recebendo HTML em vez de JSON!`);
          console.log(`   Resposta: ${error.response.data.substring(0, 200)}...`);
        }
      }
    }
  }
}

// 3. Verificar configura√ß√µes de CORS
async function testCorsConfiguration() {
  console.log('\nüîí TESTE 3: CONFIGURA√á√ÉO CORS');
  console.log('-'.repeat(40));
  
  try {
    const response = await axios.options(`${PRODUCTION_URLS.api}/health`, {
      headers: {
        'Origin': PRODUCTION_URLS.frontend,
        'Access-Control-Request-Method': 'GET',
        'Access-Control-Request-Headers': 'Content-Type'
      }
    });
    
    const corsHeaders = {
      'Access-Control-Allow-Origin': response.headers['access-control-allow-origin'],
      'Access-Control-Allow-Methods': response.headers['access-control-allow-methods'],
      'Access-Control-Allow-Headers': response.headers['access-control-allow-headers']
    };
    
    console.log('‚úÖ CORS Headers:');
    console.log(JSON.stringify(corsHeaders, null, 2));
    
    if (!corsHeaders['Access-Control-Allow-Origin']) {
      console.log('üö® PROBLEMA: CORS n√£o configurado!');
    }
    
  } catch (error) {
    console.log(`‚ùå Teste CORS falhou: ${error.message}`);
  }
}

// 4. Simular requisi√ß√µes do frontend
async function simulateFrontendRequests() {
  console.log('\nüñ•Ô∏è  TESTE 4: SIMULA√á√ÉO DE REQUISI√á√ïES DO FRONTEND');
  console.log('-'.repeat(40));
  
  const frontendRequests = [
    { name: 'Manager Dashboard', endpoint: '/api/reports/manager-dashboard' },
    { name: 'Quality Tests', endpoint: '/api/reports/quality-metrics' },
    { name: 'Production Reports', endpoint: '/api/reports/production-data' }
  ];
  
  for (const request of frontendRequests) {
    try {
      const response = await axios.get(`${PRODUCTION_URLS.backend}${request.endpoint}`, {
        headers: {
          'Origin': PRODUCTION_URLS.frontend,
          'Referer': PRODUCTION_URLS.frontend,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });
      
      console.log(`‚úÖ ${request.name}: ${response.status}`);
      
      // Verificar se √© JSON v√°lido
      try {
        if (typeof response.data === 'string') {
          JSON.parse(response.data);
        }
        console.log(`   ‚úÖ JSON v√°lido`);
      } catch (jsonError) {
        console.log(`   üö® JSON INV√ÅLIDO: ${jsonError.message}`);
        console.log(`   Resposta: ${response.data.substring(0, 200)}...`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${request.name}: ${error.message}`);
      
      if (error.response && error.response.data) {
        const data = error.response.data.toString();
        if (data.includes('<!doctype') || data.includes('<html>')) {
          console.log(`   üö® RECEBENDO HTML EM VEZ DE JSON!`);
          console.log(`   In√≠cio da resposta: ${data.substring(0, 100)}...`);
        }
      }
    }
  }
}

// 5. Verificar vari√°veis de ambiente
function checkEnvironmentVariables() {
  console.log('\n‚öôÔ∏è  TESTE 5: VARI√ÅVEIS DE AMBIENTE');
  console.log('-'.repeat(40));
  
  const envFiles = [
    'frontend/.env.production',
    'frontend/vercel.json',
    'server/.env.production'
  ];
  
  envFiles.forEach(file => {
    try {
      if (fs.existsSync(file)) {
        const content = fs.readFileSync(file, 'utf8');
        console.log(`‚úÖ ${file}: EXISTE`);
        
        // Verificar URLs
        if (content.includes('sistema-zara-backend-production.up.railway.app')) {
          console.log(`   ‚ö†Ô∏è  Cont√©m URL antiga do Railway`);
        }
        if (content.includes('zara-backend-production-aab3.up.railway.app')) {
          console.log(`   ‚úÖ Cont√©m URL correta do Railway`);
        }
      } else {
        console.log(`‚ùå ${file}: N√ÉO EXISTE`);
      }
    } catch (error) {
      console.log(`‚ùå ${file}: Erro ao ler - ${error.message}`);
    }
  });
}

// 6. Gerar relat√≥rio de diagn√≥stico
function generateDiagnosisReport(results) {
  const timestamp = new Date().toISOString();
  const report = {
    timestamp,
    system: {
      frontend: PRODUCTION_URLS.frontend,
      backend: PRODUCTION_URLS.backend,
      api: PRODUCTION_URLS.api
    },
    errors_identified: [
      'SyntaxError: Failed to execute json on Response',
      'Unexpected token < (HTML instead of JSON)',
      'Multiple components affected: Dashboard, QualityTests, Reports'
    ],
    affected_components: AFFECTED_COMPONENTS,
    critical_endpoints: CRITICAL_ENDPOINTS,
    diagnosis: results,
    recommendations: [
      '1. Verificar se o backend Railway est√° rodando corretamente',
      '2. Confirmar se as rotas da API est√£o respondendo JSON',
      '3. Verificar configura√ß√£o de CORS no Railway',
      '4. Validar vari√°veis de ambiente no Vercel',
      '5. Testar redeploy do backend Railway',
      '6. Verificar logs do Railway para erros internos',
      '7. Confirmar se o PostgreSQL est√° conectado corretamente'
    ],
    next_steps: [
      'Executar redeploy manual do Railway',
      'Verificar logs do Railway Dashboard',
      'Testar endpoints individualmente',
      'Validar configura√ß√£o do banco PostgreSQL',
      'Atualizar vari√°veis de ambiente se necess√°rio'
    ]
  };
  
  const reportFile = `production-diagnosis-${Date.now()}.json`;
  fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
  
  console.log('\nüìã RELAT√ìRIO DE DIAGN√ìSTICO');
  console.log('-'.repeat(40));
  console.log(`Relat√≥rio salvo em: ${reportFile}`);
  console.log('\nüéØ PRINCIPAIS PROBLEMAS IDENTIFICADOS:');
  report.errors_identified.forEach(error => console.log(`   ‚Ä¢ ${error}`));
  
  console.log('\nüí° RECOMENDA√á√ïES PRIORIT√ÅRIAS:');
  report.recommendations.slice(0, 3).forEach(rec => console.log(`   ${rec}`));
  
  return report;
}

// Executar diagn√≥stico completo
async function runCompleteDiagnosis() {
  const results = {};
  
  try {
    console.log('üöÄ INICIANDO DIAGN√ìSTICO COMPLETO DO SISTEMA');
    console.log('Analisando erros de produ√ß√£o: Frontend Vercel + Backend Railway + PostgreSQL');
    console.log('');
    
    await testBasicConnectivity();
    await testCriticalEndpoints();
    await testCorsConfiguration();
    await simulateFrontendRequests();
    checkEnvironmentVariables();
    
    const report = generateDiagnosisReport(results);
    
    console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO!');
    console.log('\nüîß PR√ìXIMAS A√á√ïES RECOMENDADAS:');
    console.log('1. Verificar Railway Dashboard para status do backend');
    console.log('2. Executar redeploy manual se necess√°rio');
    console.log('3. Verificar logs do Railway para erros espec√≠ficos');
    console.log('4. Testar conectividade com PostgreSQL');
    console.log('5. Validar configura√ß√µes de CORS');
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runCompleteDiagnosis();
}

module.exports = {
  runCompleteDiagnosis,
  testBasicConnectivity,
  testCriticalEndpoints,
  PRODUCTION_URLS,
  CRITICAL_ENDPOINTS
};