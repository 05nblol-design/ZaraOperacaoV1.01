#!/usr/bin/env node

/**
 * Script para testar o novo deployment do Vercel ap√≥s configura√ß√£o das vari√°veis
 */

const https = require('https');

// Nova URL do deployment
const NEW_FRONTEND_URL = 'https://sistema-zara-frontend-kg85kov5j-05nblol-designs-projects.vercel.app';
const BACKEND_URL = 'https://zara-backend-production-aab3.up.railway.app';

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.get(url, options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.setTimeout(15000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
  });
}

async function testNewDeployment() {
  console.log('üß™ Testando novo deployment do Vercel...');
  console.log('=' .repeat(60));
  console.log(`üåê URL: ${NEW_FRONTEND_URL}`);
  console.log('');
  
  try {
    // Teste 1: Verificar se o frontend est√° acess√≠vel
    console.log('1Ô∏è‚É£ Testando acesso ao frontend...');
    const frontendResponse = await makeRequest(NEW_FRONTEND_URL);
    
    console.log(`   Status: ${frontendResponse.statusCode}`);
    
    if (frontendResponse.statusCode === 200) {
      console.log('   ‚úÖ Frontend acess√≠vel!');
      
      // Verificar se cont√©m as vari√°veis corretas no HTML
      const htmlContent = frontendResponse.data;
      
      if (htmlContent.includes('zara-backend-production-aab3.up.railway.app')) {
        console.log('   ‚úÖ Vari√°veis de ambiente aplicadas corretamente!');
      } else {
        console.log('   ‚ö†Ô∏è  Vari√°veis de ambiente n√£o detectadas no HTML');
      }
      
      // Verificar se n√£o h√° erros de sintaxe no HTML
      if (htmlContent.includes('<!doctype') || htmlContent.includes('<!DOCTYPE')) {
        console.log('   ‚úÖ HTML v√°lido retornado');
      } else {
        console.log('   ‚ùå HTML inv√°lido ou incompleto');
      }
      
    } else {
      console.log(`   ‚ùå Frontend retornou status: ${frontendResponse.statusCode}`);
    }
    
    // Teste 2: Simular requisi√ß√£o AJAX para API
    console.log('\n2Ô∏è‚É£ Testando conectividade com backend...');
    try {
      const apiResponse = await makeRequest(`${BACKEND_URL}/api/auth/login`, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Origin': NEW_FRONTEND_URL
        }
      });
      
      console.log(`   Status: ${apiResponse.statusCode}`);
      
      if (apiResponse.statusCode === 400 || apiResponse.statusCode === 401) {
        console.log('   ‚úÖ Backend acess√≠vel (erro de autentica√ß√£o esperado)');
        
        // Verificar se retorna JSON v√°lido
        try {
          const jsonResponse = JSON.parse(apiResponse.data);
          console.log('   ‚úÖ Backend retorna JSON v√°lido');
          console.log(`   üìÑ Resposta: ${JSON.stringify(jsonResponse)}`);
        } catch (jsonError) {
          console.log('   ‚ùå Backend n√£o retorna JSON v√°lido');
        }
      } else {
        console.log(`   ‚ö†Ô∏è  Status inesperado: ${apiResponse.statusCode}`);
      }
      
    } catch (backendError) {
      console.log(`   ‚ùå Erro ao conectar com backend: ${backendError.message}`);
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log('üìã RESULTADO:');
    
    if (frontendResponse.statusCode === 200) {
      console.log('‚úÖ DEPLOYMENT FUNCIONANDO!');
      console.log('üéâ Os erros de "Unexpected token \'<\'" devem estar resolvidos');
      console.log('üåê Acesse o frontend e verifique se os dados carregam corretamente');
    } else {
      console.log('‚ùå DEPLOYMENT COM PROBLEMAS');
      console.log('üîß Pode ser necess√°rio aguardar mais tempo ou verificar configura√ß√µes');
    }
    
    console.log(`\nüîó URL para testar: ${NEW_FRONTEND_URL}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    console.log('‚è≥ Tente novamente em alguns minutos - o deployment pode ainda estar propagando');
  }
}

// Executar teste
testNewDeployment();