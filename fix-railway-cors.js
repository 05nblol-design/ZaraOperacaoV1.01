#!/usr/bin/env node

/**
 * Script para configurar CORS no Railway com URL do frontend Vercel
 * Corrige o problema de conectividade entre Vercel e Railway
 */

const fs = require('fs');
const path = require('path');

// URLs identificadas
const VERCEL_FRONTEND_URL = 'https://sistema-zara-frontend.vercel.app';
const RAILWAY_BACKEND_URL = 'https://zara-backend-production-aab3.up.railway.app';

console.log('üîß CONFIGURANDO CORS NO RAILWAY PARA VERCEL');
console.log('=' .repeat(60));

// 1. Verificar configura√ß√£o atual de CORS
console.log('\nüìã VERIFICANDO CONFIGURA√á√ÉO ATUAL...');

const securityConfigPath = path.join(__dirname, 'server', 'config', 'security.js');
if (fs.existsSync(securityConfigPath)) {
    console.log('‚úÖ Arquivo security.js encontrado');
    const content = fs.readFileSync(securityConfigPath, 'utf8');
    
    if (content.includes('CORS_ORIGINS') || content.includes('CORS_ORIGIN')) {
        console.log('‚úÖ Configura√ß√£o CORS encontrada no c√≥digo');
    } else {
        console.log('‚ö†Ô∏è  Configura√ß√£o CORS n√£o encontrada');
    }
} else {
    console.log('‚ùå Arquivo security.js n√£o encontrado');
}

// 2. Criar arquivo de configura√ß√£o para Railway
console.log('\nüöÇ CRIANDO CONFIGURA√á√ÉO PARA RAILWAY...');

const railwayEnvConfig = `# Configura√ß√£o de CORS para Railway
# Adicione estas vari√°veis no Railway Dashboard

# CORS - URLs permitidas (CR√çTICO!)
CORS_ORIGINS=${VERCEL_FRONTEND_URL}

# Alternativa com m√∫ltiplas URLs
# CORS_ORIGINS=${VERCEL_FRONTEND_URL},https://sistema-zara-frontend-*.vercel.app

# Para desenvolvimento/teste (tempor√°rio)
# CORS_ORIGINS=*

# Outras vari√°veis importantes
NODE_ENV=production
PORT=5000

# Frontend URL para refer√™ncia
FRONTEND_URL=${VERCEL_FRONTEND_URL}
CLIENT_URL=${VERCEL_FRONTEND_URL}

# Backend URL para refer√™ncia
BACKEND_URL=${RAILWAY_BACKEND_URL}
API_URL=${RAILWAY_BACKEND_URL}/api
`;

fs.writeFileSync('railway-cors-config.env', railwayEnvConfig);
console.log('‚úÖ Arquivo railway-cors-config.env criado');

// 3. Criar script de teste de CORS
console.log('\nüß™ CRIANDO SCRIPT DE TESTE...');

const testCorsScript = `#!/usr/bin/env node

/**
 * Teste de CORS entre Vercel e Railway
 */

const https = require('https');
const http = require('http');

const VERCEL_URL = '${VERCEL_FRONTEND_URL}';
const RAILWAY_URL = '${RAILWAY_BACKEND_URL}';

console.log('üß™ TESTANDO CORS VERCEL ‚Üî RAILWAY');
console.log('=' .repeat(50));

// Fun√ß√£o para fazer requisi√ß√£o HTTP
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const protocol = url.startsWith('https') ? https : http;
        
        const req = protocol.request(url, {
            method: 'GET',
            headers: {
                'Origin': VERCEL_URL,
                'User-Agent': 'CORS-Test/1.0',
                ...options.headers
            }
        }, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                resolve({
                    status: res.statusCode,
                    headers: res.headers,
                    data: data
                });
            });
        });
        
        req.on('error', reject);
        req.setTimeout(10000, () => {
            req.destroy();
            reject(new Error('Timeout'));
        });
        
        req.end();
    });
}

// Teste 1: Health Check com Origin
async function testHealthWithOrigin() {
    console.log('\n‚è≥ Testando Health Check com Origin...');
    try {
        const response = await makeRequest(\`\${RAILWAY_URL}/api/health\`);
        console.log(\`   üìä Status: \${response.status}\`);
        
        // Verificar headers CORS
        const corsHeaders = {
            'access-control-allow-origin': response.headers['access-control-allow-origin'],
            'access-control-allow-credentials': response.headers['access-control-allow-credentials'],
            'access-control-allow-methods': response.headers['access-control-allow-methods']
        };
        
        console.log('   üîí Headers CORS:');
        Object.entries(corsHeaders).forEach(([key, value]) => {
            if (value) {
                console.log(\`      ‚úÖ \${key}: \${value}\`);
            } else {
                console.log(\`      ‚ùå \${key}: N√ÉO CONFIGURADO\`);
            }
        });
        
        // Verificar se Vercel est√° permitido
        const allowedOrigin = response.headers['access-control-allow-origin'];
        if (allowedOrigin === VERCEL_URL || allowedOrigin === '*') {
            console.log('   ‚úÖ CORS: Vercel PERMITIDO');
        } else {
            console.log('   ‚ùå CORS: Vercel N√ÉO PERMITIDO');
            console.log(\`      Expected: \${VERCEL_URL}\`);
            console.log(\`      Received: \${allowedOrigin || 'undefined'}\`);
        }
        
    } catch (error) {
        console.log(\`   ‚ùå Erro: \${error.message}\`);
    }
}

// Teste 2: Preflight OPTIONS
async function testPreflight() {
    console.log('\n‚è≥ Testando Preflight OPTIONS...');
    try {
        const response = await makeRequest(\`\${RAILWAY_URL}/api/health\`, {
            method: 'OPTIONS',
            headers: {
                'Access-Control-Request-Method': 'GET',
                'Access-Control-Request-Headers': 'Content-Type,Authorization'
            }
        });
        
        console.log(\`   üìä Status: \${response.status}\`);
        
        if (response.status === 200 || response.status === 204) {
            console.log('   ‚úÖ Preflight: SUCESSO');
        } else {
            console.log('   ‚ùå Preflight: FALHOU');
        }
        
    } catch (error) {
        console.log(\`   ‚ùå Erro: \${error.message}\`);
    }
}

// Executar testes
async function runTests() {
    await testHealthWithOrigin();
    await testPreflight();
    
    console.log('\n' + '=' .repeat(50));
    console.log('üéØ DIAGN√ìSTICO CORS CONCLU√çDO!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Configure CORS_ORIGINS no Railway Dashboard');
    console.log('2. Aguarde redeploy autom√°tico (2-3 minutos)');
    console.log('3. Execute este teste novamente');
    console.log('4. Teste a aplica√ß√£o completa');
    
    console.log('\nüîó LINKS:');
    console.log(\`   üöÇ Railway: https://railway.app/dashboard\`);
    console.log(\`   üåê Frontend: \${VERCEL_URL}\`);
    console.log(\`   ‚ö° Backend: \${RAILWAY_URL}\`);
}

runTests().catch(console.error);
`;

fs.writeFileSync('test-cors-vercel-railway.js', testCorsScript);
console.log('‚úÖ Script test-cors-vercel-railway.js criado');

// 4. Instru√ß√µes finais
console.log('\n' + '=' .repeat(60));
console.log('üéØ CONFIGURA√á√ÉO CORS PREPARADA!');
console.log('=' .repeat(60));

console.log('\nüìã PR√ìXIMOS PASSOS OBRIGAT√ìRIOS:');
console.log('\n1. üöÇ ACESSE O RAILWAY DASHBOARD:');
console.log('   ‚Üí https://railway.app/dashboard');
console.log('   ‚Üí Selecione seu projeto backend');
console.log('   ‚Üí V√° em "Variables"');

console.log('\n2. ‚öôÔ∏è  ADICIONE/ATUALIZE VARI√ÅVEL:');
console.log('   Nome: CORS_ORIGINS');
console.log(`   Valor: ${VERCEL_FRONTEND_URL}`);
console.log('   (Copie exatamente como mostrado acima)');

console.log('\n3. üîÑ AGUARDE REDEPLOY:');
console.log('   ‚Üí Railway far√° redeploy autom√°tico');
console.log('   ‚Üí Aguarde 2-3 minutos');
console.log('   ‚Üí Verifique logs em "Deployments"');

console.log('\n4. üß™ TESTE A CORRE√á√ÉO:');
console.log('   ‚Üí node test-cors-vercel-railway.js');

console.log('\n‚ö†Ô∏è  IMPORTANTE:');
console.log('   ‚Ä¢ Use a URL EXATA do Vercel');
console.log('   ‚Ä¢ N√£o adicione barra no final');
console.log('   ‚Ä¢ Verifique se √© https://');
console.log('   ‚Ä¢ Aguarde o redeploy completar');

console.log('\nüîó ARQUIVOS CRIADOS:');
console.log('   üìÑ railway-cors-config.env - Configura√ß√£o para Railway');
console.log('   üß™ test-cors-vercel-railway.js - Teste de CORS');

console.log('\n‚úÖ CONFIGURA√á√ÉO PRONTA! Siga os passos acima.');