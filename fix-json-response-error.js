#!/usr/bin/env node

/**
 * Script para corrigir erro de resposta HTML em vez de JSON
 * Erro: SyntaxError: Failed to execute 'json' on 'Response': Unexpected token '<'
 */

const https = require('https');
const fs = require('fs');

console.log('üîß CORRIGINDO ERRO DE RESPOSTA JSON...');
console.log('=' .repeat(50));

// URLs para teste
const BACKEND_URLS = [
  'https://sistema-zara-backend-production.up.railway.app/api/health',
  'https://sistema-zara-backend-production.up.railway.app/api/quality-tests',
  'https://sistema-zara-backend-production.up.railway.app/api/auth/login'
];

const FRONTEND_URL = 'https://sistema-zara-frontend.vercel.app';

// Fun√ß√£o para testar resposta
function testResponse(url) {
  return new Promise((resolve) => {
    const req = https.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        const isHTML = data.trim().toLowerCase().startsWith('<!doctype') || 
                      data.trim().toLowerCase().startsWith('<html');
        const isJSON = data.trim().startsWith('{') || data.trim().startsWith('[');
        
        resolve({
          url,
          status: res.statusCode,
          contentType: res.headers['content-type'] || 'unknown',
          isHTML,
          isJSON,
          responseSize: data.length,
          preview: data.substring(0, 200)
        });
      });
    });
    
    req.on('error', (error) => {
      resolve({
        url,
        status: 'ERROR',
        error: error.message
      });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      resolve({
        url,
        status: 'TIMEOUT',
        error: 'Request timeout'
      });
    });
  });
}

// Fun√ß√£o principal
async function main() {
  console.log('\nüîç ANALISANDO RESPOSTAS DO BACKEND:');
  console.log('-'.repeat(45));
  
  let htmlResponses = 0;
  let jsonResponses = 0;
  let errorResponses = 0;
  
  for (const url of BACKEND_URLS) {
    console.log(`\nüì° Testando: ${url}`);
    const result = await testResponse(url);
    
    if (result.status === 'ERROR' || result.status === 'TIMEOUT') {
      console.log(`‚ùå ${result.status}: ${result.error}`);
      errorResponses++;
    } else {
      console.log(`üìä Status: ${result.status}`);
      console.log(`üìÑ Content-Type: ${result.contentType}`);
      console.log(`üìè Tamanho: ${result.responseSize} bytes`);
      
      if (result.isHTML) {
        console.log('‚ö†Ô∏è  PROBLEMA: Resposta √© HTML, n√£o JSON!');
        console.log(`üìù Preview: ${result.preview}...`);
        htmlResponses++;
      } else if (result.isJSON) {
        console.log('‚úÖ OK: Resposta √© JSON v√°lido');
        jsonResponses++;
      } else {
        console.log('‚ùì DESCONHECIDO: Formato de resposta n√£o identificado');
      }
    }
  }
  
  console.log('\nüìä RESUMO DA AN√ÅLISE:');
  console.log('-'.repeat(30));
  console.log(`‚úÖ Respostas JSON: ${jsonResponses}`);
  console.log(`‚ö†Ô∏è  Respostas HTML: ${htmlResponses}`);
  console.log(`‚ùå Erros/Timeouts: ${errorResponses}`);
  
  console.log('\nüîß DIAGN√ìSTICO:');
  console.log('-'.repeat(20));
  
  if (htmlResponses > 0 || errorResponses > 0) {
    console.log('‚ùå PROBLEMA CONFIRMADO: Backend Railway est√° offline ou mal configurado');
    console.log('\nüõ†Ô∏è  SOLU√á√ïES IMEDIATAS:');
    console.log('1. üöÇ REDEPLOY RAILWAY (URGENTE)');
    console.log('   - Acesse: https://railway.app/dashboard');
    console.log('   - Projeto: sistema-zara-backend');
    console.log('   - Clique em "Redeploy"');
    console.log('');
    console.log('2. ‚öôÔ∏è  VERIFICAR VARI√ÅVEIS DE AMBIENTE:');
    console.log('   - DATABASE_URL (PostgreSQL)');
    console.log('   - NODE_ENV=production');
    console.log('   - PORT=5000');
    console.log('   - JWT_SECRET');
    console.log('');
    console.log('3. üîÑ CONFIGURAR CORS:');
    console.log('   - CORS_ORIGINS=https://sistema-zara-frontend.vercel.app');
    console.log('   - CLIENT_URL=https://sistema-zara-frontend.vercel.app');
    console.log('');
    console.log('4. üìã VERIFICAR LOGS DO RAILWAY:');
    console.log('   - V√° para "Deployments" ‚Üí "View Logs"');
    console.log('   - Procure por erros de inicializa√ß√£o');
    
  } else {
    console.log('‚úÖ BACKEND OK: Todas as respostas s√£o JSON v√°lidas');
    console.log('\nüîç VERIFICAR FRONTEND:');
    console.log('- O erro pode estar no c√≥digo do frontend');
    console.log('- Verificar se as URLs est√£o corretas');
    console.log('- Verificar headers das requisi√ß√µes');
  }
  
  console.log('\nüéØ A√á√ïES RECOMENDADAS (EM ORDEM):');
  console.log('=' .repeat(40));
  console.log('1. üöÇ Redeploy Railway Dashboard');
  console.log('2. ‚è±Ô∏è  Aguardar 3-5 minutos');
  console.log('3. üß™ Executar este script novamente');
  console.log('4. üîÑ Se ainda houver erro, verificar logs');
  console.log('5. ‚öôÔ∏è  Configurar vari√°veis se necess√°rio');
  console.log('6. üåê Testar frontend ap√≥s corre√ß√£o');
  
  // Criar arquivo de corre√ß√£o autom√°tica
  const fixScript = `
# SCRIPT DE CORRE√á√ÉO AUTOM√ÅTICA
# Execute estes comandos ap√≥s o redeploy do Railway:

# 1. Testar backend
curl -X GET "https://sistema-zara-backend-production.up.railway.app/api/health" \
  -H "Content-Type: application/json"

# 2. Testar endpoint de quality-tests
curl -X GET "https://sistema-zara-backend-production.up.railway.app/api/quality-tests" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer SEU_TOKEN_AQUI"

# 3. Verificar CORS
curl -X OPTIONS "https://sistema-zara-backend-production.up.railway.app/api/health" \
  -H "Origin: https://sistema-zara-frontend.vercel.app" \
  -H "Access-Control-Request-Method: GET" \
  -v

# 4. Testar frontend
echo "Acesse: https://sistema-zara-frontend.vercel.app"
echo "Verifique se n√£o h√° mais erros de JSON no console"
`;
  
  fs.writeFileSync('railway-fix-commands.sh', fixScript);
  
  // Salvar relat√≥rio detalhado
  const report = {
    timestamp: new Date().toISOString(),
    error_type: 'JSON_PARSE_ERROR',
    html_responses: htmlResponses,
    json_responses: jsonResponses,
    error_responses: errorResponses,
    backend_status: htmlResponses > 0 ? 'OFFLINE' : 'ONLINE',
    frontend_url: FRONTEND_URL,
    recommended_actions: [
      'Redeploy Railway Dashboard',
      'Wait 3-5 minutes',
      'Test again',
      'Check Railway logs if still failing',
      'Configure environment variables'
    ]
  };
  
  fs.writeFileSync(
    `json-error-diagnosis-${Date.now()}.json`,
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüìÑ Arquivos criados:');
  console.log('- railway-fix-commands.sh (comandos de corre√ß√£o)');
  console.log('- json-error-diagnosis-[timestamp].json (relat√≥rio)');
  
  console.log('\nüîß CORRE√á√ÉO DE ERRO JSON CONCLU√çDA!');
  console.log('\n‚ö° PR√ìXIMO PASSO: Redeploy Railway Dashboard AGORA!');
}

// Executar
main().catch(console.error);