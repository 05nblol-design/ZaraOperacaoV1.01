#!/bin/bash

# ===========================================
# SCRIPT DE DEPLOY AUTOMATIZADO - SISTEMA ZARA
# ===========================================

set -e  # Parar execu√ß√£o em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Docker est√° instalado
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    log_success "Docker e Docker Compose encontrados."
}

# Verificar arquivos necess√°rios
check_files() {
    local files=("docker-compose.yml" "server/Dockerfile" "frontend/Dockerfile" "server/.env")
    
    for file in "${files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "Arquivo necess√°rio n√£o encontrado: $file"
            exit 1
        fi
    done
    
    log_success "Todos os arquivos necess√°rios encontrados."
}

# Configurar vari√°veis de ambiente
setup_env() {
    log "Configurando vari√°veis de ambiente..."
    
    # Verificar se .env existe no servidor
    if [[ ! -f "server/.env" ]]; then
        log_warning "Arquivo .env n√£o encontrado no servidor. Copiando do exemplo..."
        cp server/.env.example server/.env
        log_warning "IMPORTANTE: Configure as vari√°veis em server/.env antes de continuar!"
        read -p "Pressione Enter ap√≥s configurar o arquivo .env..."
    fi
    
    # Verificar se .env.production existe no frontend
    if [[ ! -f "frontend/.env.production" ]]; then
        log_warning "Arquivo .env.production n√£o encontrado no frontend."
        log "Criando arquivo .env.production com configura√ß√µes padr√£o..."
        
        cat > frontend/.env.production << EOF
VITE_API_URL=http://localhost:5000/api
VITE_SOCKET_URL=http://localhost:5000
VITE_APP_NAME=Sistema ZARA
VITE_APP_VERSION=1.0.1
NODE_ENV=production
VITE_BUILD_MODE=production
EOF
        
        log_success "Arquivo .env.production criado. Configure as URLs de produ√ß√£o se necess√°rio."
    fi
}

# Build das imagens Docker
build_images() {
    log "Construindo imagens Docker..."
    
    # Parar containers existentes
    docker-compose down 2>/dev/null || true
    
    # Build das imagens
    docker-compose build --no-cache
    
    log_success "Imagens Docker constru√≠das com sucesso."
}

# Executar migra√ß√µes do banco
run_migrations() {
    log "Executando migra√ß√µes do banco de dados..."
    
    # Verificar se √© primeira execu√ß√£o
    if [[ ! -f "server/prisma/dev.db" ]]; then
        log "Primeira execu√ß√£o detectada. Gerando banco de dados..."
        cd server
        npx prisma generate
        npx prisma db push
        npx prisma db seed 2>/dev/null || log_warning "Seed n√£o executado (normal se n√£o configurado)"
        cd ..
    else
        log "Banco existente encontrado. Aplicando migra√ß√µes..."
        cd server
        npx prisma generate
        npx prisma db push
        cd ..
    fi
    
    log_success "Migra√ß√µes executadas com sucesso."
}

# Iniciar aplica√ß√£o
start_application() {
    log "Iniciando aplica√ß√£o..."
    
    # Iniciar com docker-compose
    docker-compose up -d
    
    # Aguardar containers iniciarem
    log "Aguardando containers iniciarem..."
    sleep 10
    
    # Verificar status dos containers
    if docker-compose ps | grep -q "Up"; then
        log_success "Aplica√ß√£o iniciada com sucesso!"
        
        echo ""
        echo "==========================================="
        echo "üöÄ DEPLOY CONCLU√çDO COM SUCESSO!"
        echo "==========================================="
        echo "Frontend: http://localhost:80"
        echo "Backend API: http://localhost:5000"
        echo "Prisma Studio: Execute 'npm run prisma:studio' no diret√≥rio server"
        echo ""
        echo "Para parar a aplica√ß√£o: docker-compose down"
        echo "Para ver logs: docker-compose logs -f"
        echo "==========================================="
    else
        log_error "Falha ao iniciar alguns containers. Verifique os logs:"
        docker-compose logs
        exit 1
    fi
}

# Fun√ß√£o de limpeza
cleanup() {
    log "Limpando recursos n√£o utilizados..."
    docker system prune -f
    log_success "Limpeza conclu√≠da."
}

# Menu principal
show_menu() {
    echo ""
    echo "==========================================="
    echo "üöÄ DEPLOY AUTOMATIZADO - SISTEMA ZARA"
    echo "==========================================="
    echo "1. Deploy completo (recomendado)"
    echo "2. Apenas build das imagens"
    echo "3. Apenas iniciar aplica√ß√£o"
    echo "4. Parar aplica√ß√£o"
    echo "5. Ver logs da aplica√ß√£o"
    echo "6. Limpeza do sistema"
    echo "7. Sair"
    echo "==========================================="
    read -p "Escolha uma op√ß√£o (1-7): " choice
}

# Fun√ß√£o principal
main() {
    case $1 in
        "full")
            log "Iniciando deploy completo..."
            check_docker
            check_files
            setup_env
            run_migrations
            build_images
            start_application
            ;;
        "build")
            log "Construindo imagens..."
            check_docker
            check_files
            build_images
            ;;
        "start")
            log "Iniciando aplica√ß√£o..."
            check_docker
            start_application
            ;;
        "stop")
            log "Parando aplica√ß√£o..."
            docker-compose down
            log_success "Aplica√ß√£o parada."
            ;;
        "logs")
            log "Exibindo logs da aplica√ß√£o..."
            docker-compose logs -f
            ;;
        "clean")
            cleanup
            ;;
        *)
            show_menu
            case $choice in
                1)
                    main "full"
                    ;;
                2)
                    main "build"
                    ;;
                3)
                    main "start"
                    ;;
                4)
                    main "stop"
                    ;;
                5)
                    main "logs"
                    ;;
                6)
                    main "clean"
                    ;;
                7)
                    log "Saindo..."
                    exit 0
                    ;;
                *)
                    log_error "Op√ß√£o inv√°lida!"
                    main
                    ;;
            esac
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"